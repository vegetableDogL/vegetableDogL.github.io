<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>LuckyBlog开源搭建教程</title>
      <link href="/2020/09/17/BlogOpen/"/>
      <url>/2020/09/17/BlogOpen/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>之前在<a href="https://www.bilibili.com/">B站</a>上发布了个人博客的视频，播放量也破千了，有网友私聊也想要搭建一个这样的博客。经过一段时间的准备，现将本人博客的源代码公布出来，大家只需要根据以下的步骤，即可快速搭建一个漂亮完善的博客。</p><p><img src="https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/posts/20210518215948.png"></p><h3 id="0x01-LuckyBlog-介绍"><a href="#0x01-LuckyBlog-介绍" class="headerlink" title="0x01 LuckyBlog 介绍"></a>0x01 LuckyBlog 介绍</h3><p>上一个LuckyBlog版本发布于2020年的9月份，是在 <a href="https://sunhwee.com/">洪卫の博客</a> 基础上进行修改的。自从发布以来有很多网友都私信搭建了博客，同时也发现了旧版本中存在的一些问题需要解决，例如：搜索框不适配XML代码搜索，部分图片失效，代码块问题以及各种小问题。现在将最新的LuckyBlog版本代码发布出来，修复改进了不少的BUG，使其更加稳定运行。同时完善了博客的基础功能，例如：音乐、视频、相册、百宝箱等页面。同时增加了不少的新功能，例如：适配Hexo5.x、黑白天浏览模式、仿Windows页面，站点统计等。</p><ul><li>博客演示地址：<a href="http://luckyzmj.cn/">http://luckyzmj.cn/</a></li><li>开源项目地址：<a href="https://github.com/LuckyZmj/LuckyBlog">https://github.com/LuckyZmj/LuckyBlog</a></li></ul><p><strong>主题特性</strong></p><ul><li><input checked="" disabled="" type="checkbox"> 简单漂亮，文章内容美观易读</li><li><input checked="" disabled="" type="checkbox"> <a href="https://material.io/">Material Design</a> 设计</li><li><input checked="" disabled="" type="checkbox"> 响应式设计，博客在桌面端、平板、手机等设备上均能很好的展现</li><li><input checked="" disabled="" type="checkbox"> 首页轮播文章及每天动态切换 <code>Banner</code> 图片</li><li><input checked="" disabled="" type="checkbox"> 瀑布流式的博客文章列表（文章无特色图片时会有 <code>24</code> 张漂亮的图片代替）</li><li><input checked="" disabled="" type="checkbox"> 时间轴式的归档页</li><li><input checked="" disabled="" type="checkbox"> <code>词云</code>的标签页和<code>雷达图</code>的分类页</li><li><input checked="" disabled="" type="checkbox"> 丰富的关于我页面（包括关于我、文章统计图、我的项目、我的技能、相册等）</li><li><input checked="" disabled="" type="checkbox"> 可自定义的数据的友情链接页面</li><li><input checked="" disabled="" type="checkbox"> 支持文章置顶和文章打赏</li><li><input checked="" disabled="" type="checkbox"> 支持 <code>MathJax</code></li><li><input checked="" disabled="" type="checkbox"> <code>TOC</code> 目录，优化了目录显示效果</li><li><input checked="" disabled="" type="checkbox"> 可设置复制文章内容时追加版权信息</li><li><input checked="" disabled="" type="checkbox"> 可设置阅读文章时做密码验证</li><li><input checked="" disabled="" type="checkbox"> <a href="https://gitalk.github.io/">Gitalk</a>、<a href="https://imsun.github.io/gitment/">Gitment</a>、<a href="https://valine.js.org/">Valine</a> 和 <a href="https://disqus.com/">Disqus</a> 评论模块（推荐使用 <code>Valine</code>）</li><li><input checked="" disabled="" type="checkbox"> 集成了<a href="http://busuanzi.ibruce.info/">不蒜子统计</a>、谷歌分析（<code>Google Analytics</code>）和文章字数统计等功能</li><li><input checked="" disabled="" type="checkbox"> 支持在首页的音乐播放和视频播放功能</li><li><input checked="" disabled="" type="checkbox"> 修改了原主题以及基础主题中的一些<code>BUG</code></li><li><input checked="" disabled="" type="checkbox"> 加入图片懒加载功能，在根目录配置文件开启和关闭</li><li><input checked="" disabled="" type="checkbox"> 增加<code>留言板</code>功能   </li><li><input checked="" disabled="" type="checkbox"> 在关于板块,加入<code>简历</code>功能页</li><li><input checked="" disabled="" type="checkbox"> 增加完善<code>音乐</code>、<code>相册</code>、<code>视频</code>等功能页面 </li><li><input checked="" disabled="" type="checkbox"> 支持<code>emoji</code>表情，用<code>markdown emoji</code>语法书写直接生成对应的能<strong>跳跃</strong>的表情</li><li><input checked="" disabled="" type="checkbox"> 增加网站运行时间显示</li><li><input checked="" disabled="" type="checkbox"> 增加<code>live2d</code> 动漫人物模型</li><li><input checked="" disabled="" type="checkbox"> 整体替换Banner图片和文章特色图片</li><li><input checked="" disabled="" type="checkbox"> 增加实用的快捷导航栏功能</li><li><input checked="" disabled="" type="checkbox"> 修改了一些控件的参数以及部分样式</li><li><input checked="" disabled="" type="checkbox"> 优化了代码显示块的效果</li><li><input checked="" disabled="" type="checkbox"> 增加页面樱花飘落动效</li><li><input checked="" disabled="" type="checkbox"> 增加鼠标点击烟花爆炸动效</li><li><input checked="" disabled="" type="checkbox"> 增加页面雪花飘落动效</li><li><input checked="" disabled="" type="checkbox"> 增加博客白云背景效果</li><li><input checked="" disabled="" type="checkbox"> 增加天气接口控件</li><li><input checked="" disabled="" type="checkbox"> 加入鼠标点击文字特效</li><li><input checked="" disabled="" type="checkbox"> 增加<code>DaoVoice</code>在线聊天插件</li><li><input checked="" disabled="" type="checkbox"> 增加博客代码、图片压缩功能</li><li><input checked="" disabled="" type="checkbox"> 增加黑白天浏览模式功能</li><li><input checked="" disabled="" type="checkbox"> 增加仿<code>Windows</code>功能</li><li><input checked="" disabled="" type="checkbox"> 增加站点统计功能</li><li><input checked="" disabled="" type="checkbox"> 增加留言版一言功能</li><li><input checked="" disabled="" type="checkbox"> 其他</li></ul><h3 id="0x02-LuckyBlog-安装"><a href="#0x02-LuckyBlog-安装" class="headerlink" title="0x02 LuckyBlog 安装"></a>0x02 LuckyBlog 安装</h3><h4 id="1-安装Git"><a href="#1-安装Git" class="headerlink" title="1. 安装Git"></a>1. 安装Git</h4><p><code>Git</code>是目前世界上最先进的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。<code>Git</code>的作用是将本地的网页文件传到<code>github</code>上。</p><ul><li>Git<a href="https://git-scm.com/download">下载地址</a></li><li>Git<a href="https://www.liaoxuefeng.com/wiki/896043488029600">教程</a></li></ul><p><strong>windows：</strong> 到git官网上下载.exe文件,Download git,安装选项全部默认即可。</p><h4 id="2-安装node-js"><a href="#2-安装node-js" class="headerlink" title="2. 安装node.js"></a>2. 安装node.js</h4><p><code>Hexo</code>是基于<code>node.js</code>编写的，所以需要安装一下<code>node.js</code>和里面的<code>npm</code>工具。</p><p><strong>windows：</strong> 到<a href="http://nodejs.cn/download/">Node.js官网</a>下载<code>.exe</code>文件，安装选项全部默认。安装好之后，按<code>Win+R</code>打开cmd命令提示符，输入<code>node -v</code>和<code>npm -v</code>，若出现版本号，则说明安装成功。</p><h4 id="3-添加npm国内源"><a href="#3-添加npm国内源" class="headerlink" title="3. 添加npm国内源"></a>3. 添加npm国内源</h4><p>使用阿里的国内镜像进行加速下载</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token keyword">set</span> registry https://registry.npm.taobao.org</code></pre><h4 id="4-安装Hexo"><a href="#4-安装Hexo" class="headerlink" title="4. 安装Hexo"></a>4. 安装Hexo</h4><p>前面<code>git</code>和<code>nodejs</code>安装好后，就可以安装<code>hexo</code>了，你可以先创建一个文件夹<code>MyBlog</code>，用来存放自己的博客文件，然后<code>cd</code>到这个文件夹下（或者在这个文件夹下直接鼠标右键<code>git bash</code>打开）。</p><p>比如我的博客文件都存放在<code>C:\MyBlog</code>目录下。</p><p>在该目录下右键点击<code>Git Bash Here</code>，打开<code>git</code>的控制台窗口，以后我们所有的操作都在<code>git</code>控制台进行，就不用<code>Windows</code>自带的<code>cmd</code>了。</p><p>定位到该目录下，输入<code>npm install -g hexo-cli</code>安装<code>Hexo</code>。可能会有几个报错，不用理会。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli</code></pre><p>安装完后输入<code>hexo -v</code>验证是否安装成功。</p><p>接下来初始化一下<code>hexo</code>,即初始化我们的博客网站。例如我的在<code>C:\MyBlog</code>文件夹下的命令行中，输入<code>hexo init</code>初始化文件夹</p><pre class=" language-bash"><code class="language-bash">hexo init</code></pre><p>新建完成后，指定文件夹<code>MyBlog</code>目录下有：</p><ul><li><code>node_modules</code>: 依赖包</li><li><code>public</code>：存放生成的页面</li><li><code>scaffolds</code>：生成文章的一些模板</li><li><code>source</code>：用来存放你的文章</li><li><code>themes</code>：主题**</li><li><code>_config.yml</code>: 博客的配置文件**</li></ul><p>到此为止，本地的Hexo基础环境搭建完成了。</p><h4 id="5-安装LuckyBlog"><a href="#5-安装LuckyBlog" class="headerlink" title="5. 安装LuckyBlog"></a>5. 安装LuckyBlog</h4><p>下载源代码到本地文件下</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/LuckyZmj/LuckyBlog.git</code></pre><p>将下载好的<code>LuckyBlog</code>全部复制到<code>MyBlog</code>目录下，如果复制过程中出现重复文件，点击替换。</p><p><img src="https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/posts/20210518202657.png"></p><p>最后使用 <code>npm i</code> 或者 <code>npm install</code> 安装依赖环境包即可。</p><blockquote><p>如果安装依赖环境出错，可以参考<a href="https://blog.csdn.net/Seven71111/article/details/103364738">这篇文章</a>。</p></blockquote><p>最后执行 <code>hexo clean</code> 和 <code>hexo s -g</code> 启动Hexo本地预览，即可看到效果。</p><p><img src="https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/posts/20210518204521.JPG"></p><p>到此为止LuckyBlog安装完成，接下来就是个性化设置了。</p><h3 id="0x03-LuckyBlog-个性化"><a href="#0x03-LuckyBlog-个性化" class="headerlink" title="0x03 LuckyBlog 个性化"></a>0x03 LuckyBlog 个性化</h3><blockquote><p>注意！注意！注意！在阅读以下博客个性化之前，最好希望大家有Hexo博客配置主题的基础。如果是完全小白，建议去网上搜索学习相关Hexo搭建博客的过程，另外去B站上也有很多视频教程。博客个性化是需要大家有耐心的，因为每个人的操作不同，在配置过程中可能会遇到一些不可预期的问题，希望大家可以克服这些困难，如有需要帮助，也可以私信博主帮助大家解决问题。</p></blockquote><h4 id="1-修改部署平台"><a href="#1-修改部署平台" class="headerlink" title="1. 修改部署平台"></a>1. 修改部署平台</h4><p>编辑根目录下的配置文件<code>MyBlog/_config.yml</code>，找到如下内容并修改</p><pre class=" language-bash"><code class="language-bash">deploy:- type: <span class="token function">git</span>  repo: git@github.com:LuckyZmj/LuckyZmj.github.io.git <span class="token comment" spellcheck="true"># 替换为你的部署平台地址</span>  branch: master</code></pre><h4 id="2-修改网站信息"><a href="#2-修改网站信息" class="headerlink" title="2. 修改网站信息"></a>2. 修改网站信息</h4><p>编辑根目录下的配置文件<code>MyBlog/_config.yml</code>，找到如下内容并修改</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># Site</span>title: Luckeysubtitle: <span class="token string">'Luckeyの博客'</span>  description: <span class="token string">'本科 | 计算机科学与技术 | 网络安全'</span>keywords: <span class="token string">'luckyzmj 计算机 网络安全 渗透测试'</span>  <span class="token comment" spellcheck="true"># 博客网站关键词</span>author: Luckey   <span class="token comment" spellcheck="true"># 博主名称</span>language: zh-CNtimezone: <span class="token string">''</span><span class="token comment" spellcheck="true"># URL</span><span class="token comment" spellcheck="true">## If your site is put in a subdirectory, set url as 'http://example.com/child' and root as '/child/'</span>url: http://www.luckyzmj.cn   <span class="token comment" spellcheck="true"># 更改为你的博客地址</span>root: /<span class="token comment" spellcheck="true"># permalink: :year/:month/:day/:title/</span>permalink: posts/:abbrlink.html  <span class="token comment" spellcheck="true"># p 是自定义的前缀</span>abbrlink:    alg: crc32   <span class="token comment" spellcheck="true">#算法： crc16(default) and crc32</span>    rep: hex     <span class="token comment" spellcheck="true">#进制： dec(default) and hex</span>permalink_defaults:pretty_urls:  trailing_index: <span class="token boolean">true</span> <span class="token comment" spellcheck="true"># Set to false to remove trailing 'index.html' from permalinks</span>  trailing_html: <span class="token boolean">true</span> <span class="token comment" spellcheck="true"># Set to false to remove trailing '.html' from permalinks</span></code></pre><h4 id="3-修改博客头像"><a href="#3-修改博客头像" class="headerlink" title="3. 修改博客头像"></a>3. 修改博客头像</h4><p>编辑主题目录下的配置文件<code>MyBlog/themes/matery/_config.yml</code>，找到如下内容并修改</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># Configure website favicon and LOGO</span><span class="token comment" spellcheck="true"># 将以下改为自己的头像链接即可</span>favicon: https://s1.ax1x.com/2020/05/17/YR20js.jpglogo: https://s1.ax1x.com/2020/05/17/YRWsYT.png</code></pre><h4 id="4-修改留言板简介"><a href="#4-修改留言板简介" class="headerlink" title="4. 修改留言板简介"></a>4. 修改留言板简介</h4><p>演示效果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/posts/20210518204949.png"></p><p>编辑 <code>/MyBlog/contact/index.md</code>，修改你想要内容即可</p><pre class=" language-bash"><code class="language-bash">---title: contactdate: 2019-10-25 00:00:00type: <span class="token string">"contact"</span>layout: <span class="token string">"contact"</span>---<span class="token comment" spellcheck="true">## 畅所欲言</span>---在这里可以留下你的足迹，欢迎在下方留言，欢迎交换友链，一起交流学习！<span class="token comment" spellcheck="true">## 友链</span>---Lucky_Meの友链信息博客名称: Lucky_Meの博客博客网址: http://luckyzmj.cn博客头像: https://s1.ax1x.com/2020/05/17/YRWsYT.png博客介绍: 知识面决定攻击面，知识链决定攻击深度！</code></pre><h4 id="5-修改音乐列表"><a href="#5-修改音乐列表" class="headerlink" title="5. 修改音乐列表"></a>5. 修改音乐列表</h4><p>想要修改自己喜欢的音乐之前，需要先获取音乐列表的id。</p><p>以QQ音乐为例：先登录<a href="https://y.qq.com/">QQ音乐网页版</a>，点击打开自己喜欢的音乐列表，在网页的URL处包含了音乐列表的id，如下图所示</p><p><img src="https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed/posts/20200916213029.png"></p><p>编辑主题目录下的配置文件<code>MyBlog/themes/matery/_config.yml</code>，找到如下内容并修改</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 默认是博主的QQ音乐的id，大家可以改为自己音乐喜欢列表的id</span><span class="token comment" spellcheck="true"># 更新完id，就可以同步加载自己喜欢的列表音乐了</span><span class="token comment" spellcheck="true"># Whether to display the musics.</span><span class="token comment" spellcheck="true"># 是否在首页显示音乐.</span>music:  enable: <span class="token boolean">true</span>  title: <span class="token comment" spellcheck="true">#非吸底模式有效</span>    enable: <span class="token boolean">true</span>    show: 听听音乐  autoHide: <span class="token boolean">true</span>    <span class="token comment" spellcheck="true"># hide automaticaly</span>  server: tencent   <span class="token comment" spellcheck="true">#require  music platform: netease, tencent, kugou, xiami, baidu</span>  type: playlist    <span class="token comment" spellcheck="true">#require song, playlist, album, search, artist</span>  id: 1776127550     <span class="token comment" spellcheck="true">#require song id / playlist id / album id / search keyword</span>  fixed: <span class="token boolean">true</span>       <span class="token comment" spellcheck="true"># 开启吸底模式</span>  autoplay: <span class="token boolean">false</span>   <span class="token comment" spellcheck="true"># 是否自动播放</span>  theme: <span class="token string">'#42b983'</span>  loop: <span class="token string">'all'</span>       <span class="token comment" spellcheck="true"># 音频循环播放, 可选值: 'all', 'one', 'none'</span>  order: <span class="token string">'random'</span>   <span class="token comment" spellcheck="true"># 音频循环顺序, 可选值: 'list', 'random'</span>  preload: <span class="token string">'auto'</span>   <span class="token comment" spellcheck="true"># 预加载，可选值: 'none', 'metadata', 'auto'</span>  volume: 0.7       <span class="token comment" spellcheck="true"># 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效</span>  listFolded: <span class="token boolean">true</span>  <span class="token comment" spellcheck="true"># 列表默认折叠</span>  hideLrc: <span class="token boolean">true</span>     <span class="token comment" spellcheck="true"># 隐藏歌词</span><span class="token comment" spellcheck="true"># Whether to display the musics.</span><span class="token comment" spellcheck="true"># 单独的音乐页面.</span>musics:  enable: <span class="token boolean">true</span>  title:          <span class="token comment" spellcheck="true">#非吸底模式有效</span>    enable: <span class="token boolean">true</span>    show: 听听音乐  server: tencent   <span class="token comment" spellcheck="true">#require music platform: netease, tencent, kugou, xiami, baidu</span>  type: playlist    <span class="token comment" spellcheck="true">#require song, playlist, album, search, artist</span>  id: 1776127550     <span class="token comment" spellcheck="true">#require song id / playlist id / album id / search keyword</span>  fixed: <span class="token boolean">false</span>      <span class="token comment" spellcheck="true"># 开启吸底模式</span>  autoplay: <span class="token boolean">true</span>   <span class="token comment" spellcheck="true"># 是否自动播放</span>  theme: <span class="token string">'#42b983'</span>  loop: <span class="token string">'all'</span>       <span class="token comment" spellcheck="true"># 音频循环播放, 可选值: 'all', 'one', 'none'</span>  order: <span class="token string">'random'</span>   <span class="token comment" spellcheck="true"># 音频循环顺序, 可选值: 'list', 'random'</span>  preload: <span class="token string">'auto'</span>   <span class="token comment" spellcheck="true"># 预加载，可选值: 'none', 'metadata', 'auto'</span>  volume: 0.7       <span class="token comment" spellcheck="true"># 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效</span>  listFolded: <span class="token boolean">false</span>  <span class="token comment" spellcheck="true"># 列表默认折叠</span>  listMaxHeight: <span class="token string">"525px"</span> <span class="token comment" spellcheck="true">#列表最大高度</span></code></pre><h4 id="6-绑定-Valine-评论"><a href="#6-绑定-Valine-评论" class="headerlink" title="6. 绑定 Valine 评论"></a>6. 绑定 Valine 评论</h4><p>编辑主题目录下的配置文件<code>MyBlog/themes/matery/_config.yml</code>，找到如下内容并修改</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># Valine 评论模块的配置，默认为不激活，如要使用，就请激活该配置项，并设置 appId 和 appKey.</span>valine:  enable: <span class="token boolean">true</span>  appId: Ucrxxxxxxxxxxxxxxxx-xxxxsz  <span class="token comment" spellcheck="true"># 自行注册valine获取</span>  appKey: zPsLxxxxxxxxxxxxxxerLmd    <span class="token comment" spellcheck="true"># 自行注册valine获取</span>  notify: <span class="token boolean">true</span>  verify: <span class="token boolean">true</span>  visitor: <span class="token boolean">true</span>  avatar: <span class="token string">'monsterid'</span> <span class="token comment" spellcheck="true"># Gravatar style : mm/identicon/monsterid/wavatar/retro/hide</span>  pageSize: 10  placeholder: <span class="token string">'留下你的足迹..'</span> <span class="token comment" spellcheck="true"># Comment Box placeholder</span>  background: /medias/comment_bg.png  count: <span class="token boolean">true</span>  enableQQ: 16463223  <span class="token comment" spellcheck="true"># 改为自己的QQ号</span>  recordIP: <span class="token boolean">true</span>  requiredFields:     - nick    - mail  guest_info:     - nick    - mail    - <span class="token function">link</span>  master:     - 46606772953bed0812789d6dc955614e  <span class="token comment" spellcheck="true"># md5加密后的博主邮箱</span>  metaPlaceholder:  <span class="token comment" spellcheck="true"># 输入框的背景文字</span>    nick: 昵称/QQ号<span class="token punctuation">(</span>必填<span class="token punctuation">)</span>    mail: 邮箱<span class="token punctuation">(</span>必填<span class="token punctuation">)</span>    link: 网址<span class="token punctuation">(</span>https://<span class="token punctuation">)</span>  lang: zh-CN  tagMeta: <span class="token comment" spellcheck="true"># The String Array of Words to show Flag.[Just Only xCss Style mode]</span>    - 博主    - 小伙伴    - 访客  friends: <span class="token comment" spellcheck="true"># The MD5 String Array of friends Email to show friends Flag.[Just Only xCss Style mode]</span>    - cb3e577ff029d6073400d5557effd41f       -</code></pre><h4 id="7-绑定-DaoVoice-在线聊天"><a href="#7-绑定-DaoVoice-在线聊天" class="headerlink" title="7. 绑定 DaoVoice 在线聊天"></a>7. 绑定 DaoVoice 在线聊天</h4><p>编辑主题目录下的配置文件<code>MyBlog/themes/matery/_config.yml</code>，找到如下内容并修改</p><pre class=" language-bash"><code class="language-bash">daovoice:  enable: <span class="token boolean">true</span>  app_id: 4xxxxxxxe   <span class="token comment" spellcheck="true">#DaoVoice中的app_id</span></code></pre><h4 id="8-快捷导航页面个性化"><a href="#8-快捷导航页面个性化" class="headerlink" title="8. 快捷导航页面个性化"></a>8. 快捷导航页面个性化</h4><p>编辑文件<code>MyBlog/source/tools/index.html</code>，以下简单标记出几处，还有其他涉及到博客信息的内容都需要改为你自己的博客信息即可。</p><p><img src="https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed/posts/20200916235833.png"></p><h4 id="9-添加友情链接"><a href="#9-添加友情链接" class="headerlink" title="9. 添加友情链接"></a>9. 添加友情链接</h4><p>编辑文件<code>MyBlog/suorce/_data/friends.json</code>，按如下格式添加友情</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>    <span class="token punctuation">{</span>        <span class="token string">"avatar"</span><span class="token keyword">:</span> <span class="token string">"https://s1.ax1x.com/2020/05/17/YRWsYT.png"</span>,        <span class="token string">"name"</span><span class="token keyword">:</span> <span class="token string">"Luckey"</span>,        <span class="token string">"introduction"</span><span class="token keyword">:</span> <span class="token string">"越努力，越幸运"</span>,        <span class="token string">"url"</span><span class="token keyword">:</span> <span class="token string">"http://www.luckyzmj.cn"</span>,        <span class="token string">"title"</span><span class="token keyword">:</span> <span class="token string">"访问主页"</span>    <span class="token punctuation">}</span>,<span class="token punctuation">{</span>      <span class="token string">"avatar"</span><span class="token keyword">:</span> <span class="token string">"https://sunhwee.com/hwsun.jpg"</span>,      <span class="token string">"name"</span><span class="token keyword">:</span> <span class="token string">"洪卫の博客"</span>,      <span class="token string">"introduction"</span><span class="token keyword">:</span> <span class="token string">"UESTC CVer"</span>,      <span class="token string">"url"</span><span class="token keyword">:</span> <span class="token string">"http://sunhwee.com"</span>,      <span class="token string">"title"</span><span class="token keyword">:</span> <span class="token string">"访问主页"</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre><h4 id="10-添加相册"><a href="#10-添加相册" class="headerlink" title="10. 添加相册"></a>10. 添加相册</h4><p>比如你的图片上传图床后，链接地址如下</p><pre class=" language-bash"><code class="language-bash">https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed/galleries/璀璨星空/01.jpghttps://cdn.jsdelivr.net/gh/LuckyZmj/imgbed/galleries/璀璨星空/02.jpghttps://cdn.jsdelivr.net/gh/LuckyZmj/imgbed/galleries/动漫风景/01.jpghttps://cdn.jsdelivr.net/gh/LuckyZmj/imgbed/galleries/动漫风景/02.jpg<span class="token punctuation">..</span>.</code></pre><p>首先提取出图片链接公共的部分，作为图床地址</p><pre class=" language-bash"><code class="language-bash">https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed/galleries/</code></pre><p>然后再提取图片地址中不同的部分，作为图片地址</p><pre class=" language-bash"><code class="language-bash">璀璨星空/01.jpg璀璨星空/02.jpg动漫风景/01.jpg动漫风景/03.jpg<span class="token punctuation">..</span>.</code></pre><blockquote><p>具体怎么分割根据你自己图床的链接格式而定，以上为我的github图床格式为例。</p></blockquote><p>将相册图床的地址改为你自己的图床地址，需要更改两处文件</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 例如我的图床地址为：</span>https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed/galleries/</code></pre><p>themes/matery/layout/galleries.ejs</p><p><img src="https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed/posts/20201008183019.png"></p><p>themes/matery/layout/gallerie.ejs</p><p><img src="https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed/posts/20201008183219.png"></p><p>为每个相册添加链接地址，在根目录/source/List/galleries/下新建 相册名称 文件夹，并在该文件夹下新建 <code>index.md</code> </p><p><img src="https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed/posts/20201008183808.png"></p><p>最后，在根目录/source/_data/galleries.json中添加图片链接，格式如下,</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>  <span class="token punctuation">{</span>    <span class="token string">"name"</span><span class="token keyword">:</span> <span class="token string">"璀璨星空"</span>,    <span class="token string">"cover"</span><span class="token keyword">:</span> <span class="token string">"璀璨星空/01.jpg"</span>,    <span class="token string">"description"</span><span class="token keyword">:</span> <span class="token string">"璀璨星空"</span>,    <span class="token string">"photos"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>      <span class="token string">"璀璨星空/01.jpg"</span>,      <span class="token string">"璀璨星空/02.jpg"</span>,      <span class="token string">"璀璨星空/03.jpg"</span>,      <span class="token string">"璀璨星空/04.jpg"</span>,      <span class="token string">"璀璨星空/05.jpg"</span>,      <span class="token string">"璀璨星空/06.jpg"</span>,      <span class="token string">"璀璨星空/07.jpg"</span>,      <span class="token string">"璀璨星空/08.jpg"</span>,      <span class="token string">"璀璨星空/09.jpg"</span>,      <span class="token string">"璀璨星空/10.jpg"</span>,      <span class="token string">"璀璨星空/11.jpg"</span>,      <span class="token string">"璀璨星空/12.jpg"</span>,      <span class="token string">"璀璨星空/13.jpg"</span>,      <span class="token string">"璀璨星空/14.jpg"</span>,      <span class="token string">"璀璨星空/15.jpg"</span>,      <span class="token string">"璀璨星空/16.jpg"</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span>,  <span class="token punctuation">{</span>    <span class="token string">"name"</span><span class="token keyword">:</span> <span class="token string">"动漫风景"</span>,    <span class="token string">"cover"</span><span class="token keyword">:</span> <span class="token string">"动漫风景/01.jpg"</span>,    <span class="token string">"description"</span><span class="token keyword">:</span> <span class="token string">"动漫风景"</span>,    <span class="token string">"photos"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>      <span class="token string">"动漫风景/01.jpg"</span>,      <span class="token string">"动漫风景/02.jpg"</span>,      <span class="token string">"动漫风景/03.jpg"</span>,      <span class="token string">"动漫风景/04.jpg"</span>,      <span class="token string">"动漫风景/05.jpg"</span>,      <span class="token string">"动漫风景/06.jpg"</span>,      <span class="token string">"动漫风景/07.jpg"</span>,      <span class="token string">"动漫风景/08.jpg"</span>,      <span class="token string">"动漫风景/09.jpg"</span>,      <span class="token string">"动漫风景/10.jpg"</span>,      <span class="token string">"动漫风景/11.jpg"</span>,      <span class="token string">"动漫风景/12.jpg"</span>,      <span class="token string">"动漫风景/13.jpg"</span>,      <span class="token string">"动漫风景/14.jpg"</span>,      <span class="token string">"动漫风景/15.jpg"</span>,      <span class="token string">"动漫风景/16.jpg"</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre><h4 id="11-站点统计功能"><a href="#11-站点统计功能" class="headerlink" title="11. 站点统计功能"></a>11. 站点统计功能</h4><p>站点统计的数据来源于<a href="https://tongji.baidu.com/web/welcome/login">百度统计</a>,当你的网站被百度收录后就会在百度统计中出现数据，具体效果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/posts/20210518211242.png"></p><p>由于博客的统计页面数据不能直接从百度站点中调用，因此需要自行从百度站点中将相应数据填入博客站点统计页面的源代码文件中，个人建议每隔一个月手动更新一次数据。</p><p>打开<code>MyBlog\themes\matery\layout\census.ejs</code>文件，将百度统计中的数据填入源代码中，修改代码如下：</p><p><img src="https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/posts/20210518210629.png"></p><h4 id="11-仿Windows个性化"><a href="#11-仿Windows个性化" class="headerlink" title="11. 仿Windows个性化"></a>11. 仿Windows个性化</h4><p>仿Windows页面是采用<a href="https://ylui.yuri2.cn/">YLUI</a>实现的，YLUI提供了社区版本供大家学习使用，具体效果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/posts/20210518211817.png"></p><p>大家可以查看YLUI官方的<a href="https://github.com/yuri2peter/ylui/tree/master/documents">开发文档</a>进行开发，有不懂的可以加官方的QQ群：<code>191372634</code> 进行讨论。</p><h4 id="12-博客动漫风格背景图"><a href="#12-博客动漫风格背景图" class="headerlink" title="12. 博客动漫风格背景图"></a>12. 博客动漫风格背景图</h4><p>因为在上一个LuckyBlog版本发布的网站风格是偏向动漫风格的，如果大家喜欢动漫风格，只需要替换以下配置即可。</p><p><strong>博客每日轮播图：</strong> 以下链接图片全部下载保存到<code>MyBlog\themes\matery\source\medias\banner</code>中，以0~7.jpg的文件名格式命名即可。</p><pre class=" language-html"><code class="language-html">https://cdn.jsdelivr.net/gh/LuckyZmj/LuckyBlog@master/themes/matery/source/medias/banner/0.jpghttps://cdn.jsdelivr.net/gh/LuckyZmj/LuckyBlog@master/themes/matery/source/medias/banner/1.jpghttps://cdn.jsdelivr.net/gh/LuckyZmj/LuckyBlog@master/themes/matery/source/medias/banner/2.jpghttps://cdn.jsdelivr.net/gh/LuckyZmj/LuckyBlog@master/themes/matery/source/medias/banner/3.jpghttps://cdn.jsdelivr.net/gh/LuckyZmj/LuckyBlog@master/themes/matery/source/medias/banner/4.jpghttps://cdn.jsdelivr.net/gh/LuckyZmj/LuckyBlog@master/themes/matery/source/medias/banner/5.jpghttps://cdn.jsdelivr.net/gh/LuckyZmj/LuckyBlog@master/themes/matery/source/medias/banner/6.jpghttps://cdn.jsdelivr.net/gh/LuckyZmj/LuckyBlog@master/themes/matery/source/medias/banner/7.jpg</code></pre><p><strong>无文章特色背景图：</strong> 打开主题配置文件<code>MyBlog\themes\matery\_config.yml</code>，修改替换如下代码即可：</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># The post featured images that needs to be displayed when there is no image.</span><span class="token comment" spellcheck="true"># 无文章特色图片时需要显示的文章特色图片.</span>featureImages: - https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E5%8A%A8%E6%BC%AB%E9%A3%8E%E6%99%AF/01.jpg- https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E5%8A%A8%E6%BC%AB%E9%A3%8E%E6%99%AF/02.jpg- https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E5%8A%A8%E6%BC%AB%E9%A3%8E%E6%99%AF/04.jpg- https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E5%8A%A8%E6%BC%AB%E9%A3%8E%E6%99%AF/06.jpg- https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E5%8A%A8%E6%BC%AB%E9%A3%8E%E6%99%AF/07.jpg- https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E5%8A%A8%E6%BC%AB%E9%A3%8E%E6%99%AF/10.jpg- https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E5%8A%A8%E6%BC%AB%E9%A3%8E%E6%99%AF/11.jpg- https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E5%8A%A8%E6%BC%AB%E9%A3%8E%E6%99%AF/12.jpg- https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E5%8A%A8%E6%BC%AB%E9%A3%8E%E6%99%AF/09.jpg- https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E5%8A%A8%E6%BC%AB%E9%A3%8E%E6%99%AF/14.jpg- https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E5%8A%A8%E6%BC%AB%E9%A3%8E%E6%99%AF/15.jpg- https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E5%8A%A8%E6%BC%AB%E9%A3%8E%E6%99%AF/16.jpg- https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E4%BA%8C%E6%AC%A1%E5%85%83%E9%A3%8E/06.jpg- https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E5%8A%A8%E6%BC%AB%E6%8F%92%E7%94%BB/02.jpg- https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E5%8A%A8%E6%BC%AB%E6%8F%92%E7%94%BB/03.jpg- https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E5%8A%A8%E6%BC%AB%E6%8F%92%E7%94%BB/04.jpg- https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E5%8A%A8%E6%BC%AB%E6%8F%92%E7%94%BB/07.jpg- https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E5%8A%A8%E6%BC%AB%E6%8F%92%E7%94%BB/08.jpg- https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E5%8A%A8%E6%BC%AB%E6%8F%92%E7%94%BB/11.jpg- https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E5%8A%A8%E6%BC%AB%E6%8F%92%E7%94%BB/10.jpg- https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E5%8A%A8%E6%BC%AB%E6%8F%92%E7%94%BB/09.jpg- https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E5%8A%A8%E6%BC%AB%E6%8F%92%E7%94%BB/12.jpg- https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E5%8A%A8%E6%BC%AB%E6%8F%92%E7%94%BB/13.jpg- https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E5%8A%A8%E6%BC%AB%E6%8F%92%E7%94%BB/14.jpg- https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E7%92%80%E7%92%A8%E6%98%9F%E7%A9%BA/16.jpg- https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E7%92%80%E7%92%A8%E6%98%9F%E7%A9%BA/15.jpg- https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E7%92%80%E7%92%A8%E6%98%9F%E7%A9%BA/11.jpg- https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E7%92%80%E7%92%A8%E6%98%9F%E7%A9%BA/09.jpg- https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E7%92%80%E7%92%A8%E6%98%9F%E7%A9%BA/03.jpg- https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E5%8A%A8%E6%BC%AB%E9%A3%8E%E6%99%AF/08.jpg- https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E5%8A%A8%E6%BC%AB%E9%A3%8E%E6%99%AF/03.jpg- https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E5%8A%A8%E6%BC%AB%E9%A3%8E%E6%99%AF/13.jpg- https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E5%8A%A8%E6%BC%AB%E6%8F%92%E7%94%BB/01.jpg- https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E5%8A%A8%E6%BC%AB%E6%8F%92%E7%94%BB/05.jpg- https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E7%92%80%E7%92%A8%E6%98%9F%E7%A9%BA/14.jpg- https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E7%92%80%E7%92%A8%E6%98%9F%E7%A9%BA/01.jpg</code></pre><h3 id="0x04-更多内容优化"><a href="#0x04-更多内容优化" class="headerlink" title="0x04 更多内容优化"></a>0x04 更多内容优化</h3><p>以上简单介绍了 <code>LuckyBlog</code> 中一些要修改的个性化地方，其他更详细的优化参考其他关于<code>Matery</code>的文章。以下几篇文章都是基于<code>hexo-theme-matery</code>主题优化的教程，大家如果遇到问题，可以参考其中的方法。</p><ul><li><a href="http://luckyzmj.cn/posts/e3e08109.html">个人博客搭建</a></li><li><a href="https://sunhwee.com/posts/6e8839eb.html">Hexo+Github博客搭建完全教程</a></li><li><a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md">hexo-theme-matery作者教程</a></li><li><a href="https://yafine-blog.cn/posts/4ab2.html">Hexo+github搭建博客(超级详细版，精细入微)</a></li><li><a href="https://blog.csdn.net/cungudafa/article/details/106278206">hexo（matery）背景、滚动条优化+增加点击跳评论</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 博客篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo-blog-lucky </tag>
            
            <tag> 博客搭建教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EL表达式</title>
      <link href="/2020/04/28/EL%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2020/04/28/EL%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="1、EL表达式"><a href="#1、EL表达式" class="headerlink" title="1、EL表达式"></a>1、EL表达式</h1><h2 id="1-2-1-获取域中的值-重要"><a href="#1-2-1-获取域中的值-重要" class="headerlink" title="1.2.1 获取域中的值  (重要!!)"></a>1.2.1 获取域中的值  (重要!!)</h2><p>EL表达式主要简化从域对象（4个域）中获取数据</p><p><strong>语法</strong></p><pre class=" language-markdown"><code class="language-markdown"><span class="token list punctuation">*</span> 标准（了解）<span class="token code keyword">    1. ${pageScope.键名} </span><span class="token code keyword">            从page域中获取指定键名对应的值</span><span class="token code keyword">    2. ${requestScope.键名} </span><span class="token code keyword">            从request域中获取指定键名对应的值</span><span class="token code keyword">    3. ${sessionScope.键名} </span><span class="token code keyword">            从session域中获取指定键名对应的值</span><span class="token code keyword">    4. ${applicationScope.键名} </span><span class="token code keyword">            从servletContext域中获取指定键名对应的值</span><span class="token code keyword">        </span><span class="token list punctuation">*</span> 简化（掌握）<span class="token code keyword">    ${键名}</span><span class="token code keyword">        特点：默认从最小域开始找，找到后直接显示，不在继续寻找</span><span class="token code keyword">        小结：要求四个域键名唯一</span>    </code></pre><pre class=" language-jsp"><code class="language-jsp"><%@ page contentType="text/html;charset=UTF-8" language="java" %><html><head>    <title>Title</title></head><body>        <div>            <%                //存值                pageContext.setAttribute("name1", "value1");                request.setAttribute("name2", "value2");                session.setAttribute("name3", "value3");                application.setAttribute("name4", "value4");//                pageContext.setAttribute("name5", "value11");                request.setAttribute("name5", "value22");                session.setAttribute("name5", "value33");                application.setAttribute("name5", "value44");            %>            <%                //取值                Object name2 = request.getAttribute("name2");                out.print(name2);            %>            ${name2}            <hr>            <%--                EL : 简化java代码书写                0. 语法  ${表达式}                1. 简化从域对象中取值操作                2. 标准语法                    requestScope.name2 等价于 request.getAttribute("name2")                3. 简略语法 (!!!!!!!!!!!!!)                    ${域对象的name属性}                    如果多个域对象的name属性相同,优先级 : 范围越小,优先级越高                        pageContext < request < session < servletContext                        当前jsp页面    一次请求    一次会话      应用全局                                             --%>            ${pageScope.name1}            ${requestScope.name2}            ${sessionScope.name3}            ${applicationScope.name4}            <hr>            ${name1}            ${name2}            ${name3}            ${name4}            <hr>            ${name5}        </div></body></html></code></pre><p><strong>练习【作业】</strong></p><pre class=" language-markdown"><code class="language-markdown"><span class="token list punctuation">1.</span> 获取字符串<span class="token code keyword">        ${键名}</span><span class="token code keyword">        </span><span class="token list punctuation">2.</span> 获取对象（User）<span class="token code keyword">        ${键名.属性名}</span><span class="token list punctuation">3.</span> 获取List（Array）集合<span class="token code keyword">        ${键名[索引]}</span><span class="token list punctuation">4.</span> 获取Map集合<span class="token code keyword">        ${键名.key}</span><span class="token code keyword">        ${键名["key"]}</span><span class="token code keyword">        </span><span class="token list punctuation">5.</span> 补充<span class="token code keyword">    el不会出现null和索引角标越界问题</span></code></pre><pre class=" language-jsp"><code class="language-jsp"><%@ page import="java.util.ArrayList" %><%@ page import="java.util.Collections" %><%@ page import="java.util.HashMap" %><%@ page import="com.itheima.pojo.User" %><%@ page contentType="text/html;charset=UTF-8" language="java" %><html><head>    <title>Title</title></head><body>        <div>            <%               //当value=string                String str = "abc";                request.setAttribute("str", str);                //当value=javaBean                User aa = new User("张三", 18);                request.setAttribute("user", aa);                //当value=list                ArrayList<String> list = new ArrayList<>();                Collections.addAll(list, "a","b","c");                request.setAttribute("list", list);                //当value=map                HashMap<String, String> map = new HashMap<>();                map.put("name", "高圆圆");                map.put("age", "18");                map.put("xx.yy", "呵呵");                request.setAttribute("map", map);            %>        </div>        <div>            ${str} <br>            ${user.name} ,${user.age} <br>            ${list[2]} <br>            ${map.name} , ${map.age},${map["xx.yy"]}        </div></body></html></code></pre><h2 id="1-2-2-执行运算-重要"><a href="#1-2-2-执行运算-重要" class="headerlink" title="1.2.2 执行运算(重要)"></a>1.2.2 执行运算(重要)</h2><pre class=" language-markdown"><code class="language-markdown"><span class="token list punctuation">*</span> 算数运算符<span class="token code keyword">        语法： +     -     *     /(div)         %(mod)</span><span class="token code keyword">        </span><span class="token list punctuation">*</span> 比较运算符<span class="token code keyword">        语法：>     &lt;     >=     &lt;=     ==(eq)         !=(ne)</span><span class="token code keyword">        </span><span class="token list punctuation">*</span> 逻辑运算符<span class="token code keyword">        语法：&amp;&amp;(and) ||(or) !(not)</span><span class="token code keyword">        </span><span class="token list punctuation">*</span> 三元运算符<span class="token code keyword">        语法：${条件表达式？为真:为假}</span><span class="token hr punctuation">------------------------------</span><span class="token list punctuation">*</span> 空运算符<span class="token code keyword">         语法：${not empty 对象}</span><span class="token code keyword">         功能：</span><span class="token code keyword">             a. 可以判断对象是否为null</span><span class="token code keyword">             b. 可以判断字符串是否空串 ""</span><span class="token code keyword">             c. 可以判断一个集合的长度是否为0</span></code></pre><pre class=" language-jsp"><code class="language-jsp"><%@ page import="java.util.List" %><%@ page import="java.util.ArrayList" %><%@ page contentType="text/html;charset=UTF-8" language="java" %><html><head>    <title>Title</title></head><body>        <div>            <%                request.setAttribute("n1", 10);                request.setAttribute("n2", 4);            %>            ${n1} / ${n2} = ${n1/n2} <br>            ${n1%n2} , ${n1 mod n2} <br>        </div>        <div>            <%                request.setAttribute("sex", "女");            %>            姓名 : 张三 <br>            性别 :            <input type="radio" name="sex" ${sex=='男'?'checked' : ''}> 男            <input type="radio" name="sex" ${sex=='女'?'checked' : ''}> 女        </div>        <div>            <%--          * 空运算符           语法：${not empty 对象}                   如果对象是empty,返回false           功能：               a. 可以判断对象是否为null               b. 可以判断字符串是否空串 ""               c. 可以判断一个集合的长度是否为0          --%>            <%                Object obj = null;                String str = "";                List<String> list = new ArrayList<>();                request.setAttribute("obj", obj);                request.setAttribute("str", str);                request.setAttribute("list", list);            %>            ${not empty obj}            ${not empty str}            ${not empty list}        </div></body></html></code></pre><h2 id="1-2-3-隐式对象-了解"><a href="#1-2-3-隐式对象-了解" class="headerlink" title="1.2.3 隐式对象(了解)"></a>1.2.3 隐式对象(了解)</h2><pre class=" language-markdown"><code class="language-markdown"><span class="token list punctuation">*</span> el表达式中有11个隐式对象<span class="token code keyword">    掌握:             cookie</span><span class="token code keyword">            可以获取浏览器指定cookie名称的值            </span><span class="token code keyword">              ${cookie.name属性名.value}</span></code></pre><pre class=" language-jsp"><code class="language-jsp"><%@ page contentType="text/html;charset=UTF-8" language="java" %><html><head>    <title>Title</title></head><body>    <div>        <%            Cookie[] cookies = request.getCookies();            for (Cookie cookie : cookies) {                String name = cookie.getName();                String value = cookie.getValue();                out.println(name);                out.print("<br>");                out.println(value);            }        %>        <br>        <%--            el表达式可以写在任意地方,but脚本除外            el的隐式对象: cookie        --%>        ${cookie.JSESSIONID.name} <br>        ${cookie.JSESSIONID.value}    </div></body></html></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Filter&amp;Listener</title>
      <link href="/2020/04/28/Filter&amp;Listener/"/>
      <url>/2020/04/28/Filter&amp;Listener/</url>
      
        <content type="html"><![CDATA[<h1 id="1、Filter-amp-Listener"><a href="#1、Filter-amp-Listener" class="headerlink" title="1、Filter&amp;Listener"></a>1、Filter&amp;Listener</h1><h2 id="1、WEB三大组件的介绍"><a href="#1、WEB三大组件的介绍" class="headerlink" title="1、WEB三大组件的介绍"></a>1、WEB三大组件的介绍</h2><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 概念</span><span class="token list punctuation">1.</span> 组件: 是一个系统的组成部件<span class="token list punctuation">2.</span> javaweb组件 : javaweb项目的组成部件<span class="token code keyword">    1). servlet </span><span class="token code keyword">    2). filter </span><span class="token code keyword">    3). listener </span></code></pre><table><thead><tr><th><strong>组件</strong></th><th><strong>作用</strong></th><th><strong>实现接口</strong></th></tr></thead><tbody><tr><td><strong>Servlet</strong></td><td>小应用程序，在JavaWeb中主要做为控制器来使用  可以处理用户的请求并且做出响应</td><td>javax.servlet.Servlet</td></tr><tr><td><strong>Filter</strong></td><td>过滤器，对用户发送的请求或响应进行集中处理，实现请求的拦截</td><td>javax.servlet.Filter</td></tr><tr><td><strong>Listener</strong></td><td>监听器，在Web执行过程中，监听一些事件，当相应事件发生时, 进行处理</td><td>javax.servlet.XxxListener  每个事件有一个接口</td></tr></tbody></table><h2 id="2、Filter"><a href="#2、Filter" class="headerlink" title="2、Filter"></a>2、Filter</h2><blockquote><p>Filter的作用：</p><ol><li>拦截客户端对web资源的请求</li><li>拦截web资源对客户端的响应</li></ol></blockquote><p><strong>应用场景：</strong></p><p>如：登录验证、统一编码处理、敏感字符过滤</p><p><img src="https://i.loli.net/2021/09/07/4ScFxEb89NrWDmJ.png" alt="image-20210907172801213"></p><h3 id="1、使用："><a href="#1、使用：" class="headerlink" title="1、使用："></a>1、使用：</h3><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 1.编写java类，实现filter接口（javax.servlet.Filter）</span><span class="token title important"><span class="token punctuation">#</span> 2.编写web.xml配置</span></code></pre><p>java类</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 也可使用注解  @WebFilter("/MyServlet")，使用注解就不能用xml配置，会出错</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>FilterConfig filterConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*        doFilter方法: 类似于Servlet的service方法        1. 请求每发一次, 此方法就会执行一次        2. 这个方法先于资源(Servlet的service方法)执行,起到拦截请求的作用     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span>ServletRequest servletRequest<span class="token punctuation">,</span> ServletResponse servletResponse<span class="token punctuation">,</span>                         FilterChain filterChain<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ServletException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MyFilter执行了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//此方法类似于Servlet的请求转发, 此方法需要调用后续资源才会被访问到</span>        <span class="token comment" spellcheck="true">//放行</span>        filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>servletRequest<span class="token punctuation">,</span> servletResponse<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        servletRequest.getRequestDispatcher("目标地址").forward(servletRequest, servletResponse);</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>web.xml</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd<span class="token punctuation">"</span></span>         <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>4.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>MyFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>com.itheima01.MyFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--        过滤器:            拦截客户端对web资源的请求            (这里配置的是拦截的路径)    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>MyFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/MyServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span></code></pre><h3 id="2、工作原理"><a href="#2、工作原理" class="headerlink" title="2、工作原理"></a>2、工作原理</h3><pre class=" language-markdown"><code class="language-markdown"><span class="token list punctuation">1.</span> 用户发送请求，请求Web资源(包括html,jsp,servlet等)<span class="token list punctuation">2.</span> 如果Web资源的地址，是filter要拦截的地址，请求将先经过filter,并执行doFilter()<span class="token list punctuation">3.</span> doFilter()方法中如果调用filterChain.doFilter()，则允许请求访问下一个Web资源。<span class="token list punctuation">4.</span> 访问Web资源，响应回来会再次经过filter,执行过滤器中的代码，到达浏览器端。</code></pre><h3 id="3、生命周期"><a href="#3、生命周期" class="headerlink" title="3、生命周期"></a>3、生命周期</h3><pre class=" language-markdown"><code class="language-markdown"><span class="token list punctuation">*</span> 创建（filter启动加载的）<span class="token code keyword">        服务器启动项目加载，创建filter对象，执行init方法（只执行一次）</span><span class="token code keyword">        </span><span class="token list punctuation">*</span> 运行（过滤拦截）<span class="token code keyword">        用户访问被拦截目标资源时，执行doFilter方法</span><span class="token list punctuation">*</span> 销毁<span class="token code keyword">        服务器关闭项目卸载时，销毁filter对象，执行destroy方法（只执行一次）</span><span class="token code keyword">        </span><span class="token list punctuation">*</span> 补充：<span class="token code keyword">    过滤器一定是优先于servlet创建的,后于Servlet销毁</span></code></pre><p><strong>filter接口的API：</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 初始化方法</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>FilterConfig config<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 执行拦截方法</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span>ServletRequest request<span class="token punctuation">,</span> ServletResponse response<span class="token punctuation">,</span>FilterChain chain<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 销毁方法</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="4、-拦截路径"><a href="#4、-拦截路径" class="headerlink" title="4、 拦截路径"></a>4、 拦截路径</h3><pre class=" language-markdown"><code class="language-markdown"><span class="token list punctuation">*</span> 精准匹配<span class="token code keyword">        用户访问指定目标资源（/show.jsp）时，过滤器进行拦截</span><span class="token code keyword">        </span><span class="token list punctuation">*</span> 目录匹配<span class="token code keyword">        用户访问指定目录下（/user/*）所有资源时，过滤器进行拦截</span><span class="token list punctuation">*</span> 后缀匹配<span class="token code keyword">        用户访问指定后缀名（*.html）的资源时，过滤器进行拦截</span><span class="token list punctuation">*</span> 匹配所有<span class="token code keyword">        用户访问该网站所有资源（/*）时，过滤器进行拦截</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@WebFilter</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"/user/*"</span><span class="token punctuation">,</span><span class="token string">"/YourServlet"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">// 可以设置多个拦截路径</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UrlFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>    。。。<span class="token punctuation">}</span></code></pre><h3 id="5、拦截方式"><a href="#5、拦截方式" class="headerlink" title="5、拦截方式"></a>5、拦截方式</h3><blockquote><p>在开发时，我们可以指定过滤器的拦截方式来处理不同的应用场景，比如：只拦截从浏览器直接发送过来的请求，或者拦截内部转发的请求</p></blockquote><pre class=" language-markdown"><code class="language-markdown">总共有五种不同的拦截方式,我们这里学习常见的两种<span class="token list punctuation">1.</span> request（默认拦截方式）<span class="token code keyword">        浏览器直接发送请求时，拦截</span><span class="token list punctuation">2.</span> forward<span class="token code keyword">        请求转发的时候，拦截</span><span class="token code keyword">        比如: 资源A转发到资源B时</span><span class="token code keyword">        </span>我们可以配置 二个同时存在...</code></pre><p><strong>web.xml配置：</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>XFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>com.itheima04.method.MethodFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>XFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/BServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dispatcher</span><span class="token punctuation">></span></span>FORWARD<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dispatcher</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dispatcher</span><span class="token punctuation">></span></span>REQUEST<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dispatcher</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span></code></pre><p><strong>注解版本：</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    Filter默认只拦截来自浏览器的请求,不拦截转发的请求    1. dispatcherTypes可以用于设置过滤器拦截的请求类型    2. 默认取值是request (来自浏览器的请求)        可以设置 forward (转发的请求) */</span><span class="token annotation punctuation">@WebFilter</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"/AServlet"</span><span class="token punctuation">,</span><span class="token string">"/BServlet"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        dispatcherTypes <span class="token operator">=</span> <span class="token punctuation">{</span>DispatcherType<span class="token punctuation">.</span>REQUEST<span class="token punctuation">,</span>DispatcherType<span class="token punctuation">.</span>FORWARD<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MethodFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>    。。。<span class="token punctuation">}</span></code></pre><h3 id="6、过滤器链"><a href="#6、过滤器链" class="headerlink" title="6、过滤器链"></a>6、过滤器链</h3><blockquote><p>在一次请求中,若我们请求匹配到了多个filter,通过请求就相当于把这些filter串起来了，形成了过滤器链。</p><p>即多个filter拦截一个资源，形成了拦截链，使用filter的先后顺序如下。</p></blockquote><pre class=" language-markdown"><code class="language-markdown"><span class="token list punctuation">*</span> 过滤器链中执行的先后问题....<span class="token code keyword">    xml配置文件</span><span class="token code keyword">        谁先声明，谁先执行</span><span class="token code keyword">            &lt;filter-mapping></span><span class="token code keyword">    注解【不推荐】</span><span class="token code keyword">        根据过滤器类名进行排序，值小的先执行</span><span class="token code keyword">            FilterA  FilterB  进行比较， FilterA先执行...</span></code></pre><p><img src="https://i.loli.net/2021/09/07/YdI4k7UgQZvCVyT.png" alt="image-20210907174554267"></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>FilterB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>com.itheima05.chain.FilterB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>FilterB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/SourceServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>FilterA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>com.itheima05.chain.FilterA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>FilterA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/SourceServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span></code></pre><h2 id="3、Listener"><a href="#3、Listener" class="headerlink" title="3、Listener"></a>3、Listener</h2><blockquote><p>在我们的java程序中，有时也需要监视某些事情，一旦被监视的对象发生相应的变化，我们应该采取相应的操作。</p><p>监听web三大域对象：HttpServletRequest、HttpSession、ServletContext  （创建和销毁）</p></blockquote><p>场景：</p><pre class=" language-markdown"><code class="language-markdown">历史访问次数、统计在线人数、系统启动时初始化配置信息（spring的加载）</code></pre><p> <strong>监听器的接口分类</strong></p><table><thead><tr><th><strong>事件源</strong></th><th><strong>监听器接口</strong></th><th><strong>时机</strong></th></tr></thead><tbody><tr><td><strong>ServletContext</strong></td><td>ServletContextListener</td><td>上下文域创建和销毁</td></tr><tr><td><strong>ServletContext</strong></td><td>ServletContextAttributeListener</td><td>上下文域属性增删改的操作</td></tr><tr><td>**HttpSession **</td><td>HttpSessionListener</td><td>会话域创建和销毁</td></tr><tr><td>**HttpSession **</td><td>HttpSessionAttributeListener</td><td>会话域属性增删改的操作</td></tr><tr><td><strong>HttpServletRequest</strong></td><td>ServletRequestListener</td><td>请求域创建和销毁</td></tr><tr><td><strong>HttpServletRequest</strong></td><td>ServletRequestAttributeListener</td><td>请求域属性增删改的操作</td></tr></tbody></table><h3 id="1、使用：-1"><a href="#1、使用：-1" class="headerlink" title="1、使用："></a>1、使用：</h3><p><strong>步骤分析</strong></p><pre class=" language-markdown"><code class="language-markdown"><span class="token list punctuation">1.</span> 创建一个普通类，实现ServletContextListenner<span class="token list punctuation">2.</span> 重写抽象方法<span class="token code keyword">    监听ServletContext创建</span><span class="token code keyword">    监听ServletContext销毁</span>    <span class="token list punctuation">3.</span> 配置<span class="token code keyword">    web.xml</span><span class="token code keyword">    注解</span></code></pre><p><strong>java代码：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyServletContextListener</span> <span class="token keyword">implements</span> <span class="token class-name">ServletContextListener</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//此方法运行,意味着ServletContext创建了</span>    <span class="token comment" spellcheck="true">//tomcat启动时,加载项目,ServletContext就会创建</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextInitialized</span><span class="token punctuation">(</span>ServletContextEvent servletContextEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ServletContext创建了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextDestroyed</span><span class="token punctuation">(</span>ServletContextEvent servletContextEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ServletContext销毁了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>xml:</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener-class</span><span class="token punctuation">></span></span>com.itheima08.listener.MyServletContextListener<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener-class</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener</span><span class="token punctuation">></span></span></code></pre><p><strong>注解：</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@WebListener</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyServletContextListener</span> <span class="token keyword">implements</span> <span class="token class-name">ServletContextListener</span> <span class="token punctuation">{</span>    。。。<span class="token punctuation">}</span></code></pre><h3 id="2、运行原理"><a href="#2、运行原理" class="headerlink" title="2、运行原理"></a>2、运行原理</h3><pre class=" language-markdown"><code class="language-markdown"> Listener入门<span class="token code keyword">        1. 编写一个类,实现接口</span><span class="token code keyword">        2. 配置</span><span class="token code keyword">            1). web.xml</span><span class="token code keyword">            2). 注解</span><span class="token code keyword">    Listener原理</span><span class="token code keyword">        1. tomcat启动的时候,会读取web.xml中,发现监听器类全名</span><span class="token code keyword">        2. tomcat会创建这个监听器对象</span><span class="token code keyword">           clazz =  Class.forName("com.itheima08.listener.MyServletContextListener");</span><span class="token code keyword">           ServletContextListener listener = clazz.newInstance();</span><span class="token code keyword">        3. ServletContextListener就会开始工作 : 监听ServletContext创建和销毁</span><span class="token code keyword">            如果ServletContext创建,就调用contextInitialized方法</span><span class="token code keyword">             如果ServletContext销毁,就调用contextDestroyed方法</span>   问题:    ServletContextListener ,ServletContext ,Filter, Servlet都能启动加载,先后顺序?<span class="token code keyword">       ServletContextListener > ServletContext  > Filter > Servlet</span></code></pre><h3 id="3、模拟spring框架"><a href="#3、模拟spring框架" class="headerlink" title="3、模拟spring框架"></a>3、模拟spring框架</h3><ul><li>可以在项目启动时读取配置文件</li></ul><blockquote><p>项目启动时: ServletContextListener &gt; filter init &gt; servlet init</p></blockquote><pre class=" language-xml"><code class="language-xml"> <span class="token comment" spellcheck="true">&lt;!--        TODO: ServletContext读取全局配置参数            spring的使用者编写spring核心配置文件,并且在web.xml配置文件的位置            接下来spring底层就会在tomcat启动的时候加载此配置文件            (底层实现用ServletContextListener)    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>springConfiguration<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>spring.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">></span></span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>itheima08<span class="token punctuation">.</span>listener<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletContext<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletContextEvent<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletContextListener<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>WebListener<span class="token punctuation">;</span><span class="token annotation punctuation">@WebListener</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringListener</span> <span class="token keyword">implements</span> <span class="token class-name">ServletContextListener</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//此方法是项目一启动就运行,表示servletContext创建好了, 早于Filter和Servlet</span>        <span class="token comment" spellcheck="true">// xxEvent可以获取xx对象</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextInitialized</span><span class="token punctuation">(</span>ServletContextEvent servletContextEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ServletContext context <span class="token operator">=</span> servletContextEvent<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String springConfiguration <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getInitParameter</span><span class="token punctuation">(</span><span class="token string">"springConfiguration"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>springConfiguration<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//接下来spring可以使用dom4j解析spring.xml</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextDestroyed</span><span class="token punctuation">(</span>ServletContextEvent servletContextEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="4、运行顺序"><a href="#4、运行顺序" class="headerlink" title="4、运行顺序"></a>4、运行顺序</h2><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> ServletContextListener > ServletContext  > Filter > Servlet</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo之渲染绕过</title>
      <link href="/2020/04/28/Hexo-xr/"/>
      <url>/2020/04/28/Hexo-xr/</url>
      
        <content type="html"><![CDATA[<h3 id="0x001-Hexo-渲染"><a href="#0x001-Hexo-渲染" class="headerlink" title="0x001 Hexo 渲染"></a>0x001 Hexo 渲染</h3><p>  在Hexo部署时会默认渲染source下的所有html页面，但有时候想在Hexo博客上单独自定义html页面或README.md时，却不希望被Hexo渲染。因此对某个文件或者目录进行排除渲染是非常必要的。</p><h3 id="0x002-方法一：font-matter"><a href="#0x002-方法一：font-matter" class="headerlink" title="0x002 方法一：font matter"></a>0x002 方法一：font matter</h3><p><code>Hexo</code>新建网站页面，然后将你的代码直接写入 <code>index.md</code> 中</p><p>在 <code>Front matter</code> 中添加 <code>layout: false</code>，此方法适用于单一的纯<code>HTML</code><br><code>CSS</code> 页面。</p><pre class=" language-bash"><code class="language-bash">---title: toolsdate: 2020-04-28 00:00:00type: <span class="token string">"tools"</span>layout: <span class="token boolean">false</span>---</code></pre><h3 id="0x003-方法二：skip-render"><a href="#0x003-方法二：skip-render" class="headerlink" title="0x003 方法二：skip render"></a>0x003 方法二：skip render</h3><p>在博客根目录下的 <code>_config.yml</code>，找到 <code>skip_render</code>，大概在32行左右，写入你想要的跳过渲染的路径，注意缩进和空格。</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 指定目录跳过hexo渲染</span>skip_render:  - <span class="token string">'tools/*'</span>  - <span class="token string">'tools/**'</span></code></pre><blockquote><p>注释：<code>tools/*</code> 表示在目录 <code>source/fireworks</code> 下的文件全部跳过渲染，<code>tools/**</code> 表示在博客根目录 <code>source/tools/</code> 文件夹下的文件全部跳过渲染（例如页面的 js、css 在另一个文件夹中）。</p></blockquote><h3 id="0x004-案例：webstack-导航"><a href="#0x004-案例：webstack-导航" class="headerlink" title="0x004 案例：webstack 导航"></a>0x004 案例：webstack 导航</h3><p><code>webstack</code>是一个纯静态的网址导航网站，内容均由<code>viggo</code>收集并整理。项目基于<code>bootstrap</code>前端框架开发。</p><p><img src="https://camo.githubusercontent.com/41111c4c1d9922982f380566e6a2f8415204c52c/687474703a2f2f7777772e776562737461636b2e63632f6173736574732f696d616765732f707265766965772e676966" alt="image"></p><ul><li>Github：<a href="https://github.com/WebStackPage/WebStackPage.github.io">https://github.com/WebStackPage/WebStackPage.github.io</a></li></ul><p>在博客根目录 <code>source/</code>下新建<code>tools</code>，然后新建<code>index.html</code>,将<code>webstack</code>网页源码全选复制粘贴到里面。</p><ul><li>本站的webstack源码：<a href="view-source:http://luckyzmj.cn/tools/">view-source:http://luckyzmj.cn/tools/</a></li></ul><blockquote><p>注意：将源码里的部分信息以及跳转链接按照你真实个人博客的环境进行修改。</p></blockquote><p>然后打开博客根目录下配置文件<code>_config.yml</code>，找到<code>skip_render</code>，做如下修改：</p><pre class=" language-bash"><code class="language-bash">skip_render:  - <span class="token string">'tools/*'</span>  - <span class="token string">'tools/**'</span></code></pre><p>最后执行<code>hexo clean</code>和<code>hexo s -g </code>本地预览，检查无误后<code>hexo g -d</code>部署到服务器上即可。</p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ul><li><a href="https://xiabor.com/2020/04/21/hexo3/#%E5%A6%82%E4%BD%95%E8%B7%B3%E8%BF%87hexo%E7%9A%84%E6%B8%B2%E6%9F%93">https://xiabor.com/2020/04/21/hexo3/#%E5%A6%82%E4%BD%95%E8%B7%B3%E8%BF%87hexo%E7%9A%84%E6%B8%B2%E6%9F%93</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 博客篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 渲染绕过 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Session</title>
      <link href="/2020/04/28/Session/"/>
      <url>/2020/04/28/Session/</url>
      
        <content type="html"><![CDATA[<h1 id="1、session"><a href="#1、session" class="headerlink" title="1、session"></a>1、session</h1><h2 id="1、简述"><a href="#1、简述" class="headerlink" title="1、简述"></a>1、简述</h2><p><strong>session是服务器端的会话技术</strong></p><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> session的作用</span><span class="token code keyword">    在一次会话的多次请求之间共享数据，将数据保存到服务器端</span><span class="token title important"><span class="token punctuation">#</span> HttpSession是一个域对象 </span><span class="token code keyword">    HttpSession是一个接口</span><span class="token code keyword">    域对象可以看成是map(存储多个键值对), cookie是一个entry(只能存一个键值对)</span><span class="token list punctuation">1.</span> 域对象的方法 <span class="token code keyword">    a. 存储数据</span><span class="token code keyword">            void setAttribute(String name,Object value)</span><span class="token code keyword">    b. 获取数据</span><span class="token code keyword">            Object getAttribute(String name)</span><span class="token code keyword">    c. 删除数据</span><span class="token code keyword">            void removeAttribute(String name)</span><span class="token code keyword">            </span><span class="token list punctuation">2.</span> 生命周期: 一次会话的多次请求之间<span class="token code keyword">        pageContext(JSP) &lt; request &lt; session &lt; servletContext</span><span class="token code keyword">            从api上来说, 小域对象可以获取大域对象    </span></code></pre><h2 id="2、工作原理"><a href="#2、工作原理" class="headerlink" title="2、工作原理"></a>2、工作原理</h2><pre class=" language-java"><code class="language-java">session创建，会创建一个cookie对象，name为JSESSIONID <span class="token punctuation">,</span> value为Session的id    发送到客户端。</code></pre><p><strong>方法介绍：</strong></p><pre class=" language-java"><code class="language-java"><span class="token number">1</span><span class="token punctuation">.</span> 获取session对象<span class="token operator">:</span>         HttpSession  session <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span> 通过请求对象创建一个会话对象<span class="token punctuation">,</span>如果当前用户会话不存在，创建会话。          <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span> 如果会话已经存在，这个方法返回已经存在的会话对象。            <span class="token number">2</span><span class="token punctuation">.</span> 获取session的id        String sessionId <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">3</span><span class="token punctuation">.</span>  使当前session失效        ression<span class="token punctuation">.</span><span class="token function">invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </code></pre><p><strong>创建过程：</strong></p><pre class=" language-java"><code class="language-java">        <span class="token comment" spellcheck="true">//获取session对象(tomcat创建session对象)</span>        HttpSession session <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"sick"</span><span class="token punctuation">,</span> <span class="token string">"有点虚"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//tomcat底层自动实现了</span><span class="token comment" spellcheck="true">//        String id = session.getId();</span><span class="token comment" spellcheck="true">//        Cookie cookie = new Cookie("JSESSIONID", id);</span><span class="token comment" spellcheck="true">//        response.addCookie(cookie);</span></code></pre><h2 id="3、什么情况下会找不到原来的session"><a href="#3、什么情况下会找不到原来的session" class="headerlink" title="3、什么情况下会找不到原来的session"></a>3、什么情况下会找不到原来的session</h2><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 什么情况下会找不到原来的session (通俗版)</span>    <span class="token list punctuation">1.</span> 浏览器的原因 : 编号丢了(cookie删除)<span class="token code keyword">    1). 用户清除浏览记录（清除cookie）</span><span class="token code keyword">        浏览记录有包含cookie</span><span class="token code keyword">    2). 用户关闭浏览器 （cookie过期）</span><span class="token code keyword">        cookie默认存活到浏览会话结束  </span><span class="token code keyword">        1. 解决方案 session持久化</span><span class="token code keyword">        2. 原理 实际上是持久化cookie  达到 session持久化的目的</span><span class="token code keyword">                </span><span class="token list punctuation">2.</span> 服务器的原因 : 病历本没了(session销毁)<span class="token code keyword">    1). 主动销毁</span><span class="token code keyword">        session.invalidate();</span><span class="token code keyword">    2). 默认间隔30分钟不访问过期</span><span class="token code keyword">        I. tomcat的设置(tomcat/conf/web.xml)</span><span class="token code keyword">             &lt;session-config></span><span class="token code keyword">                &lt;session-timeout>30&lt;/session-timeout></span><span class="token code keyword">            &lt;/session-config>    </span><span class="token code keyword">        II. 当前项目进行设置(web.xml)    </span><span class="token code keyword">             &lt;session-config></span><span class="token code keyword">                &lt;session-timeout>5&lt;/session-timeout></span><span class="token code keyword">            &lt;/session-config></span><span class="token code keyword">    3). tomcat非正常关闭   </span><span class="token code keyword">            但是tomcat正常关闭,session会被tomcat保存起来 -> session钝化和活化</span></code></pre><h2 id="4、session的持久化"><a href="#4、session的持久化" class="headerlink" title="4、session的持久化"></a>4、session的持久化</h2><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 设置cookie的过期时间,session依然找到的</span><span class="token code keyword">        1. 在Servlet中手动创建name=JESSIONID的cookie；</span><span class="token code keyword">        2. 这个cookie存储session的id,设置持久化级别 setMaxAge(秒)；</span><span class="token code keyword">        3. 将JESSIONID的cookie响应给浏览器； </span><span class="token code keyword">        </span><span class="token title important"><span class="token punctuation">#</span> 配置session的过期时间</span><span class="token code keyword">        I. tomcat的设置(tomcat/conf/web.xml)</span><span class="token code keyword">             &lt;session-config></span><span class="token code keyword">                &lt;session-timeout>30&lt;/session-timeout></span><span class="token code keyword">            &lt;/session-config>    </span><span class="token code keyword">        II. 当前项目进行设置(web.xml)    </span><span class="token code keyword">             &lt;session-config></span><span class="token code keyword">                &lt;session-timeout>5&lt;/session-timeout></span><span class="token code keyword">            &lt;/session-config></span></code></pre><h2 id="5、session的钝化和活化"><a href="#5、session的钝化和活化" class="headerlink" title="5、session的钝化和活化"></a>5、session的钝化和活化</h2><pre class=" language-java"><code class="language-java"># 之前提到<span class="token punctuation">,</span> 当服务器正常关闭，重启后，还可以再获取<span class="token function">session</span><span class="token punctuation">(</span>跟之前的一样<span class="token punctuation">)</span>这是因为tomcat已实现以下二个功能<span class="token number">1</span><span class="token punctuation">.</span> 钝化（序列化<span class="token operator">:</span> ObjectOutputStream） 保存        当服务器正常关闭时，session中的数据，会序列化到硬盘 <span class="token punctuation">(</span>持久化<span class="token punctuation">)</span>            序列化的目的<span class="token operator">:</span> 将内存中对象或数据结构 保存 到硬盘 <span class="token punctuation">(</span>编码<span class="token operator">:</span> 看得懂 <span class="token operator">-</span><span class="token operator">></span> 看不懂<span class="token punctuation">)</span>                内存<span class="token operator">:</span> 临时性存储设备<span class="token punctuation">,</span> 断电了数据就消失                硬盘<span class="token operator">:</span> 持久性存储设备<span class="token punctuation">,</span> 断电了数据依然在                <span class="token number">2</span><span class="token punctuation">.</span> 活化（反序列化 <span class="token operator">:</span> ObjectInputStream） 读取        当服务器开启后，从磁盘文件中，将数据反序列化到内存中            反序列化的目的<span class="token operator">:</span> 将硬盘上的数据读取到内存<span class="token punctuation">,</span>形成对象或数据结构 <span class="token punctuation">(</span>解码<span class="token operator">:</span> 看不懂 <span class="token operator">-</span><span class="token operator">></span> 看得懂<span class="token punctuation">)</span>备注<span class="token operator">:</span> 钝化和活化的本质是序列化技术<span class="token punctuation">,</span> 所以保存的存储数据类型需要实现serializable接口</code></pre><h2 id="6、Session特点"><a href="#6、Session特点" class="headerlink" title="6、Session特点"></a>6、Session特点</h2><pre class=" language-java"><code class="language-java"># session是服务器端的会话技术    作用<span class="token operator">:</span> 在一次会话的多次请求之间共享数据        从浏览器第一次向服务器发起请求建立会话<span class="token punctuation">,</span> 直到其中一方断开为止会话结束        <span class="token number">1</span><span class="token punctuation">.</span> session存储数据在服务器<span class="token number">2</span><span class="token punctuation">.</span> session存储任意类型的数据（Object）<span class="token number">3</span><span class="token punctuation">.</span> session存储大小和数量没有限制（在服务器内存）<span class="token number">4</span><span class="token punctuation">.</span> session存储相对安全</code></pre><h2 id="7、找到持久化后的session文件"><a href="#7、找到持久化后的session文件" class="headerlink" title="7、找到持久化后的session文件"></a>7、找到持久化后的session文件</h2><pre class=" language-java"><code class="language-java"><span class="token number">1</span><span class="token punctuation">.</span>idea需要勾选保留cookie    <span class="token number">2</span><span class="token punctuation">.</span>查看运行后的tomcat日志输出 Using CATALINA_BASE<span class="token operator">:</span>的路径    </code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Srevlet</title>
      <link href="/2020/04/28/Servlet1/"/>
      <url>/2020/04/28/Servlet1/</url>
      
        <content type="html"><![CDATA[<h1 id="1、servlet"><a href="#1、servlet" class="headerlink" title="1、servlet"></a>1、servlet</h1><h2 id="1、servlet快速案例"><a href="#1、servlet快速案例" class="headerlink" title="1、servlet快速案例"></a>1、servlet快速案例</h2><h3 id="1、创建web项目"><a href="#1、创建web项目" class="headerlink" title="1、创建web项目"></a>1、创建web项目</h3><p><img src="https://gitee.com/ergou15154/drawing-bed/raw/master/source/image-20210831213426821.png" alt="image-20210831213426821"></p><h3 id="2、编写普通java类，实现servlet接口"><a href="#2、编写普通java类，实现servlet接口" class="headerlink" title="2、编写普通java类，实现servlet接口"></a>2、编写普通java类，实现servlet接口</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>itheima01<span class="token punctuation">.</span>servlet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* servlet : 写一个入门案例        I. 编写一个类实现Servlet接口                重写了service方法        II. 配置web.xml文件  # 快捷键        1. ctrl + i(implements): 提示接口中还未重写方法 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyServlet</span> <span class="token keyword">implements</span> <span class="token class-name">Servlet</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span>ServletRequest servletRequest<span class="token punctuation">,</span> ServletResponse servletResponse<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MyServlet被访问了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//网页上显示出来,不要写中文,会乱码</span>        servletResponse<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"hello servlet"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//响应给浏览器</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>ServletConfig servletConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> ServletConfig <span class="token function">getServletConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getServletInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3、配置web-xml"><a href="#3、配置web-xml" class="headerlink" title="3、配置web.xml"></a>3、配置web.xml</h3><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd<span class="token punctuation">"</span></span>         <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>4.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>MyServletsb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>com.itheima01.servlet.MyServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>MyServletsb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/my<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span></code></pre><h2 id="2、执行原理"><a href="#2、执行原理" class="headerlink" title="2、执行原理"></a>2、执行原理</h2><pre class=" language-java"><code class="language-java"><span class="token number">1</span><span class="token punctuation">.</span>点击运行  tomcat种的main方法会首先执行    <span class="token number">2</span><span class="token punctuation">.</span>main方法会读取部署在tomcat上的web<span class="token punctuation">.</span>xml    <span class="token number">3</span><span class="token punctuation">.</span>tomcat进入等待状态（等待浏览器访问）    <span class="token number">4</span><span class="token punctuation">.</span>用户使用浏览器访问    http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">8080</span><span class="token operator">/</span>myweb<span class="token operator">/</span>myservlet<span class="token number">5</span><span class="token punctuation">.</span>tomcat通过路径获取全类名    <span class="token number">6</span><span class="token punctuation">.</span>tomcat通过反射创建MyServlet对象    <span class="token number">7</span><span class="token punctuation">.</span>通过对象调用service方法</code></pre><p><img src="https://gitee.com/ergou15154/drawing-bed/raw/master/source/image-20210831214340031.png" alt="image-20210831214340031"></p><h2 id="3、Servlet相关API"><a href="#3、Servlet相关API" class="headerlink" title="3、Servlet相关API"></a>3、Servlet相关API</h2><h3 id="1、生命周期"><a href="#1、生命周期" class="headerlink" title="1、生命周期"></a>1、生命周期</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 1. servlet对象创建时，调用此方法</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>ServletConfig servletConfig<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 2. 用户访问servlet时，调用此方法 (每次访问都会调用一次) 可以接受任何协议的信息，不限于http</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span>ServletRequest servletRequest<span class="token punctuation">,</span> ServletResponse servletResponse<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 3. servlet对象销毁时，调用此方法</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-markdown"><code class="language-markdown"><span class="token list punctuation">*</span> 创建<span class="token code keyword">    1）默认情况下</span><span class="token code keyword">        用户第一次访问时，创建servlet，执行init方法</span><span class="token code keyword">    2）修改创建时机</span><span class="token code keyword">        &lt;load-on-startup>&lt;/load-onstartup></span><span class="token code keyword">            正数：5-N  【服务器启动时，创建】</span><span class="token code keyword">                补充：Tomcat的web.xml里有1,4 所以推荐5-n </span><span class="token code keyword">            负数（默认值）：-1 【用户第一次访问时，创建】</span>    <span class="token list punctuation">*</span> 运行（提供服务）<span class="token code keyword">        用户每次访问时，都执行service方法</span><span class="token list punctuation">*</span> 销毁<span class="token code keyword">        服务器正常关闭时，销毁servlet，执行destroy方法</span></code></pre><p><img src="https://gitee.com/ergou15154/drawing-bed/raw/master/source/image-20210831214716462.png" alt="image-20210831214716462"></p><h3 id="3-1-3-启动加载"><a href="#3-1-3-启动加载" class="headerlink" title="3.1.3 启动加载"></a>3.1.3 启动加载</h3><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 启动加载</span><span class="token list punctuation">*</span>       1)问题: 发现 init 默认第一次被访问的时候才调用,适合用来初始化项目数据<span class="token list punctuation">*</span>           如果项目数据很多, 加载就需要一定的时间,这样就会给第一个用户的体验不好,因为要等比较久*<span class="token list punctuation">*</span>       2)解决: 服务器一启动,就执行init方法<span class="token list punctuation">*</span>       <span class="token list punctuation">*</span>       3) 实现: 要在web.xml配置 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">></span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">></span></span><span class="token code keyword">        </span><span class="token code keyword">        &lt;servlet></span><span class="token code keyword">            &lt;servlet-name>LifeServlet&lt;/servlet-name></span><span class="token code keyword">            &lt;servlet-class>com.itheima02.life.LifeServlet&lt;/servlet-class></span><span class="token code keyword">            &lt;load-on-startup>0&lt;/load-on-startup></span><span class="token code keyword">        &lt;/servlet></span><span class="token code keyword">        </span><span class="token code keyword">        </span><span class="token code keyword">            load-on-startup 启动加载</span><span class="token code keyword">                I. 必须是整数 n</span><span class="token code keyword">                II. n &lt; 0 , 表示不设置启动加载(默认-1)</span><span class="token code keyword">                III. n >= 0 ,表示设置启动加载, 数字越小优先级越高</span></code></pre><h2 id="4、Servlet体系结构"><a href="#4、Servlet体系结构" class="headerlink" title="4、Servlet体系结构"></a>4、Servlet体系结构</h2><p><img src="https://gitee.com/ergou15154/drawing-bed/raw/master/source/image-20210831215309817.png" alt="image-20210831215309817"></p><h3 id="4-1-GenericServlet"><a href="#4-1-GenericServlet" class="headerlink" title="4.1 GenericServlet"></a>4.1 GenericServlet</h3><p>1). 建立一个抽象类GenericServlet, 继承Servlet接口,重写除了service之外的四个抽象方法,空实现<br>2). 以后编写其他Servlet,只要继承 GenericServlet, 这时候就只要重写service方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GoodServlet</span> <span class="token keyword">extends</span> <span class="token class-name">GenericServlet</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span>ServletRequest servletRequest<span class="token punctuation">,</span> ServletResponse servletResponse<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"GoodServlet被访问"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h3 id="4-2-HttpServlet"><a href="#4-2-HttpServlet" class="headerlink" title="4.2 HttpServlet"></a>4.2 HttpServlet</h3><pre class=" language-java"><code class="language-java"><span class="token number">1</span><span class="token punctuation">.</span> 问题<span class="token operator">:</span>      http协议中有不同请求方式<span class="token punctuation">,</span>其中有两种常见的请求方式<span class="token operator">:</span> GET<span class="token operator">/</span>POST<span class="token punctuation">,</span>现在没有进行任何区分<span class="token number">2</span><span class="token punctuation">.</span> 需求<span class="token operator">:</span>        希望不同的请求方式<span class="token punctuation">,</span>我们可以在代码中进行相应的区分            </code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//原来的写法</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyHttpServlet</span> <span class="token keyword">extends</span> <span class="token class-name">GenericServlet</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span>ServletRequest servletRequest<span class="token punctuation">,</span> ServletResponse servletResponse<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//强转: 协议使用http</span>        HttpServletRequest request <span class="token operator">=</span> <span class="token punctuation">(</span>HttpServletRequest<span class="token punctuation">)</span> servletRequest<span class="token punctuation">;</span>        HttpServletResponse response <span class="token operator">=</span> <span class="token punctuation">(</span>HttpServletResponse<span class="token punctuation">)</span> servletResponse<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//获取请求方式,如果前端发送的请求是get,这里就是get(如果是post,这里就是post)</span>        String method <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//表示请求方式是get</span>            <span class="token function">doGet</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"POST"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//表示请求方式是post</span>            <span class="token function">doPost</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HahaServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//这是post请求方式的service方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"post请求方式"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//基本上请求方式默认都是get</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"get请求方式"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*    HttpServlet是GenericServlet的子类    1. HttpServlet重写了service方法    2. 在service方法中,根据请求方式(http协议)的不同,将service拆分成不同的方法         1). 有两种常用的请求方式                get                post         2). 用户发送请求时(用户在浏览器中访问servlet的地址)                service方法就会执行 (接着就会判断)                    get请求方式 -> doGet                    post请求方式 -> doPost */</span></code></pre><h2 id="5、Servlet路径"><a href="#5、Servlet路径" class="headerlink" title="5、Servlet路径"></a>5、Servlet路径</h2><h3 id="1、url-pattern"><a href="#1、url-pattern" class="headerlink" title="1、url-pattern"></a>1、url-pattern</h3><pre class=" language-xml"><code class="language-xml"> // Servlet映射多个url<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>HahaServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>com.itheima04.http.HahaServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>HahaServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/HahaServlet1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>HahaServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/HahaServlet2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>HahaServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/HahaServlet3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span></code></pre><h3 id="2、映射模式"><a href="#2、映射模式" class="headerlink" title="2、映射模式"></a>2、映射模式</h3><pre class=" language-markdown"><code class="language-markdown">配置 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span> url地址取值可以是：<span class="token list punctuation">1.</span> 精确匹配(掌握) <span class="token code keyword">         /servletDemo3  </span><span class="token list punctuation">2.</span> 目录匹配 <span class="token code keyword">        /aa/*</span><span class="token list punctuation">3.</span> 后缀匹配 <span class="token code keyword">        *.xxx    例如：*.do</span><span class="token code keyword">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span><span class="token code keyword">        &lt;servlet-name>PathServlet&lt;/servlet-name></span><span class="token code keyword">        </span><span class="token comment" spellcheck="true">&lt;!--            Servlet的路径(虚拟路径)            1. 一个Servlet可以配置多个虚拟路径  -> 了解 (在Filter中有用)            2. 一个Servlet的路径有三种写法                2.1  精确匹配(掌握)                        /servletDemo3                2.2  目录匹配                        /aa/*                2.3 后缀匹配                        *.xxx    例如：*.do        --></span><span class="token code keyword">        &lt;url-pattern>/bbb/ccc&lt;/url-pattern></span><span class="token code keyword">        &lt;url-pattern>/aa/*&lt;/url-pattern></span><span class="token code keyword">        &lt;url-pattern>*.do&lt;/url-pattern></span><span class="token code keyword">    &lt;/servlet-mapping></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span><span class="token code keyword">    &lt;servlet-name>PathServlet&lt;/servlet-name></span><span class="token code keyword">    &lt;url-pattern>/pathServlet03&lt;/url-pattern></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span></code></pre><h3 id="3、相对-绝对路径"><a href="#3、相对-绝对路径" class="headerlink" title="3、相对/绝对路径"></a>3、相对/绝对路径</h3><pre class=" language-java"><code class="language-java"><span class="token number">1</span><span class="token punctuation">.</span> 绝对路径    a<span class="token punctuation">.</span> http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">8080</span><span class="token operator">/</span>day01<span class="token operator">-</span>servlet<span class="token operator">/</span>PathServletb<span class="token punctuation">.</span> <span class="token operator">/</span>day01<span class="token operator">-</span>servlet<span class="token operator">/</span><span class="token function">PathServlet</span> <span class="token punctuation">(</span>省略了三要素<span class="token punctuation">,</span>前提<span class="token operator">:</span> 当前页面和所访问的资源必须在同一服务器上<span class="token punctuation">)</span>    内部资源<span class="token punctuation">,</span> 推荐<span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span>        <span class="token number">2</span><span class="token punctuation">.</span> 相对路径<span class="token punctuation">(</span>相对当前文件去找其他文件<span class="token punctuation">)</span>    <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">.</span><span class="token punctuation">.</span>/ 是上一级    <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">.</span>/ 是平级<span class="token punctuation">,</span>可以省略</code></pre><h2 id="6、注解"><a href="#6、注解" class="headerlink" title="6、注解"></a>6、注解</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>annotation<span class="token punctuation">;</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">WebServlet</span> <span class="token punctuation">{</span>    String <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">urlPatterns</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">loadOnStartup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    WebInitParam<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">initParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">asyncSupported</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    String <span class="token function">smallIcon</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>    String <span class="token function">largeIcon</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>    String <span class="token function">description</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>    String <span class="token function">displayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>注解和xml对应</p><p><img src="https://gitee.com/ergou15154/drawing-bed/raw/master/source/image-20210901103201028.png" alt="image-20210901103201028"></p><p>编写普通类继承HttpServlet，配置@WebServlet</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// @WebServlet(name = "QuickServlet",urlPatterns = "/quickServlet")</span><span class="token comment" spellcheck="true">// @WebServlet(urlPatterns = "/quickServlet")</span><span class="token comment" spellcheck="true">// @WebServlet(value = "/quickServlet")</span><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/quickServlet"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 注解中有且仅有一个属性，名为value时，属性名可以省略...</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QuickServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span></code></pre><pre class=" language-markdown"><code class="language-markdown">注解使用反射，虚拟路径——>class类的映射，获取servlet类运行方法。xml使用dom4j解析，虚拟路径——>class类的映射可以查看一下前面的  2、执行原理 加深印象</code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TomCat</title>
      <link href="/2020/04/28/TomCat/"/>
      <url>/2020/04/28/TomCat/</url>
      
        <content type="html"><![CDATA[<h1 id="1、TomCat"><a href="#1、TomCat" class="headerlink" title="1、TomCat"></a>1、TomCat</h1><h2 id="1、tomcat的目录结构"><a href="#1、tomcat的目录结构" class="headerlink" title="1、tomcat的目录结构"></a>1、tomcat的目录结构</h2><p><img src="https://gitee.com/ergou15154/drawing-bed/raw/master/source/image-20210831210523060.png" alt="image-20210831210523060"></p><h2 id="2、启动与关闭"><a href="#2、启动与关闭" class="headerlink" title="2、启动与关闭"></a>2、启动与关闭</h2><p>omcat/bin**  目录下</p><blockquote><ol><li><p>startup.bat  启动   shutdown.bat 正常关闭</p></li><li><p>启动之后,不要关闭tomcat的dos窗口</p></li><li><p>直接关闭dos窗口: 强制关闭(断电) , 不推荐(伤害硬件和数据丢失)</p></li><li><p>测试tomcat是否启动成功:</p><p><a href="http://localhost:8080/">http://localhost:8080</a></p></li></ol></blockquote><h3 id="2、1启动报错问题"><a href="#2、1启动报错问题" class="headerlink" title="2、1启动报错问题"></a>2、1启动报错问题</h3><h4 id="1、Java环境变量"><a href="#1、Java环境变量" class="headerlink" title="1、Java环境变量"></a>1、Java环境变量</h4><p>解决:</p><ol><li><p>tomcat的主要代码都是用java写的,运行依赖jvm(JDK里)</p></li><li><p>配置好Java环境变量</p><p>​    目的: 是为了可以在任意位置,打开cmd都能访问</p><p>​        C:\Program Files\Java\jdk1.8.0_111\bin 下的可执行程序(java.exe…)</p><p>​        a. JAVA_HOME :  C:\Program Files\Java\jdk1.8.0_111<br>​        b. Path :  %JAVA_HOME%\bin</p></li></ol><h4 id="2、8080端口被占用"><a href="#2、8080端口被占用" class="headerlink" title="2、8080端口被占用"></a>2、8080端口被占用</h4><blockquote><ol><li>找出并杀掉占用8080端口的程序</li><li>修改tomcat自己的端口</li></ol></blockquote><p>cmd命令：<code>netstat -ano | findstr "8080"</code>找到pid</p><p>进入到任务管理器，找到它，干掉它。</p><p><strong>或者修改tomcat端口：</strong></p><p>进入Tomcat安装目录/conf/server.xml 文件修改 (重启tomcat生效)</p><p><img src="https://gitee.com/ergou15154/drawing-bed/raw/master/source/image-20210831211155178.png" alt="image-20210831211155178"></p><h2 id="3、tomcat的资源访问规则"><a href="#3、tomcat的资源访问规则" class="headerlink" title="3、tomcat的资源访问规则"></a>3、tomcat的资源访问规则</h2><pre class=" language-java"><code class="language-java"><span class="token number">3</span><span class="token punctuation">.</span> tomcat资源位置访问规则    <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span> 例子        I<span class="token punctuation">.</span> tomcat<span class="token operator">/</span>webapps<span class="token operator">/</span>class134<span class="token operator">/</span>a<span class="token punctuation">.</span>txt            用浏览器访问                http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">8080</span><span class="token operator">/</span>class134<span class="token operator">/</span>a<span class="token punctuation">.</span>txt                II<span class="token punctuation">.</span> tomcat<span class="token operator">/</span>webapps<span class="token operator">/</span>ROOT<span class="token operator">/</span>b<span class="token punctuation">.</span>txt            用浏览器访问                http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">8080</span><span class="token operator">/</span>b<span class="token punctuation">.</span>txt        III<span class="token punctuation">.</span> tomcat<span class="token operator">/</span>webapps<span class="token operator">/</span>ROOT<span class="token operator">/</span>index<span class="token punctuation">.</span>jsp            用浏览器访问                http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">8080</span><span class="token operator">/</span>index<span class="token punctuation">.</span>jsp                http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">8080</span><span class="token operator">/</span>    <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span> 规则        <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span> webapps下的ROOT是根目录<span class="token punctuation">,</span>访问时不写路径<span class="token punctuation">(</span>强制的<span class="token punctuation">)</span>            webapps下的一级资源是不能被访问到的<span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span>，目录可以访问。                    <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span> 资源名为index<span class="token punctuation">.</span>html或index<span class="token punctuation">.</span>jsp<span class="token punctuation">,</span>那么资源名可以省略不写            <span class="token punctuation">(</span>写不写都可以<span class="token punctuation">)</span>            如果不写的话<span class="token punctuation">,</span> index<span class="token punctuation">.</span>html 优先级高于 index<span class="token punctuation">.</span>jsp<span class="token number">4</span><span class="token punctuation">.</span> 回答<span class="token operator">:</span> 为什么浏览器输入http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">8080</span><span class="token operator">/</span> 就可以访问到tomcat的欢迎页<span class="token operator">?</span>        <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span> 当浏览器访问http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">8080</span><span class="token operator">/</span>的时候<span class="token punctuation">,</span>会访问到本机上的tomcat<span class="token punctuation">,</span>并用http协议交换数据    <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span> tomcat会先到webapps<span class="token operator">/</span>ROOT目录先找index<span class="token punctuation">.</span>html<span class="token punctuation">,</span>找不到<span class="token punctuation">,</span>接着找index<span class="token punctuation">.</span><span class="token function">jsp</span><span class="token punctuation">(</span>tomcat默认欢迎页<span class="token punctuation">)</span>    <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span> 最后tomcat会将index<span class="token punctuation">.</span>jsp响应给浏览器</code></pre><p>前提知识：</p><pre class=" language-java"><code class="language-java"><span class="token number">1</span><span class="token punctuation">.</span> 网络三要素    <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span> 网络访问中必须的三个元素        网络<span class="token operator">:</span> 计算机程序与计算机程序之间的数据交换    <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span> 协议<span class="token operator">:</span> 传输数据的内容和格式的规则        网络两端程序必须支持并遵循同一套协议    <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span> ip        一台计算机在网络中的唯一标识        <span class="token punctuation">(</span>目标程序所在的计算机<span class="token punctuation">)</span>        ip和域名本质上是同一个东西 <span class="token punctuation">(</span>DNS<span class="token punctuation">)</span>        <span class="token punctuation">(</span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span> <span class="token operator">=</span> localhost<span class="token punctuation">)</span>        <span class="token punctuation">(</span><span class="token number">112.80</span><span class="token punctuation">.</span><span class="token number">248.75</span> <span class="token operator">=</span> www<span class="token punctuation">.</span>baidu<span class="token punctuation">.</span>com<span class="token punctuation">)</span>    <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span> port        一个进程在一台计算机中的唯一标识        <span class="token number">2</span><span class="token punctuation">.</span> url格式 <span class="token punctuation">(</span>网址<span class="token punctuation">)</span>         协议<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>ip<span class="token operator">:</span>port<span class="token operator">/</span>资源位置<span class="token operator">?</span>参数</code></pre><h2 id="4、tomcat的3种发布项目的方式"><a href="#4、tomcat的3种发布项目的方式" class="headerlink" title="4、tomcat的3种发布项目的方式"></a>4、tomcat的3种发布项目的方式</h2><h3 id="1、webapps-部署-重点"><a href="#1、webapps-部署-重点" class="headerlink" title="1、webapps 部署(重点)"></a>1、webapps 部署(重点)</h3><pre class=" language-java"><code class="language-java">直接将工程放在webapps下面。</code></pre><p><img src="https://gitee.com/ergou15154/drawing-bed/raw/master/source/image-20210831211825964.png" alt="image-20210831211825964"></p><h3 id="2、-server-xml部署（了解）"><a href="#2、-server-xml部署（了解）" class="headerlink" title="2、 server.xml部署（了解）"></a>2、 server.xml部署（了解）</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 在 tomcat/conf/server.xml 中找到&lt;Host>标签内，添加&lt;Context>标签</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>    # 路径映射 <span class="token operator">:</span> 虚拟路径和真实路径映射关系        虚拟路径 <span class="token operator">:</span> mypro            真实路径 <span class="token operator">:</span> 项目真正的路径                String mypro <span class="token operator">=</span> <span class="token string">"C:\Users\spy\Desktop\aaa"</span><span class="token punctuation">;</span><span class="token operator">--</span><span class="token operator">></span>     <span class="token operator">&lt;</span>Context path<span class="token operator">=</span><span class="token string">"mypro"</span> docBase<span class="token operator">=</span><span class="token string">"C:\Users\spy\Desktop\aaa"</span><span class="token operator">/</span><span class="token operator">></span></code></pre><p>缺点：</p><blockquote><p>1.配置文件修改完毕后，需要重启tomcat生效…</p><p>2.server.xml是tomcat的核心配置文件，如果稍有不慎操作失误，整个tomcat启动失败</p><p>3.这种方案作为了解即可</p></blockquote><h3 id="3、独立xml部署-重点"><a href="#3、独立xml部署-重点" class="headerlink" title="3、独立xml部署( 重点)"></a>3、独立xml部署( 重点)</h3><p><img src="https://gitee.com/ergou15154/drawing-bed/raw/master/source/image-20210831212236656.png" alt="image-20210831212236656"></p><pre class=" language-java"><code class="language-java">虚拟路径部署方式在tomcat<span class="token operator">/</span>conf<span class="token operator">/</span>Catalina<span class="token operator">/</span>localhost 目录下创建一个xml文件，添加<span class="token operator">&lt;</span>Context<span class="token operator">></span>标签    <span class="token operator">*</span><span class="token operator">*</span>文件名就是虚拟路径<span class="token operator">*</span><span class="token operator">*</span>    xml文件除了配置啥都不要写  <span class="token operator">:</span>  <span class="token operator">&lt;</span>Context docBase<span class="token operator">=</span><span class="token string">"C:\test\work"</span><span class="token operator">/</span><span class="token operator">></span>    需要重启tomcat    访问的路径    ​    http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">8080</span><span class="token operator">/</span>yourpro<span class="token operator">/</span>demo4<span class="token punctuation">.</span>html     这样就可以访问到 C<span class="token operator">:</span>\test\work\demo4<span class="token punctuation">.</span>html</code></pre><h2 id="5、Web项目结构"><a href="#5、Web项目结构" class="headerlink" title="5、Web项目结构"></a>5、Web项目结构</h2><pre class=" language-markdown"><code class="language-markdown"><span class="token list punctuation">1.</span> 前端项目<span class="token code keyword">        |-- myapp(项目名称)</span><span class="token code keyword">            |-- css 目录</span><span class="token code keyword">            |-- js  目录</span><span class="token code keyword">            |-- html目录</span><span class="token code keyword">            |-- img 目录</span><span class="token code keyword">            |-- index.html</span><span class="token code keyword">            </span><span class="token list punctuation">2.</span> web项目<span class="token code keyword">        |-- myapp（项目名称）</span><span class="token code keyword">            |-- 静态资源（html、css、js、img）</span><span class="token code keyword">            |-- WEB-INF 目录（浏览器无法直接访问内部的资源）</span><span class="token code keyword">                |-- classes 目录（java的字节码文件）</span><span class="token code keyword">                |-- lib     目录（当前项目所需要的第三方jar包）</span><span class="token code keyword">                |-- web.xml 文件 （当前项目核心配置文件，servlet3.0可以省略）</span><span class="token code keyword">            |-- index.html or index.jsp</span></code></pre><p><img src="https://gitee.com/ergou15154/drawing-bed/raw/master/source/image-20210831213123507.png" alt="image-20210831213123507"></p>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cookie</title>
      <link href="/2020/04/28/cookie/"/>
      <url>/2020/04/28/cookie/</url>
      
        <content type="html"><![CDATA[<h1 id="1、cookie"><a href="#1、cookie" class="headerlink" title="1、cookie"></a>1、cookie</h1><h2 id="1、会话技术解决的问题"><a href="#1、会话技术解决的问题" class="headerlink" title="1、会话技术解决的问题"></a>1、会话技术解决的问题</h2><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 由于Http是一个无状态协议，同一个会话的连续两个请求相互独立，彼此并不了解</span><span class="token title important"><span class="token punctuation">#</span> 作用：</span><span class="token code keyword">    用于存储浏览器与服务器在请求和响应过程中产生的数据， 在一次会话中(多次请求响应), 共享数据</span>        <span class="token code keyword">    客户端会话技术：cookie</span>    <span class="token code keyword">    服务器端会话技术：session</span></code></pre><h2 id="2、Cookie的应用"><a href="#2、Cookie的应用" class="headerlink" title="2、Cookie的应用"></a>2、Cookie的应用</h2><h3 id="1、常用功能介绍（增删改查）"><a href="#1、常用功能介绍（增删改查）" class="headerlink" title="1、常用功能介绍（增删改查）"></a>1、常用功能介绍（增删改查）</h3><pre class=" language-java"><code class="language-java"><span class="token number">1</span><span class="token punctuation">.</span> 设置数据到cookie中    <span class="token comment" spellcheck="true">// 1.创建cookie对象，设置数据</span>        Cookie cookie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span>String value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 2.通过response，响应（返回）cookie</span>        response<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">2</span><span class="token punctuation">.</span> 从cookie中获取数据    <span class="token comment" spellcheck="true">// 1.通过request对象，接收cookie数组</span>        Cookie<span class="token punctuation">[</span><span class="token punctuation">]</span> cookies <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getCookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 2.遍历数组</span>        获取name值：     String name <span class="token operator">=</span> cookie<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        获取value值：     String value <span class="token operator">=</span> cookie<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">3</span><span class="token punctuation">.</span> 更新cookie    只需要再使用 respones<span class="token punctuation">.</span><span class="token function">addcookie</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"新值"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">4</span><span class="token punctuation">.</span> 删除cookie    设置过期时间 cookie<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 单位秒，立即失效</code></pre><h3 id="2、发送多个Cookie给浏览器"><a href="#2、发送多个Cookie给浏览器" class="headerlink" title="2、发送多个Cookie给浏览器"></a>2、发送多个Cookie给浏览器</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 1. 创建多个cookie对象</span>    Cookie cookie1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"book"</span><span class="token punctuation">,</span><span class="token string">"HighMath"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Cookie cookie2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"music"</span><span class="token punctuation">,</span><span class="token string">"lifeyun"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 2. 通过response响应多个</span>    response<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie1<span class="token punctuation">)</span><span class="token punctuation">;</span>    response<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie2<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="3、Cookie是否可以存储中文和非法字符？"><a href="#3、Cookie是否可以存储中文和非法字符？" class="headerlink" title="3、Cookie是否可以存储中文和非法字符？"></a>3、Cookie是否可以存储中文和非法字符？</h3><pre class=" language-java"><code class="language-java"><span class="token operator">></span> tomcat8之前的版本，不支持中文<span class="token operator">></span> tomcat8以后的版本，支持中文<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    但是按照 Rfc6265Cookie规范，在cookie值中不能使用分号（<span class="token punctuation">;</span>）、逗号（<span class="token punctuation">,</span>）、等号（<span class="token operator">=</span>）以及空格<span class="token comment" spellcheck="true">// 解决方法：我们可以存储,但是要使用url编码,来避开这个规范限制</span>        java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>URLEncoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>字符串<span class="token string">","</span>utf<span class="token operator">-</span><span class="token number">8</span>"<span class="token punctuation">)</span> 把字符串使用utf<span class="token operator">-</span><span class="token number">8</span>进行编码        java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>URLDecoder<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>字符串<span class="token string">","</span>utf<span class="token operator">-</span><span class="token number">8</span>"<span class="token punctuation">)</span>  把字符串使用utf<span class="token operator">-</span><span class="token number">8</span>进行解码</code></pre><p><strong>发送给客户端中文:</strong></p><pre class=" language-java"><code class="language-java">        String content <span class="token operator">=</span> <span class="token string">"高圆 圆"</span><span class="token punctuation">;</span>        String encode <span class="token operator">=</span> URLEncoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Cookie cookie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"beauty"</span><span class="token punctuation">,</span> encode<span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>从客户端接收中文：</strong></p><pre class=" language-java"><code class="language-java">    String name <span class="token operator">=</span> cookie<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String value <span class="token operator">=</span> cookie<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//如果cookie的name为beauty,那么value就进行url解码</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"beauty"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       value <span class="token operator">=</span>  URLDecoder<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="4、Cookie的域名作用-domain"><a href="#4、Cookie的域名作用-domain" class="headerlink" title="4、Cookie的域名作用(domain)"></a>4、Cookie的域名作用(domain)</h3><pre class=" language-markdown"><code class="language-markdown"><span class="token list punctuation">1.</span> cookie信息中的域名作用是标记这个cookie的归属<span class="token code keyword">        在我们的浏览器中,既保存了域名为localhost的cookie,又保存域名为baidu的cookie</span><span class="token code keyword">        那么访问的网站如果是 http://localhost:8080, 浏览器的请求只会携带域名为localhost的cookie</span><span class="token code keyword">        </span><span class="token list punctuation">2.</span> 默认情况下,cookie的域名 和 发送此cookie的服务器域名是一致的<span class="token code keyword">    url格式 ->  协议://域名:端口/资源位置</span></code></pre><h3 id="5、Cookie的路径作用-path"><a href="#5、Cookie的路径作用-path" class="headerlink" title="5、Cookie的路径作用(path)"></a>5、Cookie的路径作用(path)</h3><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> url格式</span><span class="token code keyword">     协议://ip:port/资源位置?参数</span><span class="token code keyword">     1). 资源位置 ->  /项目虚拟路径/项目中的资源路径</span><span class="token code keyword">     2). 参数 -> name=value&amp;name=value...</span><span class="token code keyword">     http://localhost:3306/day07/demo.html</span><span class="token list punctuation">0.</span> 在我们的项目中,cookie的路径默认为项目的虚拟路径<span class="token code keyword">            项目虚拟路径为 /day07    </span><span class="token list punctuation">1.</span> 第一个作用: cookie信息中的path和name共同决定了cookie的唯一性<span class="token code keyword">        a. Servlet被浏览器每访问一次, cookie就会发送一次</span><span class="token code keyword">        b. 如果服务器再次发送一个同 path+name的cookie,会覆盖浏览器的那个cookie</span><span class="token code keyword">            (新覆盖旧)</span><span class="token code keyword">        c. 服务器再次发送一个同 path, 异name的cookie , 不会覆盖</span><span class="token code keyword">        d. 服务器再次发送一个异path, 同name的cookie, 不会覆盖</span><span class="token code keyword">        </span><span class="token list punctuation">2.</span> 第二个作用: cookie的path还决定了cookie允许被访问的范围(有效路径)<span class="token code keyword">    0). 浏览器访问的服务器资源路径跟cookie的路径相同,或者是cookie路径的子路径,才会携带这个cookie到服务器</span><span class="token code keyword">    1). 例子</span><span class="token code keyword">        I. 有两个cookie</span><span class="token code keyword">            name=music,path=/day07</span><span class="token code keyword">            name=book,path=/day07/abc</span><span class="token code keyword">        II. 浏览器访问X网址,携带Y cookie</span><span class="token code keyword">            当 X = http://localhost:8080/day07 </span><span class="token code keyword">                Y = music</span><span class="token code keyword">            当 X = http://localhost:8080/day07/abc/d</span><span class="token code keyword">                Y = music,book</span><span class="token code keyword">            当 X = http://localhost:8080/day07/aaa</span><span class="token code keyword">                Y = music        </span><span class="token code keyword">    2). 理解</span><span class="token code keyword">        当 cookie.path = Z的时候, 只有访问Z以及Z的子路径才允许携带cookie(cookie才允许被服务器访问)</span><span class="token code keyword">    3). 运用场景</span><span class="token code keyword">        https://www.baidu.com:443/map : 地图</span><span class="token code keyword">            cookie.path =  /map</span><span class="token code keyword">        https://www.baidu.com:443/wenku : 文库</span><span class="token code keyword">            /wenku</span><span class="token code keyword">         访问文库,不会携带地图模块的cookie,实际也没必要       </span><span class="token title important"><span class="token punctuation">#</span>API : cookie.setPath(虚拟路径); </span><span class="token code keyword">    路径要以 / 开头 </span></code></pre><h3 id="6、Cookie的存活时间"><a href="#6、Cookie的存活时间" class="headerlink" title="6、Cookie的存活时间"></a>6、Cookie的存活时间</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// cookie.setMaxAge(int second); 单位为秒</span># 浏览器中cookie的信息<span class="token number">1</span><span class="token punctuation">.</span> 创建时间<span class="token operator">:</span> 浏览器接收到此cookie的时间<span class="token number">2</span><span class="token punctuation">.</span> 到期时间<span class="token operator">:</span> cookie销毁的时间# cookie的存活时间有两种<span class="token number">1</span><span class="token punctuation">.</span> 会话级别 <span class="token punctuation">(</span>默认<span class="token punctuation">)</span>        浏览器关闭 <span class="token operator">:</span> 浏览会话结束时    <span class="token number">2</span><span class="token punctuation">.</span> 持久级别<span class="token punctuation">(</span>需要手动设置<span class="token punctuation">)</span>    cookie<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> second<span class="token punctuation">)</span><span class="token punctuation">;</span>        正数：指定存活时间<span class="token punctuation">,</span>单位是秒        零：立即销毁</code></pre><h2 id="3、Cookie特点"><a href="#3、Cookie特点" class="headerlink" title="3、Cookie特点"></a>3、Cookie特点</h2><pre class=" language-markdown"><code class="language-markdown"><span class="token list punctuation">1.</span> cookie存储数据在客户端（浏览器）<span class="token list punctuation">2.</span> cookie的存储数据(name和value)只能是字符串<span class="token list punctuation">3.</span> cookie单个大小不能超过4KB<span class="token list punctuation">4.</span> 同一个域名下cookie数量一般不能超过50个<span class="token list punctuation">5.</span> 同一域名下, cookie的path和name决定了它的唯一性<span class="token list punctuation">6.</span> cookie存储的数据不太安全<span class="token code keyword">        信息保存在用户的电脑上,都相对不安全</span></code></pre><h2 id="4、工作原理"><a href="#4、工作原理" class="headerlink" title="4、工作原理"></a>4、工作原理</h2><pre class=" language-java"><code class="language-java">基于HTTP协议：​    <span class="token number">1</span><span class="token punctuation">.</span> 服务器发送Cookie给浏览器是通过 <span class="token operator">:</span>  响应<span class="token punctuation">(</span>响应头 set<span class="token operator">-</span>cookie<span class="token punctuation">)</span>​        Set<span class="token operator">-</span>Cookie<span class="token operator">:</span> phone<span class="token operator">=</span>xiaomi​        Set<span class="token operator">-</span>Cookie<span class="token operator">:</span> computer<span class="token operator">=</span>lenovo​    <span class="token number">2</span><span class="token punctuation">.</span> 浏览器发送Cookie给服务器是通过<span class="token operator">:</span>  请求<span class="token punctuation">(</span>请求头  cookie<span class="token punctuation">)</span>​        Cookie<span class="token operator">:</span> phone<span class="token operator">=</span>xiaomi<span class="token punctuation">;</span> computer<span class="token operator">=</span>lenovo    <span class="token comment" spellcheck="true">// cookie存储在浏览器的请求头和响应头中</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSP</title>
      <link href="/2020/04/28/jsp/"/>
      <url>/2020/04/28/jsp/</url>
      
        <content type="html"><![CDATA[<h1 id="1、JSP"><a href="#1、JSP" class="headerlink" title="1、JSP"></a>1、JSP</h1><h2 id="1、概念"><a href="#1、概念" class="headerlink" title="1、概念"></a>1、概念</h2><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 简单来说：可以在html标签中嵌套java代码</span>有一些页面: 动静态结合<span class="token list punctuation">1.</span> html可以写静态效果,但是动态效果写不了(写不了java)<span class="token list punctuation">2.</span> servlet可以实现动静态结合,写静态很麻烦   -> jsp : html + java</code></pre><h2 id="2、工作原理"><a href="#2、工作原理" class="headerlink" title="2、工作原理"></a>2、工作原理</h2><p><strong>JSP本质上就是一个Servlet</strong></p><pre class=" language-java"><code class="language-java"># JSP运行原理<span class="token number">0</span><span class="token punctuation">.</span> 查看流程    a<span class="token punctuation">.</span> 运行看tomcat日志输出             <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span> Using CATALINA_BASE<span class="token operator">:</span>   <span class="token string">"C:\Users\spy\.IntelliJIdea2018.2\system\tomcat\_class114"</span>            <span class="token punctuation">(</span>要打开这个路径<span class="token punctuation">)</span>            <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span> 浏览器访问了jsp页面<span class="token punctuation">,</span> 然后到这个目录下查看路径 work\Catalina\localhost\模块名\org\apache\jsp            <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span> 找到xx_jsp<span class="token punctuation">.</span><span class="token function">java</span><span class="token punctuation">(</span>继承自org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>jasper<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span>HttpJspBase<span class="token punctuation">)</span> 和 对应的<span class="token keyword">class</span>文件    b<span class="token punctuation">.</span> 查找<span class="token function">HttpJspBase</span><span class="token punctuation">(</span>实现自HttpServlet<span class="token punctuation">)</span>            <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span> 在tomcat安装路径下查看lib目录有个jasper<span class="token punctuation">.</span>jar复制出来            <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span> 用压缩软件打开找到这个HttpJspBase<span class="token punctuation">.</span><span class="token keyword">class</span>文件            <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span> 拖进idea反编译<span class="token number">1</span><span class="token punctuation">.</span> JSP运行流程：        <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span> 前端请求JSP页面        <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span> 服务器操作            <span class="token number">1</span><span class="token punctuation">.</span> JSP页面被tomcat翻译成Servlet<span class="token punctuation">,</span>并且调用此Servlet的service方法 <span class="token punctuation">(</span>_jspService方法<span class="token punctuation">)</span>            <span class="token number">2</span><span class="token punctuation">.</span> HTML代码：out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 输出在网页            <span class="token number">3</span><span class="token punctuation">.</span> java代码：在Servlet中被原样保留        <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span> 服务器响应     <span class="token number">2</span><span class="token punctuation">.</span> JSP本质：是一个Servlet# 分析<span class="token number">1</span><span class="token punctuation">.</span> JSP从语法上看<span class="token operator">:</span> 在html上写java代码<span class="token number">2</span><span class="token punctuation">.</span> Jsp从本质上看<span class="token operator">:</span> 实际上是一个Servlet# 结论<span class="token number">1</span><span class="token punctuation">.</span> 浏览器访问hello<span class="token punctuation">.</span>jsp<span class="token punctuation">,</span>tomcat会产生java代码<span class="token operator">:</span> hello_jsp<span class="token punctuation">.</span><span class="token function">java</span><span class="token punctuation">(</span>Servlet<span class="token punctuation">)</span>    并且立即编译出hello_jsp<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>并调用_jspService方法<span class="token number">2</span><span class="token punctuation">.</span> hello_jsp<span class="token punctuation">.</span>java是tomcat根据hello<span class="token punctuation">.</span>jsp翻译成的代码    <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span> html   被翻译成 <span class="token operator">-</span><span class="token operator">></span>  out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"html"</span><span class="token punctuation">)</span> 响应体输出    <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span> java   原封不动<span class="token number">3</span><span class="token punctuation">.</span> tomcat中的JspServlet    <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span> 启动加载    <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span> 虚拟路径是<span class="token operator">*</span><span class="token punctuation">.</span><span class="token function">jsp</span> <span class="token punctuation">(</span>后缀名匹配<span class="token punctuation">)</span>        浏览器访问任何以jsp结尾的路径<span class="token punctuation">,</span>JspServlet会运行<span class="token punctuation">(</span>实现将找到浏览器访问的jsp<span class="token punctuation">,</span>翻译成Servlet<span class="token punctuation">)</span>        并且调用此servlet的service方法</code></pre><h2 id="3、3种脚本"><a href="#3、3种脚本" class="headerlink" title="3、3种脚本"></a>3、3种脚本</h2><p><strong>JSP通过脚本方式来定义java代码</strong></p><pre class=" language-markdown"><code class="language-markdown"><span class="token list punctuation">1.</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">代码</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span><span class="token code keyword">        脚本片段,生成在service方法中,每次请求的时候都会执行</span><span class="token code keyword">        </span><span class="token list punctuation">2.</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%!</span> <span class="token attr-name">代码</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span><span class="token code keyword">        声明片段,在java代码中声明成员,放在jsp生成java文件中的成员位置</span><span class="token list punctuation">3.</span> &lt;%=代码 %><span class="token code keyword">        输出脚本片段,相当于在service方法中使用out.print("代码") 方法，输出到jsp页面</span></code></pre><pre class=" language-markdown"><code class="language-markdown">  jsp有三种脚本语法:  <span class="token list punctuation">1.</span> 脚本片段<span class="token code keyword">      1). &lt;% java代码 %></span><span class="token code keyword">      2). 会被翻译到servlet的service方法中</span><span class="token code keyword">      3). 扩展:</span><span class="token code keyword">          JspWriter out/PrintWriter writer : 响应体输出流</span><span class="token code keyword">          writer优先级高于out</span><span class="token code keyword">          推荐用out (因为html是用out输出的,保证书写顺序和执行顺序的一致性)</span>  <span class="token list punctuation">2.</span> 输出脚本片段<span class="token code keyword">      1). &lt;%=输出的内容%></span><span class="token code keyword">      2).  &lt;% out.print("输出的内容"); %> 省略格式</span>  <span class="token list punctuation">3.</span> 声明片段<span class="token code keyword">      1).  &lt;%! java代码  %></span><span class="token code keyword">      2). 会被翻译到servlet的成员位置(类中方法外)</span><span class="token code keyword">      3). 往往用于方法或成员变量的声明</span></code></pre><h2 id="4、3种注释"><a href="#4、3种注释" class="headerlink" title="4、3种注释"></a>4、3种注释</h2><pre class=" language-markdown"><code class="language-markdown"><span class="token list punctuation">1.</span> html注释<span class="token code keyword">        </span><span class="token comment" spellcheck="true">&lt;!-- 注释静态资源 --></span>    <span class="token list punctuation">2.</span> JSP注释<span class="token code keyword">        &lt;%-- 注释所有 --%></span><span class="token list punctuation">3.</span> java注释（JSP脚本内使用）<span class="token code keyword">        // 单行</span><span class="token code keyword">        /* 多行 */</span><span class="token code keyword">        /**文档 */</span><span class="token code keyword">        </span><span class="token title important"><span class="token punctuation">#</span>备注: 因为html注释在页面源码中可见(不安全), 所以在jsp中推荐使用JSP注释或java注释    </span></code></pre><h2 id="5、3大指令"><a href="#5、3大指令" class="headerlink" title="5、3大指令"></a>5、3大指令</h2><pre class=" language-markdown"><code class="language-markdown"><span class="token list punctuation">*</span> 作用<span class="token code keyword">        JSP指令用来设置整个JSP页面相关的属性    </span><span class="token list punctuation">*</span> 格式<span class="token code keyword">        &lt;%@指令名称 属性名1="属性值1" 属性名2="属性值2" ...%></span><span class="token code keyword">        </span><span class="token list punctuation">*</span> 三大指令<span class="token code keyword">    1. page：配置JSP页面</span>    <span class="token code keyword">    2. include：页面包含（静态）</span>    <span class="token code keyword">    3. taglib:导入资源文件</span></code></pre><h3 id="1、page指令"><a href="#1、page指令" class="headerlink" title="1、page指令"></a>1、page指令</h3><pre class=" language-markdown"><code class="language-markdown"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%@</span> <span class="token attr-name">page</span> <span class="token attr-name">contentType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html;charset<span class="token punctuation">=</span>UTF-8<span class="token punctuation">"</span></span> <span class="token attr-name">language</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java<span class="token punctuation">"</span></span> <span class="token attr-name">%</span><span class="token punctuation">></span></span><span class="token code keyword">    1). contentType 等价于 response.setContentType(); 设置响应体的MIME类型和编码方式</span><span class="token code keyword">    2). language    目前仅支持java语言</span><span class="token code keyword">    3). import      导入jar包</span><span class="token code keyword">        &lt;%@ page import="java.util.Date" %></span><span class="token code keyword">     4). errorPage : 发生错误时的跳转页面</span><span class="token code keyword">       5). isErrorPage : 默认false, errorPage才会设置true的话,可以调用exception对象查看异常原因    </span></code></pre><h3 id="2、include指令"><a href="#2、include指令" class="headerlink" title="2、include指令"></a>2、include指令</h3><pre class=" language-markdown"><code class="language-markdown"><span class="token list punctuation">1.</span> 作用: 在一个jsp页面包含其他的页面<span class="token list punctuation">2.</span> 目的: 避免代码冗余<span class="token list punctuation">3.</span> 举例:<span class="token code keyword">        a. 有A.jsp和B.jsp两个页面, 头部都一样, 那么两个页面得写相同的代码两遍, 很冗余</span><span class="token code keyword">        b. 把头部抽取出来 top.jsp , 分别A.jsp和B.jsp包含即可, 这样避免了代码冗余</span><span class="token code keyword">        </span><span class="token list punctuation">4.</span> 语法:  <span class="token code keyword">    &lt;%@include file="top.jsp"%>     </span></code></pre><h3 id="3、taglib指令"><a href="#3、taglib指令" class="headerlink" title="3、taglib指令"></a>3、taglib指令</h3><pre class=" language-jsp"><code class="language-jsp">导入apache提供的jstl标准标签库<%@taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %></code></pre><h2 id="6、九大内置对象"><a href="#6、九大内置对象" class="headerlink" title="6、九大内置对象"></a>6、九大内置对象</h2><pre class=" language-markdown"><code class="language-markdown"><span class="token list punctuation">*</span> 作用<span class="token code keyword">        在JSP页面中不需要获取和创建，可以直接使用的对象</span><span class="token code keyword">        </span><span class="token list punctuation">*</span> JSP一共有9个内置对象<span class="token code keyword">    变量名                  真实类型                    作用</span><span class="token code keyword">    pageContext            PageContext                  当前JSP页面中共享数据（域对象）</span><span class="token code keyword">    request                HttpServletRequest       一次请求中共享数据（域对象）</span><span class="token code keyword">    session             HttpSession                 一次会话中共享数据（域对象）</span><span class="token code keyword">    application            ServletContext             整个web应用共享数据（域对象）</span><span class="token code keyword">    -----------------------------------------------</span><span class="token code keyword">    response            HttpServletResponse         响应对象</span><span class="token code keyword">    page（this）                Object                当前页面(servlet)对象</span><span class="token code keyword">    out                 JSPWriter                 输出对象</span><span class="token code keyword">    config              ServletConfig             servlet配置对象</span><span class="token code keyword">    exception           Throwable                 异常对象（默认关闭...）        </span><span class="token list punctuation">*</span> 常用<span class="token code keyword">    1. pageContext</span><span class="token code keyword">            1）当前页面的域对象</span><span class="token code keyword">            2）获取其他八个内置对象        </span><span class="token code keyword">    2. request</span><span class="token code keyword">            1）接收用户请求（参数）</span><span class="token code keyword">            2）一次请求中域对象</span><span class="token code keyword">            </span><span class="token code keyword">    3. response</span><span class="token code keyword">            1）设置响应</span><span class="token code keyword">                字节流</span><span class="token code keyword">                字符流</span><span class="token code keyword">    4. out</span><span class="token code keyword">            1）专门在jsp中处理字符输出流</span><span class="token code keyword">                print(); // 在网页中输出内容</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue</title>
      <link href="/2020/04/28/vue/"/>
      <url>/2020/04/28/vue/</url>
      
        <content type="html"><![CDATA[<h1 id="1、Vue"><a href="#1、Vue" class="headerlink" title="1、Vue"></a>1、Vue</h1><h2 id="1、vue入门"><a href="#1、vue入门" class="headerlink" title="1、vue入门"></a>1、vue入门</h2><pre class=" language-markdown"><code class="language-markdown"> <span class="token list punctuation">1.</span> Vue的核心对象<span class="token code keyword">     new Vue({</span><span class="token code keyword">         el : 选择器,</span><span class="token code keyword">         data : {</span><span class="token code keyword">             属性1 : 值1</span><span class="token code keyword">             属性2 : 值2...</span><span class="token code keyword">         },</span><span class="token code keyword">         methods : {</span><span class="token code keyword">             方法名1 :  函数1,</span><span class="token code keyword">             方法名2 : 函数2</span><span class="token code keyword">         }</span><span class="token code keyword">     })</span> <span class="token list punctuation">2.</span> data中的属性会是Vue核心对象的属性 <span class="token list punctuation">3.</span> methods的方法会是Vue核心对象的方法 <span class="token list punctuation">4.</span> 脚本(data)中的数据改变,视图随之改变</code></pre><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">let</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el <span class="token punctuation">:</span> <span class="token string">"#div"</span><span class="token punctuation">,</span>        data <span class="token punctuation">:</span> <span class="token punctuation">{</span>            name <span class="token punctuation">:</span> <span class="token string">"张三"</span><span class="token punctuation">,</span>            classRoom <span class="token punctuation">:</span> <span class="token string">"黑马134期"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        methods <span class="token punctuation">:</span> <span class="token punctuation">{</span>            method01 <span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>classRoom <span class="token operator">=</span> <span class="token string">"白马134期"</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="小节："><a href="#小节：" class="headerlink" title="小节："></a>小节：</h3><ul><li>Vue是一套构建用户界面的渐进式前端框架。</li><li>Vue的程序包含视图和脚本两个核心部分。</li><li>脚本部分<ul><li>Vue核心对象。</li><li>选项列表<ul><li>el：接收获取的元素。</li><li>data：保存数据。</li><li>methods：定义方法。</li></ul></li></ul></li><li>视图部分<ul><li>数据绑定：</li></ul></li></ul><h2 id="2、vue指令"><a href="#2、vue指令" class="headerlink" title="2、vue指令"></a>2、vue指令</h2><table><thead><tr><th>指令</th><th>作用</th></tr></thead><tbody><tr><td>v-html</td><td>把文本解析为 HTML 代码。innerHtml</td></tr><tr><td>v-text</td><td>把文本解析为 文本内容。innerText</td></tr><tr><td>v-bind</td><td>为 HTML 标签绑定属性值</td></tr><tr><td>v-if</td><td>条件性的渲染某元素，判定为真时渲染,否则不渲染</td></tr><tr><td>v-else-if</td><td>条件性的渲染。</td></tr><tr><td>v-else</td><td>条件性的渲染。</td></tr><tr><td>v-show</td><td>根据条件展示某元素，区别在于切换的是display属性的值。</td></tr><tr><td>v-for</td><td>列表渲染，遍历容器的元素或者对象的属性</td></tr><tr><td>v-on</td><td>为 HTML 标签绑定事件。</td></tr><tr><td>v-model</td><td>在表单元素上创建双向数据绑定。</td></tr></tbody></table><h3 id="1、文本插值"><a href="#1、文本插值" class="headerlink" title="1、文本插值"></a>1、文本插值</h3><pre class=" language-markdown"><code class="language-markdown"> dom的内部文本<span class="token code keyword">     1. innerText : 内部纯文本,不识别标签</span><span class="token code keyword">     2. innerHTML : 内部超文本,识别标签</span> <span class="token title important"><span class="token punctuation">#</span> 知识点 v-html !!!</span><span class="token code keyword">     1. {{msg}} 等价于 innerText</span><span class="token code keyword">     2. v-text = 表达式  -> innerText</span><span class="token code keyword">     3. v-html  等价于innerHTML</span></code></pre><pre class=" language-html"><code class="language-html">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>{{msg}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-html</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span><span class="token string">"#div"</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span><span class="token punctuation">{</span>            msg<span class="token punctuation">:</span><span class="token string">"&lt;h1>Hello Vue&lt;/h1>"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="2、绑定属性（v-bind）"><a href="#2、绑定属性（v-bind）" class="headerlink" title="2、绑定属性（v-bind）"></a>2、绑定属性（v-bind）</h3><pre class=" language-markdown"><code class="language-markdown"> v-bind：为 HTML 标签绑定属性值<span class="token code keyword">     1). 标准语法</span><span class="token code keyword">         v-bind:属性= data中的属性</span><span class="token code keyword">     2). 简略语法(v-bind可以省略)</span><span class="token code keyword">         :属性= data中的属性</span></code></pre><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>百度一下<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cls<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是div<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span><span class="token string">"#div"</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span><span class="token punctuation">{</span>            url<span class="token punctuation">:</span><span class="token string">"https://www.baidu.com"</span><span class="token punctuation">,</span>            cls<span class="token punctuation">:</span><span class="token string">"my"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="3、条件渲染（v-if、v-show）"><a href="#3、条件渲染（v-if、v-show）" class="headerlink" title="3、条件渲染（v-if、v-show）"></a>3、条件渲染（v-if、v-show）</h3><pre class=" language-markdown"><code class="language-markdown"> v-if  v-show 他们俩虽然都是控制元素是否显示，但是底层的原理不一样<span class="token code keyword">     v-if 如果条件为false，页面中根本没有这个元素</span><span class="token code keyword">     v-show如果条件为false，页面中有这个元素只不过它的display属性值为none</span></code></pre><pre class=" language-html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>num%3<span class="token punctuation">=</span><span class="token punctuation">=</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>div1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-else-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>num%3<span class="token punctuation">=</span><span class="token punctuation">=</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>div2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-else</span><span class="token punctuation">></span></span>div3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>flag<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>div4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span><span class="token string">"#div"</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span><span class="token punctuation">{</span>            num<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>           flag<span class="token punctuation">:</span><span class="token boolean">false</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="4、列表渲染（v-for）"><a href="#4、列表渲染（v-for）" class="headerlink" title="4、列表渲染（v-for）"></a>4、列表渲染（v-for）</h3><pre class=" language-markdown"><code class="language-markdown"> 类似于增强for循环 <span class="token list punctuation">1.</span> v-for可以当增强for循环<span class="token code keyword">      1). 被遍历的数组或对象需要出自data</span><span class="token code keyword">      2). 变量需要使用插值表达式获取</span> <span class="token list punctuation">2.</span> v-for可以当索引for循环</code></pre><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>element of names<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    {{element}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>element of student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    {{element}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(element,index) of student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    {{index}},{{element}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(element,index) of names<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    {{index}},{{element}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span><span class="token string">"#div"</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span><span class="token punctuation">{</span>            names<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token string">"李四"</span><span class="token punctuation">,</span><span class="token string">"王五"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            student<span class="token punctuation">:</span><span class="token punctuation">{</span>                name<span class="token punctuation">:</span><span class="token string">"张三"</span><span class="token punctuation">,</span>                age<span class="token punctuation">:</span><span class="token number">23</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="5、事件绑定（v-on、-）"><a href="#5、事件绑定（v-on、-）" class="headerlink" title="5、事件绑定（v-on、@）"></a>5、事件绑定（v-on、@）</h3><pre class=" language-markdown"><code class="language-markdown">v-on：为 HTML 标签绑定事件<span class="token code keyword">    1). 标准语法</span><span class="token code keyword">        v-on:事件名 = methods中的函数调用</span><span class="token code keyword">    2). 简略语法</span><span class="token code keyword">        @事件名 = methods中的函数调用</span></code></pre><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>{{name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>change()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>单击_改变div的内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@dblclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>change()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>双击_改变div的内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>change2()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>简写_改变div的内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">let</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span><span class="token string">"#div"</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span><span class="token punctuation">{</span>            name<span class="token punctuation">:</span><span class="token string">"黑马程序员"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        methods<span class="token punctuation">:</span><span class="token punctuation">{</span>            change <span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"传智播客"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function">change2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"斑马程序员"</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="6、表单绑定（v-model）"><a href="#6、表单绑定（v-model）" class="headerlink" title="6、表单绑定（v-model）"></a>6、表单绑定（v-model）</h3><pre class=" language-markdown"><code class="language-markdown"><span class="token list punctuation">-</span> <span class="token bold"><span class="token punctuation">**</span>表单绑定<span class="token punctuation">**</span></span>  v-model：在表单元素上创建双向数据绑定。<span class="token list punctuation">-</span> <span class="token bold"><span class="token punctuation">**</span>双向数据绑定<span class="token punctuation">**</span></span>  更新data数据，页面中的数据也会更新。(默认单向 : 模型改变,视图也会改变)  更新页面数据，data数据也会更新。(视图改变,也会影响模型改变)<span class="token list punctuation">-</span> <span class="token bold"><span class="token punctuation">**</span>MVVM模型(Model,View,ViewModel)：是MVC模式的改进版<span class="token punctuation">**</span></span>  在前端页面中，JS对象表示Model，页面表示View，两者做到了最大限度的分离。  将Model和View关联起来的就是ViewModel，它是桥梁。  ViewModel负责把Model的数据同步到View显示出来，还负责把View修改的数据同步回Model。</code></pre><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 单向绑定 : 脚本(数据)改变,视图会随之改变(vue的特点)</span><span class="token title important"><span class="token punctuation">#</span> 双向绑定</span><span class="token code keyword">    1). 脚本(数据)改变,视图会随之改变</span><span class="token code keyword">    2). 视图改变,脚本(数据)也会随之改变</span>v-model : 相当于表单项的value属性(具有双向数据绑定特点)运用:<span class="token code keyword">    1). 请求参数可以是json格式 (ajax)</span><span class="token code keyword">    2). 双向绑定让用户在填完表单的同时, 请求参数就准备好了,直接提交即可</span></code></pre><pre class=" language-html"><code class="language-html"> 姓名_双向绑定：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user.username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span> 年龄：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>number<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user.age<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 性别:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user.gender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span><span class="token string">"#div"</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span><span class="token punctuation">{</span>            user <span class="token punctuation">:</span> <span class="token punctuation">{</span>               <span class="token comment" spellcheck="true">/* username:"",                age:23,                gender:"男"*/</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h3><ul><li><p><strong>指令：是带有v-前缀的特殊属性，不同指令具有不同含义。</strong></p></li><li><p><strong>文本插值</strong><br>v-html：把文本解析为HTML代码。</p></li><li><p><strong>绑定属性</strong><br>v-bind：为HTML标签绑定属性值。</p><blockquote><p>完整   v-bind:属性名=”data变量”</p><p>省略     :属性名=”data变量”</p></blockquote></li><li><p><strong>条件渲染</strong><br>v-if：条件性的渲染某元素，判定为真时渲染,否则不渲染。<br>v-else：条件性的渲染。<br>v-else-if：条件性的渲染。<br>v-show：根据条件展示某元素，区别在于切换的是display属性的值。</p></li><li><p><strong>列表渲染</strong><br>v-for：列表渲染，遍历容器的元素或者对象的属性。</p></li><li><p><strong>事件绑定</strong><br>v-on：为HTML标签绑定事件。</p><blockquote><p>完整  v-on:事件名=”methods中的函数名”</p><p>省略     @事件名=”methods中的函数名”</p></blockquote></li><li><p><strong>表单绑定</strong><br>v-model：在表单元素上创建双向数据绑定。</p></li></ul><h2 id="3、Vue的生命周期"><a href="#3、Vue的生命周期" class="headerlink" title="3、Vue的生命周期"></a>3、Vue的生命周期</h2><p><img src="https://i.loli.net/2021/09/16/ivbWSPNdKnYIxgU.png" alt="image-20210916214818126"></p><h3 id="1、生命周期的八个阶段"><a href="#1、生命周期的八个阶段" class="headerlink" title="1、生命周期的八个阶段"></a>1、生命周期的八个阶段</h3><p><img src="https://i.loli.net/2021/09/16/EmdY1tJK2qvF8le.png" alt="image-20210916214850961"></p><pre class=" language-markdown"><code class="language-markdown">TODO: Vue的生命周期<span class="token code keyword">    *   1. 创建</span><span class="token code keyword">    *   2. 挂载</span><span class="token code keyword">    *   3. 更新</span><span class="token code keyword">    *   4. 销毁</span><span class="token code keyword">    *</span><span class="token code keyword">    *   vue的生命周期分4个阶段,8个方法(前和后)</span><span class="token code keyword">    *   1. 生命周期方法跟el,data,methods属性平级</span><span class="token code keyword">    *   2. 4个阶段分别做什么事情</span><span class="token code keyword">    *       1). 创建create : 创建的是数据 data</span><span class="token code keyword">    *       2). 挂载mount : 将数据data挂载到视图上</span><span class="token code keyword">    *               前两步一定执行</span><span class="token code keyword">    *       3). 更新update : 更新的是数据data</span><span class="token code keyword">    *               这一步必须有更新data操作,才会执行</span><span class="token code keyword">    *       4). 销毁</span><span class="token code keyword">    *               一般当前网页关闭,vue对象就会随之销毁,也就无法进行任何操作</span></code></pre><pre class=" language-javascript"><code class="language-javascript">beforeCreate<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token string">'------beforeCreate创建前状态------'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span> <span class="token string">"color:red"</span><span class="token punctuation">,</span> <span class="token string">"el     : "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//undefined</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span> <span class="token string">"color:red"</span><span class="token punctuation">,</span> <span class="token string">"data   : "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//undefined </span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span> <span class="token string">"color:red"</span><span class="token punctuation">,</span> <span class="token string">"message: "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//undefined</span><span class="token punctuation">}</span><span class="token punctuation">,</span>created<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token string">'------created创建完毕状态------'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span> <span class="token string">"color:red"</span><span class="token punctuation">,</span> <span class="token string">"el     : "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//undefined</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span> <span class="token string">"color:red"</span><span class="token punctuation">,</span> <span class="token string">"data   : "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//已被初始化 </span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span> <span class="token string">"color:red"</span><span class="token punctuation">,</span> <span class="token string">"message: "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//已被初始化</span><span class="token punctuation">}</span><span class="token punctuation">,</span>beforeMount<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token string">'------beforeMount挂载前状态------'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span> <span class="token string">"color:red"</span><span class="token punctuation">,</span> <span class="token string">"el     : "</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//已被初始化，值还没附上，只有网页标签</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span> <span class="token string">"color:red"</span><span class="token punctuation">,</span> <span class="token string">"data   : "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//已被初始化  </span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span> <span class="token string">"color:red"</span><span class="token punctuation">,</span> <span class="token string">"message: "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//已被初始化  </span><span class="token punctuation">}</span><span class="token punctuation">,</span>mounted<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token string">'------mounted 挂载结束状态------'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span> <span class="token string">"color:red"</span><span class="token punctuation">,</span> <span class="token string">"el     : "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//已被初始化</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span> <span class="token string">"color:red"</span><span class="token punctuation">,</span> <span class="token string">"data   : "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//已被初始化</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span> <span class="token string">"color:red"</span><span class="token punctuation">,</span> <span class="token string">"message: "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//已被初始化 </span><span class="token punctuation">}</span><span class="token punctuation">,</span>beforeUpdate<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token string">'beforeUpdate 更新前状态===============》'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> dom <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"app"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML<span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dom<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span> <span class="token string">"color:red"</span><span class="token punctuation">,</span> <span class="token string">"el     : "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span> <span class="token string">"color:red"</span><span class="token punctuation">,</span> <span class="token string">"data   : "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$data<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span> <span class="token string">"color:red"</span><span class="token punctuation">,</span> <span class="token string">"message: "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>updated<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token string">'updated 更新完成状态===============》'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> dom <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"app"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML<span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dom<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span> <span class="token string">"color:red"</span><span class="token punctuation">,</span> <span class="token string">"el     : "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span> <span class="token string">"color:red"</span><span class="token punctuation">,</span> <span class="token string">"data   : "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$data<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span> <span class="token string">"color:red"</span><span class="token punctuation">,</span> <span class="token string">"message: "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>beforeDestroy<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token string">'beforeDestroy 销毁前状态===============》'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span> <span class="token string">"color:red"</span><span class="token punctuation">,</span> <span class="token string">"el     : "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span> <span class="token string">"color:red"</span><span class="token punctuation">,</span> <span class="token string">"data   : "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$data<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span> <span class="token string">"color:red"</span><span class="token punctuation">,</span> <span class="token string">"message: "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>destroyed<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token string">'destroyed 销毁完成状态===============》'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span> <span class="token string">"color:red"</span><span class="token punctuation">,</span> <span class="token string">"el     : "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span> <span class="token string">"color:red"</span><span class="token punctuation">,</span> <span class="token string">"data   : "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$data<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span> <span class="token string">"color:red"</span><span class="token punctuation">,</span> <span class="token string">"message: "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 了解生命周期，掌握常用的 created方法！    </span><span class="token list punctuation">1.</span> 此方法是 data初始化完成(模型), 视图加载模型的数据之前执行的方法<span class="token list punctuation">2.</span> 通常在此方法中，我们会发起后台数据请求，在页面加载数据之前，先获取后台数据，进行模型的数据进行赋值,最后视图会将这些数据进行挂载,渲染出来！</code></pre><h2 id="4、Vue异步操作（axios）"><a href="#4、Vue异步操作（axios）" class="headerlink" title="4、Vue异步操作（axios）"></a>4、Vue异步操作（axios）</h2><ul><li><p><strong>在Vue中发送异步请求，本质上还是AJAX。我们可以使用axios这个插件来简化操作！</strong></p></li><li><p><strong>使用步骤</strong><br>1.引入axios核心js文件。<br>2.调用axios对象的方法来发起异步请求。<br>3.调用axios对象的方法来处理响应的数据。</p></li><li><p><strong>axios常用方法</strong></p><p><img src="https://i.loli.net/2021/09/16/6v9hAqUrIuLaMys.png"> </p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>中文乱码</title>
      <link href="/2020/04/28/%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/"/>
      <url>/2020/04/28/%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h1 id="1、中文乱码"><a href="#1、中文乱码" class="headerlink" title="1、中文乱码"></a>1、中文乱码</h1><h2 id="1、请求体乱码"><a href="#1、请求体乱码" class="headerlink" title="1、请求体乱码"></a>1、请求体乱码</h2><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 问题: post请求参数乱码</span><span class="token code keyword">    1. get请求没有乱码</span><span class="token code keyword">        tomcat8以前是有乱码,tomcat8以及之后版本就没有了</span><span class="token code keyword">    2. post请求有乱码</span><span class="token code keyword">        0). 乱码原因: 编码和解码所使用的字符集(编码表)不一样</span><span class="token code keyword">        1). 编码 : 浏览器在编码 (utf-8)</span><span class="token code keyword">        2). 解码     : 服务器在解码</span><span class="token code keyword">                tomcat  (默认使用iso-8859-1 欧码)</span><span class="token code keyword">                servlet</span><span class="token code keyword">                servlet没有设置,会使用tomcat的默认设置,如果设置了就使用servlet设置的</span><span class="token code keyword">       解决:</span><span class="token code keyword">             request.setCharacterEncoding("utf-8");</span><span class="token code keyword">             注意: 一定要写在获取请求参数之前</span></code></pre><h2 id="2、响应体中文乱码"><a href="#2、响应体中文乱码" class="headerlink" title="2、响应体中文乱码"></a>2、响应体中文乱码</h2><pre class=" language-markdown"><code class="language-markdown">原因分析markdown<span class="token list punctuation">1.</span> 通过response获取字符输出流<span class="token code keyword">        PrintWriter pw = response.getWriter();        </span><span class="token list punctuation">2.</span> 通过字符输出输出中文字符<span class="token code keyword">        pw.write("中文....");</span><span class="token list punctuation">3.</span> 浏览器访问,网页出现中文乱码    <span class="token list punctuation">4.</span> 解决 : 统一浏览器和服务器编码(utf-8)    <span class="token code keyword">    response.setContentType("text/html;charset=utf-8");</span><span class="token code keyword">    或者</span><span class="token code keyword">    response.setHeader("content-type", "text/html;charset=utf-8");</span><span class="token title important"><span class="token punctuation">#</span> 第二个响应头 : content-type (内容类型)</span><span class="token code keyword">    服务器告诉浏览器,使用何种语法解析响应体,使用何种字符集解码响应体</span><span class="token code keyword">     response.setHeader("content-type", "text/html;charset=utf-8");</span><span class="token code keyword">       1). 响应体中文乱码</span><span class="token code keyword">            I. 编码 : servlet (utf-8)</span><span class="token code keyword">            II. 解码 : 浏览器</span><span class="token code keyword">            服务器告诉浏览器, 用utf-8解码响应体</span><span class="token code keyword">       2).  MIME type (多用途互联网邮件扩展MIME，Multipurpose Internet Mail Extensions）</span><span class="token code keyword">            windows后缀名 :    txt         html            json</span><span class="token code keyword">             MIME type :    text/plain   text/html    application/json</span><span class="token code keyword">             windows : \</span><span class="token code keyword">             java : /  (unix系统)</span><span class="token code keyword">           服务器告诉浏览器, 用text/html的语法解析响应体</span></code></pre><h2 id="3、响应头乱码"><a href="#3、响应头乱码" class="headerlink" title="3、响应头乱码"></a>3、响应头乱码</h2><pre class=" language-markdown"><code class="language-markdown"><span class="token list punctuation">*</span> 如果该下载文件名是中文的话，会出现乱码...<span class="token code keyword">    谷歌和绝大多数的浏览器是通过 url编码</span><span class="token code keyword">        URLEncode() 编码</span><span class="token code keyword">        URLDecode() 解码</span><span class="token code keyword">    火狐浏览器   base64编码</span>    <span class="token list punctuation">*</span> 我们就需要考虑浏览器兼容性问题....<span class="token code keyword">    资料提供了判断浏览器不同编码的工具类直接使用即可....</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DownLoadUtils</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//根据请求头的User-Agent信息判断是哪种浏览器，然后将文件名进行编码</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getName</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> String filename<span class="token punctuation">)</span> <span class="token keyword">throws</span> UnsupportedEncodingException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获得请求头中的User-Agent</span>        String agent <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"User-Agent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 根据不同的客户端进行不同的编码</span>        String filenameEncoder <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>agent<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"Firefox"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 火狐浏览器</span>             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是火狐"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            BASE64Encoder base64Encoder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BASE64Encoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            filenameEncoder <span class="token operator">=</span> <span class="token string">"=?utf-8?B?"</span> <span class="token operator">+</span> base64Encoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>filename<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"?="</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 其它浏览器</span>             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是google"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            filenameEncoder <span class="token operator">=</span> URLEncoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> filenameEncoder<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>域对象</title>
      <link href="/2020/04/28/%E5%9F%9F%E5%AF%B9%E8%B1%A1/"/>
      <url>/2020/04/28/%E5%9F%9F%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="1、域对象"><a href="#1、域对象" class="headerlink" title="1、域对象"></a>1、域对象</h1><blockquote><p>如果别人说, web三大域对象</p><p>​        request &lt; session &lt; ServletContext</p><p>如果别人说, web四大域对象</p><p>​     jspContext(JSP) &lt;  request &lt; session &lt; ServletContext</p></blockquote><h2 id="2-1-域对象方法"><a href="#2-1-域对象方法" class="headerlink" title="2.1 域对象方法"></a>2.1 域对象方法</h2><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 域对象方法都一致</span><span class="token list punctuation">1.</span> 设置数据<span class="token code keyword">        void setAttribute(String name, Object o)    </span><span class="token list punctuation">2.</span> 获取数据<span class="token code keyword">        Object getAttribute(String name)    </span><span class="token list punctuation">3.</span> 删除数据<span class="token code keyword">        void removeAttribute(String name)</span><span class="token code keyword">        </span><span class="token title important"><span class="token punctuation">#</span> 小域对象可以获取大域对象</span><span class="token title important"><span class="token punctuation">#</span> 不同域对象: 生命周期不一样 (作用范围)</span></code></pre><h2 id="2-2-生命周期"><a href="#2-2-生命周期" class="headerlink" title="2.2 生命周期"></a>2.2 生命周期</h2><h3 id="2-2-1-ServletContext域对象"><a href="#2-2-1-ServletContext域对象" class="headerlink" title="2.2.1 ServletContext域对象"></a>2.2.1 ServletContext域对象</h3><pre class=" language-markdown"><code class="language-markdown"><span class="token list punctuation">*</span> 跟当前应用(项目)同生共死<span class="token title important"><span class="token punctuation">#</span> tomcat上可以部署多个项目（每个项目都有一个servletContext对象），一个项目可以有多个jsp</span>tomcat加载项目,servletContext创建项目停止运行,servletContext销毁</code></pre><h3 id="2-2-2-HttpSession域对象"><a href="#2-2-2-HttpSession域对象" class="headerlink" title="2.2.2 HttpSession域对象"></a>2.2.2 HttpSession域对象</h3><pre class=" language-markdown"><code class="language-markdown"><span class="token list punctuation">*</span> 一次会话中，多次请求间（共享数据）<span class="token code keyword">    浏览器第一次访问服务器时创建(没有jsessionid)</span><span class="token code keyword">    直到浏览器丢失cookie,或服务器销毁session时,session就找不到了</span><span class="token title important"><span class="token punctuation">#</span> 会话的定义: 双方建立连接,连接期间的多次请求响应,直到一方断开连接为止</span>    </code></pre><h3 id="2-2-3-HttpServletRequest域对象"><a href="#2-2-3-HttpServletRequest域对象" class="headerlink" title="2.2.3 HttpServletRequest域对象"></a>2.2.3 HttpServletRequest域对象</h3><pre class=" language-markdown"><code class="language-markdown"><span class="token list punctuation">*</span> 一次请求中，多次请求转发间（共享数据）<span class="token code keyword">    请求到达服务器时创建,服务器响应时销毁</span></code></pre><h2 id="2-3-小结"><a href="#2-3-小结" class="headerlink" title="2.3 小结"></a>2.3 小结</h2><ul><li><p><strong>能用小的不用大的</strong>：request(一次请求)&lt;session(一次会话)&lt;servletContext(应用全局)</p><blockquote><p>因为生命周期长的域对象销毁时间比较晚,占用服务器内存时间太长</p></blockquote></li><li><p><strong>常用的场景</strong>:</p><ul><li><p>request：一次请求中（请求转发共享）</p></li><li><p>session：存放当前会话的私有数据</p><ul><li>用户登录状态</li><li>验证码</li><li>购物车</li></ul></li><li><p>servletContext:若需要所有的servlet都能访问到,才使用这个域对象.</p><blockquote><p>一般情况下,web阶段很少使用这个域对象,在框架spring的学习中会涉及到</p></blockquote></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AJAX&amp;JSON</title>
      <link href="/2020/04/28/AJAX&amp;JSON/"/>
      <url>/2020/04/28/AJAX&amp;JSON/</url>
      
        <content type="html"><![CDATA[<h1 id="1、AJAX-amp-JSON"><a href="#1、AJAX-amp-JSON" class="headerlink" title="1、AJAX&amp;JSON"></a>1、AJAX&amp;JSON</h1><h2 id="1、AJAX"><a href="#1、AJAX" class="headerlink" title="1、AJAX"></a>1、AJAX</h2><h3 id="1、同步与异步"><a href="#1、同步与异步" class="headerlink" title="1、同步与异步"></a>1、同步与异步</h3><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 同步和异步</span><span class="token list punctuation">1.</span> 同步: 执行完A,才能执行B (类似java单线程)<span class="token list punctuation">2.</span> 异步: A还没执行完,B就可以执行 (类似java多线程)<span class="token title important"><span class="token punctuation">#</span> 同步请求和异步请求</span><span class="token list punctuation">1.</span> 同步请求: 同步请求响应的结果会刷新整个网页 <span class="token code keyword">        比如163邮箱的注册功能,当用户填完信息,点击注册时</span><span class="token code keyword">        整个网页发生跳转(地址栏的地址改变)</span><span class="token list punctuation">2.</span> 异步请求: 异步请求响应的结果可以只更新局部网页<span class="token code keyword">        163邮箱注册页面,有个检测邮箱地址是否可用功能</span><span class="token code keyword">        前端数据校验</span><span class="token code keyword">        1. 前端校验 : 只需要前端就可以独立校验(比如长度限制,邮箱格式是否正确)</span><span class="token code keyword">        2. 后端校验 : 需要后端参与的校验 (前端需要发起请求)</span><span class="token list punctuation">3.</span> 两种请求的对比<span class="token code keyword">        异步请求比较节省时间</span><span class="token title important"><span class="token punctuation">#</span> 结论</span><span class="token code keyword">    1. 异步请求是现在前端主要请求类型</span><span class="token code keyword">    2. 我们之前所学习的所有前端发起的请求都是属于同步请求</span><span class="token code keyword">    3. 异步请求今天才学习(ajax)</span></code></pre><p><strong>同步和异步的区别:</strong></p><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 同步方式</span><span class="token code keyword">    1. 浏览器与服务器是串行的操作，浏览器发起请求的时候，服务器在处理该请求的时候，浏览器只能等待。以前使用JSP开发的方式都是同步的方式。</span><span class="token code keyword">    2. 缺点：执行效率低，用户体验差。    </span><span class="token title important"><span class="token punctuation">#</span>异步方式</span><span class="token code keyword">    1. 浏览器与服务器是并行工作的</span><span class="token code keyword">    2. 优点：执行效率高，用户体验更好。</span></code></pre><h3 id="2、什么是ajax"><a href="#2、什么是ajax" class="headerlink" title="2、什么是ajax"></a>2、什么是ajax</h3><blockquote><p>异步JavaScript和XML (Asynchronous Javascript And XML)</p></blockquote><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> ajax : 是js中发起异步请求的技术</span><span class="token list punctuation">1.</span> 异步的访问方式<span class="token list punctuation">2.</span> 使用到的技术：JavaScript和XML   1).  JavaScript：ajax是js的异步请求技术   2).  XML：用于封装服务器发送的大量的数据，因为XML无关的数据太多，而且解析比较麻烦。所以目前几乎不再使用了，使用JSON格式来代替。</code></pre><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>contactList</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>contact</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>潘金莲<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sex</span><span class="token punctuation">></span></span>女<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sex</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>address</span><span class="token punctuation">></span></span>烧饼店<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>address</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>contact</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>contact</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>武大<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sex</span><span class="token punctuation">></span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sex</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>address</span><span class="token punctuation">></span></span>烧饼连锁店<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>address</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>contact</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>contactList</span><span class="token punctuation">></span></span></code></pre><h3 id="3、原生ajax"><a href="#3、原生ajax" class="headerlink" title="3、原生ajax"></a>3、原生ajax</h3><h4 id="1、-AJAX的执行流程"><a href="#1、-AJAX的执行流程" class="headerlink" title="1、 AJAX的执行流程"></a>1、 AJAX的执行流程</h4><p><img src="https://i.loli.net/2021/09/14/WsUndfoOIE9jTRr.png" alt="1553214240418"></p><p>流程说明：</p><ol><li>用户访问的时候，由JavaScript后台创建一个请求对象：XMLHttpRequest对象。</li><li>请求对象创建一个回调函数，回调函数用于处理服务器返回的响应</li><li>请求对象用于发送请求给服务器</li><li>服务器接收到浏览器发过来的请求，并且对数据进行处理。</li><li>将数据以XML的格式发送回浏览器，由XMLHttpRequest请求对象的回调函数接收数据</li><li>使用HTML和CSS更新网页最新结果</li></ol><h4 id="2、-XMLHttpRequest对象"><a href="#2、-XMLHttpRequest对象" class="headerlink" title="2、 XMLHttpRequest对象"></a>2、 XMLHttpRequest对象</h4><p>​    学习XMLHttpRequest对象有哪些事件，方法和属性</p><table><thead><tr><th><strong>创建XMLHttpRequest对象</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>new XMLHttpRequest()</strong></td><td>构造方法直接创建对象</td></tr></tbody></table><table><thead><tr><th><strong>XMLHttpRequest对象的事件</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>on ready state change</strong></td><td>准备状态改变事件，这个事件是在以下情况激活：<br>1. 浏览器开始发送数据给服务器的时候<br>2. 浏览器数据发送完毕的时候<br>3. 服务器开始发送数据给浏览器的时候<br>4. 服务器数据发送完毕的时候</td></tr></tbody></table><table><thead><tr><th><strong>XMLHttpRequest对象的属性</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>readyState</strong></td><td>准备状态的值，当它等于4的时候，表示服务器数据接收完毕</td></tr><tr><td><strong>status</strong></td><td>服务器的状态码。等于200的时候，服务器正确响应</td></tr><tr><td><strong>responseText</strong></td><td>接收服务器返回的字符串数据</td></tr></tbody></table><table><thead><tr><th><strong>XMLHttpRequest对象的方法</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>open(“GET”,”URL”,true)</strong></td><td>打开服务器的连接<br>1. GET或POST表示请求的方式<br>2. URL访问服务器的地址<br>3. true/false 表示异步，false表示同步。<br>同步是指要等待服务器响应回来以后，才继续向后执行。</td></tr><tr><td><strong>send()</strong></td><td>发送请求，如果是GET方法send()不需要参数。<br>如果是POST，send()需要传递浏览器端的数据</td></tr></tbody></table><h4 id="3、使用"><a href="#3、使用" class="headerlink" title="3、使用"></a>3、使用</h4><p><strong>MyServlet.java：</strong></p><pre class=" language-java"><code class="language-java">    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        int i = 1/0;</span>        String name <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String age <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><strong>javaScript:</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token comment" spellcheck="true">// get请求</span>    <span class="token keyword">function</span> <span class="token function">method01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1. 创建ajax的核心对象</span>        <span class="token keyword">let</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">/*            2. 设置监听事件 (在等待响应)                1). 事件触发: 当readystate改变的时候触发                2). readystate 准备状态 (请求发起到响应的整个过程描述)         */</span>         xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>             <span class="token comment" spellcheck="true">//console.log("xx");</span>             <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//表示获取到响应了</span>                 <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"请求失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token punctuation">}</span>             <span class="token punctuation">}</span>         <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//3. 设置请求数据</span>        <span class="token comment" spellcheck="true">/*        规定请求的类型、URL 以及是否异步处理请求。            method：请求的类型；GET 或 POST            url：文件在服务器上的位置            async：true（异步）或 false（同步）         */</span>        xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span><span class="token string">"MyServlet?name=zs&amp;age=18"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//4. 发送请求</span>            <span class="token comment" spellcheck="true">//string：仅用于 POST 请求</span>        xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// post请求</span>    <span class="token keyword">function</span> <span class="token function">method02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1. 创建ajax的核心对象</span>        <span class="token keyword">let</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*           2. 设置监听事件 (在等待响应)        */</span>        xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//console.log("xx");</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//表示获取到响应了</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"请求失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//3. 设置请求数据</span>        xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"POST"</span><span class="token punctuation">,</span><span class="token string">"MyServlet"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//4. 发送请求</span>        <span class="token comment" spellcheck="true">/*            TODO:                1. get的请求参数在请求地址中,自动进行url编码                2. post的请求参数在请求体中,不会自动进行url编码                    解决方案: 通过设置请求头content-type为url编码(mimeType)         */</span>        xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">"content-type"</span><span class="token punctuation">,</span><span class="token string">"application/x-www-form-urlencoded"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//string：仅用于 POST 请求</span>        xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"name=ls&amp;age=19"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h3 id="4、Ajax异步请求库-axios"><a href="#4、Ajax异步请求库-axios" class="headerlink" title="4、Ajax异步请求库 axios"></a>4、Ajax异步请求库 axios</h3><ul><li><p><strong>使用步骤</strong><br>1.引入axios核心js文件。<br>2.调用axios对象的方法来发起异步请求。<br>3.调用axios对象的方法来处理响应的数据。</p></li><li><p><strong>axios常用方法</strong></p><p><img src="D:\课堂记录\day03-前端(ajax&amp;json)\笔记\assets\axios常用方法.png">   </p><pre class=" language-js"><code class="language-js">#备注<span class="token punctuation">:</span> then函数的参数response是一个json对象<span class="token punctuation">,</span>我们重点只需要了解response<span class="token punctuation">.</span>data即可<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// `data` 由服务器提供的响应体 (重要!)</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// `status` 来自服务器响应的 HTTP 状态码</span>    status<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// `statusText` 来自服务器响应的 HTTP 状态信息</span>    statusText<span class="token punctuation">:</span> <span class="token string">'OK'</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// `headers` 服务器响应的头</span>    headers<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// `config` 是为请求提供的配置信息</span>    config<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span>                        </code></pre><h5 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a><strong>代码实现</strong></h5></li></ul><pre class=" language-html"><code class="language-html">- html  ```html  <span class="token doctype">&lt;!DOCTYPE html></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>zh-CN<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>发起axios的get请求<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>method01()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>发起axios的post请求<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>method02()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!--      TODO:          1. js的框架通常是将js代码封装到js文件中          2. 一般为了js文件能够最小化(浏览器加载网页时间就会少)              通常框架都会提供xx.min.js, 没有不必要的符号          3. 使用js文件,需要用script标签引入 (不能包含内容,也不能自关闭)  --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/nb.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/axios-0.18.0.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!--&lt;script>      function method01() {          /*              1. get函数 : 发起get异步请求              2. then函数 : 接收的是响应成功的数据              3. t函数作为then函数参数: t函数的执行时机是响应成功时调用                  1). response 表示的就是响应报文                  2). response.data是响应体           */          let url = "MyServlet"          let param = "name=ww&amp;age=21"            let t = function(response){              console.log(response.data);          }          axios.get(url+"?"+param).then(t)      }  &lt;/script>--></span>  <span class="token comment" spellcheck="true">&lt;!--&lt;script>      function method01() {          /*              1. get函数 : 发起get异步请求              2. then函数 : 接收的是响应成功的数据                  t函数作为then函数参数: t函数的执行时机是响应成功时调用                      1). response 表示的就是响应报文                      2). response.data是响应体                3. catch函数 : 接收的是响应失败的数据                  error是错误信息                4. finally函数 : 最终一定会执行的函数           */          let url = "MyServlet"          let param = "name=ww&amp;age=21"            let t = function(response){              console.log(response.data);          }          let c = function(error){              console.log(error);          }          let f = function(){              console.log("无论如何都执行");          }          axios.get(url+"?"+param).then(t).catch(c).finally(f)      }  &lt;/script>--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">      <span class="token keyword">function</span> <span class="token function">method01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token string">"MyServlet"</span>          <span class="token keyword">let</span> param <span class="token operator">=</span> <span class="token string">"name=ww&amp;age=21"</span>            <span class="token comment" spellcheck="true">// let t = function(response){</span>          <span class="token comment" spellcheck="true">//     console.log(response.data);</span>          <span class="token comment" spellcheck="true">// }</span>            <span class="token comment" spellcheck="true">//TODO:  JS箭头函数 (相当于java的lambda表达式)</span>          <span class="token keyword">let</span> t <span class="token operator">=</span> response <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>              console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">let</span> c <span class="token operator">=</span> error <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">let</span> f <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"无论如何都执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>url<span class="token operator">+</span><span class="token string">"?"</span><span class="token operator">+</span>param<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">finally</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>      <span class="token punctuation">}</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">      <span class="token keyword">function</span> <span class="token function">method02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token string">"MyServlet"</span>          <span class="token keyword">let</span> param <span class="token operator">=</span> <span class="token string">"name=ml&amp;age=22"</span>            <span class="token keyword">let</span> t <span class="token operator">=</span> response <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>              console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>            axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>param<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>      <span class="token punctuation">}</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p><strong>java代码</strong></p><pre class=" language-java"><code class="language-java">    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        int i = 1/0;</span>        String name <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String age <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//响应体数据</span>    <span class="token punctuation">}</span></code></pre><h4 id="案例：检查用户名是否已被注册"><a href="#案例：检查用户名是否已被注册" class="headerlink" title="案例：检查用户名是否已被注册"></a>案例：检查用户名是否已被注册</h4><p><strong>JavaScript：</strong></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/axios-0.18.0.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">/*    *  1. 事件 : onblur (失去焦点)    *  2. 后端校验: 验证码用户名是否可用    *  3. 发起请求    *       1). 异步: 局部刷新页面    *       2). 请求地址: CheckServlet    *       3). 请求参数: 用户名    *   4. 获取响应    *    * */</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onblur <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// console.log(this.value);</span>        <span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token string">"CheckServlet"</span>        <span class="token comment" spellcheck="true">//模板字符串</span>        <span class="token keyword">let</span> param <span class="token operator">=</span> <span class="token template-string"><span class="token string">`username=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span>        <span class="token comment" spellcheck="true">// let param = "username=" + this.value</span>        axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>param<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>response<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// console.log(response.data);</span>            <span class="token keyword">var</span> span <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"usernameSpan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//已存在</span>                span<span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">"red"</span>                span<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"此用户名不可用"</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                span<span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">"green"</span>                span<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"恭喜,此用户名可用"</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/*  var username = document.getElementById("username");    username.onblur = function () {        console.log(username.value);    }*/</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p><strong>Servlet：</strong></p><pre class=" language-java"><code class="language-java">    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//解决post参数中文乱码</span>        request<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String username <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Integer result<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 用户名不能用,已存在</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            result <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 用户名能用,在数据库中不存在</span>        <span class="token punctuation">}</span>        response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="2、JSON"><a href="#2、JSON" class="headerlink" title="2、JSON"></a>2、JSON</h2><h3 id="1、json基本概述和格式"><a href="#1、json基本概述和格式" class="headerlink" title="1、json基本概述和格式"></a>1、json基本概述和格式</h3><p>JavaScript对象文本表示形式（JavaScript Object Notation : js对象简谱)</p><blockquote><p>json对象是js对象,但是js对象并不只是json</p><p>json对象是一种特殊的 js 对象</p></blockquote><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> json 的存在有两种形式。 </span><span class="token code keyword">    1. 一种是：对象的形式存在，我们叫它 json 对象。</span><span class="token code keyword">    2. 一种是：字符串的形式存在，我们叫它 json 字符串。 </span>    <span class="token code keyword">    一般我们要操作 json 中的数据的时候，需要 json 对象的格式。</span><span class="token code keyword">    一般我们要在客户端和服务器之间进行数据交换的时候，使用 json 字符串。 </span>    <span class="token title important"><span class="token punctuation">#</span> js中的方法</span><span class="token code keyword">    JSON.stringify() 把 json 对象转换成为 json 字符串 </span><span class="token code keyword">    JSON.parse() 把 json 字符串转换成为 json 对象</span></code></pre><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> json的语法主要有两种:</span><span class="token code keyword">        1. 对象 { }</span><span class="token code keyword">        2. 数组 [ ]</span><span class="token code keyword">        </span><span class="token list punctuation">1.</span> 对象类型<span class="token code keyword">        {name:value,name:value}</span><span class="token code keyword">        </span><span class="token list punctuation">2.</span> 数组类型<span class="token code keyword">        [</span><span class="token code keyword">            {name:value,name:value}, </span><span class="token code keyword">            {name:value,name:value},</span><span class="token code keyword">            {name:value,name:value}</span><span class="token code keyword">        ]</span><span class="token code keyword">        </span><span class="token list punctuation">3.</span> 复杂对象<span class="token code keyword">        {</span><span class="token code keyword">            name:value,</span><span class="token code keyword">            wives:[{name:value},{},{}],</span><span class="token code keyword">            son:{name:value}</span><span class="token code keyword">        }</span><span class="token title important"><span class="token punctuation">#</span> 注意: </span><span class="token code keyword">    1. 其中name必须是string类型</span><span class="token code keyword">        json在js中,name的双引号可以省略</span><span class="token code keyword">    2. value必须是以下数据类型之一：</span><span class="token code keyword">        字符串</span><span class="token code keyword">        数字</span><span class="token code keyword">        对象（JSON 对象）</span><span class="token code keyword">        数组</span><span class="token code keyword">        布尔</span><span class="token code keyword">        Null</span><span class="token code keyword">    3. JSON 中的字符串必须用双引号包围。(单引号不行!)    </span></code></pre><h3 id="2、Fastjson"><a href="#2、Fastjson" class="headerlink" title="2、Fastjson"></a>2、Fastjson</h3><blockquote><p>​    在服务器端有如下User对象需要响应给浏览器.</p><p>​    为了方便浏览器解析, 这就要求服务端在响应之前,需要将转成符合Json格式的字符串.</p></blockquote><p><strong>常见的json转换工具</strong></p><p><img src="https://i.loli.net/2021/09/14/8WZytRLsVO2nvbB.png" alt="1553220531567"></p><blockquote><p>其实这些工具使用起来都差不多, 目前我们学习使用的是Fastjson</p></blockquote><h4 id="1、fastjson-作用"><a href="#1、fastjson-作用" class="headerlink" title="1、fastjson 作用:"></a>1、fastjson 作用:</h4><blockquote><ol><li>将java对象转成json字符串</li><li>将json字符串 转成 java对象</li></ol></blockquote><h4 id="2、常用API"><a href="#2、常用API" class="headerlink" title="2、常用API"></a>2、常用API</h4><p>fastjson API 入口类是<code>com.alibaba.fastjson.JSON</code>,常用的序列化操作都可以在<code>JSON</code>类上的静态方法直接完成。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String <span class="token function">toJSONString</span><span class="token punctuation">(</span>Object object<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将JavaBean序列化为JSON文本 </span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">parseObject</span><span class="token punctuation">(</span>String text<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span>T<span class="token operator">></span> clazz<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 把JSON文本解析成指定类型JavaBean </span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> List<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">parseArray</span><span class="token punctuation">(</span>String text<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span>T<span class="token operator">></span> clazz<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//把JSON文本解析成JavaBean集合 </span></code></pre><h4 id="3、使用-1"><a href="#3、使用-1" class="headerlink" title="3、使用"></a>3、使用</h4><h5 id="1、导包"><a href="#1、导包" class="headerlink" title="1、导包"></a>1、导包</h5><pre class=" language-xml"><code class="language-xml">  <span class="token comment" spellcheck="true">&lt;!--fastjson--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.47<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h4 id="2、使用代码"><a href="#2、使用代码" class="headerlink" title="2、使用代码"></a>2、使用代码</h4><p>​    java代码中</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//java对象转json字符串</span>        User zs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"zs"</span><span class="token punctuation">,</span> <span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String json <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>zs<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//java集合转json字符串</span>        ArrayList<span class="token operator">&lt;</span>User<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>zs<span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"ls"</span><span class="token punctuation">,</span> <span class="token string">"110"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String json2 <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>json2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// json格式字符串 转 javaBean</span>       String json1 <span class="token operator">=</span> <span class="token string">"{\"password\":\"123\",\"username\":\"zs\"}"</span><span class="token punctuation">;</span>       User user <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>json1<span class="token punctuation">,</span> User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// json格式字符串 转 javaBean集合</span>       String json2 <span class="token operator">=</span> <span class="token string">"[{\"password\":\"123\",\"username\":\"zs\"},{\"password\":\"110\",\"username\":\"ls\"}]"</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>User<span class="token operator">></span> list <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parseArray</span><span class="token punctuation">(</span>json2<span class="token punctuation">,</span> User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>JS代码中：</p><pre class=" language-javascript"><code class="language-javascript">   JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 把 json 对象转换成为 json 字符串     JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 把 json 字符串转换成为 json 对象</code></pre><p>客户端和服务器之间的数据传输用的是json字符串</p><h2 id="3、axios和Fastjson综合"><a href="#3、axios和Fastjson综合" class="headerlink" title="3、axios和Fastjson综合"></a>3、axios和Fastjson综合</h2><h3 id="1、请求参数和响应数据都是普通字符串"><a href="#1、请求参数和响应数据都是普通字符串" class="headerlink" title="1、请求参数和响应数据都是普通字符串"></a>1、请求参数和响应数据都是普通字符串</h3><p><strong>js：</strong></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">function</span> <span class="token function">method01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token string">"Union01Servlet"</span>        <span class="token keyword">let</span> param <span class="token operator">=</span> <span class="token string">"username=admin&amp;password=123"</span>        <span class="token comment" spellcheck="true">// axios.get(url+"?"+param)</span>        axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>param<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>response<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>error<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">finally</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"无论如何都执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p><strong>Java：</strong></p><pre class=" language-java"><code class="language-java">    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1. 接收请求</span>        String username <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String password <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>username<span class="token operator">+</span><span class="token string">","</span> <span class="token operator">+</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2. 业务处理</span>        <span class="token comment" spellcheck="true">//3. 响应数据</span>        response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="2、响应数据改成json格式"><a href="#2、响应数据改成json格式" class="headerlink" title="2、响应数据改成json格式"></a>2、响应数据改成json格式</h3><p><strong>响应结果的封装</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Result</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> flag<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//执行结果，true为执行成功 false为执行失败</span>    <span class="token keyword">private</span> String message<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回结果信息</span>    <span class="token keyword">private</span> Object data<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回数据(如果是查询操作则设置,如果是增删改则不设置)</span>    <span class="token keyword">public</span> <span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//失败,或者增删改</span>    <span class="token keyword">public</span> <span class="token function">Result</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> flag<span class="token punctuation">,</span> String message<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>flag <span class="token operator">=</span> flag<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> message<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//成功的查询</span>    <span class="token keyword">public</span> <span class="token function">Result</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> flag<span class="token punctuation">,</span> String message<span class="token punctuation">,</span> Object data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>flag <span class="token operator">=</span> flag<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> message<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>js代码：</strong></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">function</span> <span class="token function">method02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token string">"Union02Servlet"</span>        <span class="token keyword">let</span> param <span class="token operator">=</span> <span class="token string">"username=admin&amp;password=123"</span>        axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>param<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>response<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//响应成功</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> user <span class="token keyword">of</span> response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>username <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> user<span class="token punctuation">.</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//响应失败</span>                <span class="token function">alert</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>message<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p><strong>Java代码：</strong></p><pre class=" language-java"><code class="language-java">    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//1. 接收请求</span>            String username <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String password <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>username<span class="token operator">+</span><span class="token string">","</span> <span class="token operator">+</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//2. 业务处理 : 查询数据库</span>            ArrayList<span class="token operator">&lt;</span>User<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token string">"119"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">,</span> <span class="token string">"110"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">;</span>            Result result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token string">"查询成功"</span><span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>            String json <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//3. 响应数据</span><span class="token comment" spellcheck="true">//        response.setContentType("text/html;charset=utf-8");</span>            response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"application/json;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Result result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">"查询失败o(╥﹏╥)o"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String json <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"application/json;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h3 id="3、请求参数改成json格式"><a href="#3、请求参数改成json格式" class="headerlink" title="3、请求参数改成json格式"></a>3、请求参数改成json格式</h3><p><strong>js代码：</strong></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">function</span> <span class="token function">method03</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/*        * TODO:        *   请求数据格式: 普通字符串        *   请求数据格式: json格式 (最好用post)        * */</span>        <span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token string">"Union02Servlet"</span>        <span class="token comment" spellcheck="true">// let param = "username=admin&amp;password=123"</span>        <span class="token keyword">let</span> param <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"username"</span> <span class="token punctuation">:</span> <span class="token string">"admin"</span><span class="token punctuation">,</span><span class="token string">"password"</span> <span class="token punctuation">:</span> <span class="token string">"123"</span><span class="token punctuation">}</span>        axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>param<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>response<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//表示服务器响应的Result对象转成的json</span>            <span class="token keyword">let</span> result <span class="token operator">=</span> response<span class="token punctuation">.</span>data<span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//查询成功</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> friend <span class="token keyword">of</span> result<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>friend<span class="token punctuation">.</span>id <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> friend<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>error<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">finally</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"无论如何都执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p><strong>java代码：</strong></p><pre class=" language-java"><code class="language-java">    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1. 获取请求</span>            <span class="token comment" spellcheck="true">//解决post请求乱码问题</span>        request<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//请求体输入流</span>        ServletInputStream is <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*            直接读取请求体中的json格式参数, 转成指定javaBean         */</span>        User user <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>is<span class="token punctuation">,</span> User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2. 业务处理</span>            <span class="token comment" spellcheck="true">//假设是查询数据,查询到的结果 List&lt;Friend> list (伪数据)</span>                <span class="token comment" spellcheck="true">//1). 如果查询一切正常</span>        List<span class="token operator">&lt;</span>Friend<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Friend</span><span class="token punctuation">(</span><span class="token string">"001"</span><span class="token punctuation">,</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Friend</span><span class="token punctuation">(</span><span class="token string">"002"</span><span class="token punctuation">,</span><span class="token string">"李四"</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Result result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token string">"查询成功!"</span><span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//2). 如果查询有问题(数据库服务器故障: 高并发)</span><span class="token comment" spellcheck="true">//        Result result = new Result(false, "查询失败: 请稍后再尝试");</span>            <span class="token comment" spellcheck="true">//假设是增删改数据,返回成功或失败</span><span class="token comment" spellcheck="true">//        Result result = new Result(true, "增删改成功");</span><span class="token comment" spellcheck="true">//        Result result = new Result(false, "增删改失败");</span>        <span class="token comment" spellcheck="true">//3. 响应数据</span>        response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"application/json;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String json <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="4、抽取BaseController"><a href="#4、抽取BaseController" class="headerlink" title="4、抽取BaseController"></a>4、抽取BaseController</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaseController</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*        先封装请求        1. 请求必须是post        2. 请求参数必须是json格式        3. 基于FastJson     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span>T <span class="token function">getParam</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span> clazz<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        ServletInputStream is <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        T t <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>is<span class="token punctuation">,</span> clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> t<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*        封装响应        1. 响应的数据必须是Result格式     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printResult</span><span class="token punctuation">(</span>HttpServletResponse response<span class="token punctuation">,</span>Result result<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        String json <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"application/json;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Http请求&amp;Request</title>
      <link href="/2020/04/28/Http%E8%AF%B7%E6%B1%82&amp;Request/"/>
      <url>/2020/04/28/Http%E8%AF%B7%E6%B1%82&amp;Request/</url>
      
        <content type="html"><![CDATA[<h1 id="1、Http请求-amp-Request"><a href="#1、Http请求-amp-Request" class="headerlink" title="1、Http请求&amp;Request"></a>1、Http请求&amp;Request</h1><h2 id="1、Http协议"><a href="#1、Http协议" class="headerlink" title="1、Http协议"></a>1、Http协议</h2><h3 id="1、http协议介绍"><a href="#1、http协议介绍" class="headerlink" title="1、http协议介绍"></a>1、http协议介绍</h3><p>超文本传输协议（Hyper Text Transfer Protocol)是互联网上应用最为广泛的一种网络协议。</p><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 1. http协议的特点</span><span class="token code keyword">        HyperText Transfer Protocol 超文本传输协议</span><span class="token code keyword">    0) tcp/ip协议族: 链路层,网络层(ip), 传输层(tcp), 应用层(http)</span><span class="token code keyword">    1). 基于tcp协议 : 传输层协议, 三次握手,保障数据安全,相对udp效率低</span><span class="token code keyword">    2). 默认端口 80 (省略不写)</span><span class="token code keyword">            完整版: http://localhost:80/a.html</span><span class="token code keyword">            省略版: http://localhost/a.html            </span><span class="token code keyword">            https 的默认端口是443 (secure 安全, 对传输数据进行加密)        </span><span class="token code keyword">                https://www.baidu.com:443/?tn=54093922_4_hao_pg</span><span class="token code keyword">    3). 基于请求-响应模型</span><span class="token code keyword">        一次请求对应一次响应 / 先有请求,再有响应</span><span class="token code keyword">    4). 无状态(多次请求之间相互独立,不记录状态)         </span>    <span class="token title important"><span class="token punctuation">#</span> 2. http协议版本发展</span><span class="token code keyword">    1). http1.0 (1996) : 每次请求都有一个新的连接(开销大,比较慢)</span><span class="token code keyword">    2). http1.1    (1999) : 长连接,多个请求共用一个连接(开销小一些,比较快) </span><span class="token code keyword">                         传输的数据都是文本(比较慢), 不支持推送</span><span class="token code keyword">                         目前主流!!!</span><span class="token code keyword">    3). http2.0 (2015) : 传输的数据经过压缩的,效率很高, 支持推送    </span>    <span class="token title important"><span class="token punctuation">#</span> 3. http协议的内容</span><span class="token code keyword">    1). 请求报文: 浏览器发送给服务器的数据 </span><span class="token code keyword">        请求行, 请求头, 请求体</span><span class="token code keyword">    2). 响应报文: 服务器发送给浏览器的数据</span><span class="token code keyword">        响应行, 响应头, 响应体</span><span class="token title important"><span class="token punctuation">#</span> 4. 抓包工具 (抓取基于http协议传输的数据包)</span><span class="token code keyword">    1. 在浏览器和服务器交互的时候(发送请求,然后响应),我们可以使用工具抓取数据查看</span><span class="token code keyword">    2. google浏览器内置开发者工具</span></code></pre><h3 id="2、http请求报文格式"><a href="#2、http请求报文格式" class="headerlink" title="2、http请求报文格式"></a>2、http请求报文格式</h3><h4 id="1、请求行"><a href="#1、请求行" class="headerlink" title="1、请求行"></a>1、请求行</h4><pre class=" language-markdown"><code class="language-markdown"><span class="token list punctuation">*</span> 格式<span class="token code keyword">        请求方式 请求路径 协议/版本号</span><span class="token code keyword">        </span><span class="token list punctuation">*</span> 例如<span class="token code keyword">        POST /day07_myapp/static/login.html HTTP/1.1</span><span class="token code keyword">        GET /day07_myapp/static/login.html?username=jack&amp;password=123 HTTP/1.1</span><span class="token code keyword">        </span><span class="token list punctuation">*</span> 请求方式区别<span class="token code keyword">    get</span><span class="token code keyword">        1.请求参数在地址栏显示（请求行）</span><span class="token code keyword">        2.请求参数大小有限制</span><span class="token code keyword">        3.数据不太安全</span><span class="token code keyword">    post</span><span class="token code keyword">        1.请求参数不在地址栏显示（请求体）</span><span class="token code keyword">        2.请求参数大小没有限制</span><span class="token code keyword">        3.数据相对安全</span><span class="token code keyword">        (上传文件要用post,其他请求两种都可以)</span></code></pre><h4 id="2、请求头"><a href="#2、请求头" class="headerlink" title="2、请求头"></a>2、请求头</h4><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 格式</span><span class="token code keyword">    一堆  name:value</span></code></pre><p><strong>常见请求头：</strong></p><pre class=" language-markdown"><code class="language-markdown"><span class="token code keyword">        ------------------------------------------（了解）</span><span class="token list punctuation">1.</span> Host: localhost:8080         所访问的服务器地址（域名+端口）<span class="token list punctuation">2.</span> Connection: keep-alive       长连接（http1.1协议）    <span class="token list punctuation">3.</span> Upgrade-Insecure-Requests:1   客户端支持https加密协议  <span class="token code keyword">            </span><span class="token code keyword">        ---------------------------------------（重点）</span><span class="token list punctuation">4.</span> Referer: http://baidu.com    上一次请求的地址    <span class="token code keyword">        防盗链....        </span><span class="token list punctuation">5.</span> User-Agent:        客户端系统和浏览器版本<span class="token code keyword">        User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64) Chrome/63.0 Safari/537.36</span><span class="token code keyword">        浏览器兼容性</span><span class="token code keyword">            判断 : 服务器根据用户的浏览器版本, 返回响应的数据</span><span class="token code keyword">                谷歌方式一 : 发送google浏览器可以解析的数据</span><span class="token code keyword">                IE方式二 : 发送ie浏览器可以解析的数据</span><span class="token code keyword">                火狐方式三 : </span></code></pre><h4 id="3、请求体（get方式没有请求体）"><a href="#3、请求体（get方式没有请求体）" class="headerlink" title="3、请求体（get方式没有请求体）"></a>3、请求体（get方式没有请求体）</h4><pre class=" language-markdown"><code class="language-markdown"><span class="token list punctuation">*</span> 格式<span class="token code keyword">        参数名=参数值&amp;参数名=参数值...</span><span class="token list punctuation">*</span> 例如<span class="token code keyword">        username=jack&amp;password=123</span><span class="token code keyword">        </span><span class="token list punctuation">*</span> 注意：<span class="token code keyword">        get方式没有请求体，post方式才有</span></code></pre><h2 id="2、Request概述"><a href="#2、Request概述" class="headerlink" title="2、Request概述"></a>2、Request概述</h2><blockquote><ul><li><p>由来: 用户通过浏览器访问服务器时，Tomcat将HTTP请求中所有的信息都封装在Request对象中</p></li><li><p>作用：开发人员可以通过request对象方法，来获取浏览器发送给服务器的所有信息.</p></li></ul></blockquote><p><img src="https://gitee.com/ergou15154/drawing-bed/raw/master/source/image-20210901190445886.png" alt="image-20210901190445886"></p><h3 id="1、Request体系结构"><a href="#1、Request体系结构" class="headerlink" title="1、Request体系结构"></a>1、Request体系结构</h3><pre class=" language-markdown"><code class="language-markdown">ServletRequest  (接口: 兼容大部分协议)<span class="token code keyword">    |</span>HttpServletRequest (接口: HTTP协议)<span class="token code keyword">    |</span>org.apache.catalina.connector.RequestFacade（由tomcat厂商提供实现类,不关心）</code></pre><p><strong>servlet的service方法中的request对象来源过程：</strong></p><p><img src="https://gitee.com/ergou15154/drawing-bed/raw/master/source/image-20210901191218347.png" alt="image-20210901191218347"></p><h2 id="3、Request获取Http请求信息"><a href="#3、Request获取Http请求信息" class="headerlink" title="3、Request获取Http请求信息"></a>3、Request获取Http请求信息</h2><h3 id="3-1-获取请求行信息"><a href="#3-1-获取请求行信息" class="headerlink" title="3.1 获取请求行信息"></a>3.1 获取请求行信息</h3><pre class=" language-markdown"><code class="language-markdown"><span class="token list punctuation">*</span> 例如：<span class="token code keyword">        GET /day09_request/requestDemo1 HTTP/1.1</span><span class="token code keyword">         请求方式     请求地址    协议/版本</span><span class="token list punctuation">*</span> 相关API： (查阅文档: 是javaee文档)<span class="token code keyword">    1. 获取请求方式 GET【掌握!!!】</span><span class="token code keyword">            String getMethod()  </span><span class="token code keyword">            </span><span class="token code keyword">    2. 获取URI /day09_request/requestDemo1</span><span class="token code keyword">            统一资源标识符</span><span class="token code keyword">                （范围广,只要能唯一标识资源的: 本地路径,远程地址</span><span class="token code keyword">                    url 是 uri 的子集</span><span class="token code keyword">                ）  </span><span class="token code keyword">            String getRequestURI() </span><span class="token code keyword">            </span><span class="token code keyword">    3. 获取URL http://localhost:8080/day09_request/requestDemo1</span><span class="token code keyword">            统一资源定位符（确定某一个资源的地址:俗称网址） </span><span class="token code keyword">            StringBuffer getRequestURL()  </span><span class="token code keyword">            </span><span class="token code keyword">    4. 获取协议和版本号    HTTP/1.1</span><span class="token code keyword">            String getProtocol()</span></code></pre><pre class=" language-java"><code class="language-java">    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MyServlet被访问了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取请求行信息</span>        String method <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请求方式:"</span> <span class="token operator">+</span> method<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 请求方式:GET</span>        String requestURI <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        StringBuffer requestURL <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getRequestURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请求地址URI:"</span> <span class="token operator">+</span> requestURI<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 请求地址URI:/MyServlet  (省略了三要素)</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请求地址URL:"</span> <span class="token operator">+</span> requestURL<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 请求地址URL:http://localhost:8080/MyServlet</span>        String protocol <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getProtocol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"协议:"</span> <span class="token operator">+</span> protocol<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 协议:HTTP/1.1</span>    <span class="token punctuation">}</span></code></pre><h3 id="3-2-获取请求头信息"><a href="#3-2-获取请求头信息" class="headerlink" title="3.2 获取请求头信息"></a>3.2 获取请求头信息</h3><pre class=" language-markdown"><code class="language-markdown"><span class="token list punctuation">*</span> 例如：<span class="token code keyword">        Host: localhost:8080(主机: 指的就是tomcat访问地址)</span><span class="token code keyword">        name(请求头属性名,固定不变的) : value(对应的属性值,动态改变)</span><span class="token code keyword">         常见请求头: </span><span class="token code keyword">            user-agent (用户的系统版本和浏览器)</span><span class="token code keyword">            referer(上一次地址) </span><span class="token code keyword">            如果在浏览器抓包中看不到某个头,就表示这个头所对应的值是null</span><span class="token code keyword">        </span><span class="token list punctuation">*</span> 相关API：<span class="token code keyword">    1. 获取指定请求头名称对应的值，注：名称不区分大小写  (掌握)</span><span class="token code keyword">            String value =  getHeader(String name)  </span><span class="token code keyword">            </span><span class="token code keyword">    2. 获取所有请求头的名称</span><span class="token code keyword">            Enumeration&lt;String> getHeaderNames()  </span><span class="token code keyword">            注：是Iterator迭代器前身(JDK 枚举)</span></code></pre><pre class=" language-java"><code class="language-java">    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        String userAgent <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"user-agent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"用户的浏览器和系统:"</span> <span class="token operator">+</span> userAgent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*            如果是另一个网址A跳转到当前网页B (referer = A)            如果是浏览器地址栏直接输入网页B的地址 (referer = null)         */</span>        String referer <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"referer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"上一次的访问地址:"</span> <span class="token operator">+</span> referer<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/*  HashMap&lt;String, String> map = new HashMap&lt;>();        //获取map中所有key的迭代器        Iterator&lt;String> it = map.keySet().iterator();        while(it.hasNext()){            String key = it.next();            String value = map.get(key);        }*/</span>      <span class="token comment" spellcheck="true">//获取所有的请求头的迭代器</span>        Enumeration<span class="token operator">&lt;</span>String<span class="token operator">></span> headerNames <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeaderNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//判断是否有下一个元素</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>headerNames<span class="token punctuation">.</span><span class="token function">hasMoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//返回下一个元素</span>            String name <span class="token operator">=</span> headerNames<span class="token punctuation">.</span><span class="token function">nextElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String value <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"--"</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h3 id="3-3-获取请求参数（体）"><a href="#3-3-获取请求参数（体）" class="headerlink" title="3.3 获取请求参数（体）"></a>3.3 获取请求参数（体）</h3><blockquote><p>不论get还是post请求方式，都可以使用下列方法来获取请求参数</p><p>​        get请求参数放在 请求行 url中(get没有请求体)</p><p>​        post请求参数放在 请求体</p></blockquote><pre class=" language-markdown"><code class="language-markdown"><span class="token list punctuation">*</span> 参数<span class="token code keyword">        username=jack&amp;password=123&amp;hobby=drink&amp;hobby=perm</span><span class="token code keyword">        格式: name1=value1&amp;name2=value2... (name是可以重复)</span><span class="token list punctuation">*</span> API<span class="token code keyword">    1. 获取指定参数名的值  username=jack</span><span class="token code keyword">            String getParameter(String name)            </span><span class="token code keyword">    2. 获取指定参数名的值数组  hobby=drink&amp;hobby=perm</span><span class="token code keyword">            String[] getParameterValues(String name)</span><span class="token code keyword">    3. 获取所有参数名和对应值数组，参数名 name（key），值数组 value，封装map集合</span><span class="token code keyword">            Map&lt;String,String[]> getParameterMap()</span><span class="token code keyword">                 name , value</span></code></pre><pre class=" language-java"><code class="language-java">    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//设置请求参数编码为utf-8</span>        request<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String username <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String password <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String sex <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"sex"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> hobbies <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameterValues</span><span class="token punctuation">(</span><span class="token string">"hobby"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//zs,110,female,[drink, firehead]</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>username <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> password <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> sex <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>hobbies<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> map <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameterMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Iterator<span class="token operator">&lt;</span>String<span class="token operator">></span> it <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            String key <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String<span class="token punctuation">[</span><span class="token punctuation">]</span> value <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/*            *   username--[ls]                password--[110]                sex--[male]                hobby--[smoke, drink]            * */</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">"--"</span> <span class="token operator">+</span> Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h3 id="中文乱码解决方案："><a href="#中文乱码解决方案：" class="headerlink" title="中文乱码解决方案："></a><strong>中文乱码解决方案：</strong></h3><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 问题: post请求参数乱码</span><span class="token code keyword">    1. get请求没有乱码</span><span class="token code keyword">        tomcat8以前是有乱码,tomcat8以及之后版本就没有了</span><span class="token code keyword">    2. post请求有乱码</span><span class="token code keyword">        0). 乱码原因: 编码和解码所使用的字符集(编码表)不一样</span><span class="token code keyword">        1). 编码 : 浏览器在编码 (utf-8)</span><span class="token code keyword">        2). 解码     : 服务器在解码</span><span class="token code keyword">                tomcat  (默认使用iso-8859-1 欧码)</span><span class="token code keyword">                servlet</span><span class="token code keyword">                servlet没有设置,会使用tomcat的默认设置,如果设置了就使用servlet设置的</span><span class="token code keyword">       解决:</span><span class="token code keyword">             request.setCharacterEncoding("utf-8");</span><span class="token code keyword">             注意: 一定要写在获取请求参数之前</span><span class="token code keyword">             </span><span class="token title important"><span class="token punctuation">#</span> 回应：</span><span class="token code keyword">             response.setContentType("text/html;charset=utf-8");</span></code></pre><h3 id="3-4-BeanUtils"><a href="#3-4-BeanUtils" class="headerlink" title="3.4 BeanUtils"></a>3.4 BeanUtils</h3><ul><li><p>这jar包出自apache组织提供的一套工具类，它可以简化参数的封装…..</p></li><li><p>简单来说：将前端提交的数据，直接封装到你想要的JavaBean中</p><blockquote><p>要用BeanUtils 表单项的name属性值 和 javaBean的属性名一致即可 </p></blockquote></li></ul><p><strong>① 导入jar包</strong></p><p><img src="https://gitee.com/ergou15154/drawing-bed/raw/master/source/image-20210901194011290.png" alt="image-20210901194011290"></p><p><strong>② 使用工具类封装数据</strong></p><blockquote><p>核心方法：BeanUtils.populate(user, parameterMap);</p></blockquote><p><strong>前端</strong></p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>zh-CN<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>post请求<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>BeanServlet<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        用户 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>        密码 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>        性别        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>boy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  男        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>girl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  女 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>        爱好        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hobby<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>smoke<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 抽烟        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hobby<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>drink<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 喝酒        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hobby<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>firehead<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 烫头 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><p><strong>servlet</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        request<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取所有的请求参数</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> parameterMap <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameterMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将这些请求参数封装到javabean中</span>        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*        *   static void populate(Object bean, Map map)        *   将map数据 填充到 bean中        *        *   底层原理:        *       0). 读取map数据,设置到bean中        *       1). 遍历map,读取数据        *               username = "张三"        *                  key      value        *       2). 将数据设置bean中 -> user.setUsername("张三")        *        *            clazz = user.getClass();        *            // 反射 (内省)        *               //setUsername 通过  set + map中的key推导出来的        *               //String.class 通过  map中的value类型推导出来的        *            clazz.getMethod("setUsername",String.class);        *        *            method.invoke(user,"张三");         * */</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            BeanUtils<span class="token punctuation">.</span><span class="token function">populate</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> parameterMap<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//核心方法</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalAccessException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InvocationTargetException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p><strong>javaBean</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    JavaBean : java实体类 (四要素)    1. 这个类要实现serializable接口    2. public 空参构造    3. private 属性    4. public get/set 方法    # 理解:        属性名  和  数据库字段一致        属性名  和  form表单的name属性一致            (属性名 和 setxxx 喜欢一致) */</span><span class="token comment" spellcheck="true">// get/set serializable 空参构造</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String username<span class="token punctuation">;</span>    <span class="token keyword">private</span> String password<span class="token punctuation">;</span>    <span class="token keyword">private</span> String sex<span class="token punctuation">;</span>    <span class="token keyword">private</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> hobby<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="4、请求转发"><a href="#4、请求转发" class="headerlink" title="4、请求转发"></a>4、请求转发</h2><p><img src="https://i.loli.net/2021/09/03/n82XrhZ9G7TVDUv.png" alt="image-20210903135808267"></p><pre class=" language-java"><code class="language-java"><span class="token operator">*</span> API    <span class="token number">1</span><span class="token punctuation">.</span> 通过request对象，获得转发器对象<span class="token punctuation">(</span>邮递员<span class="token punctuation">)</span>             <span class="token comment" spellcheck="true">//path是要跳转的资源路径</span>            RequestDispatcher <span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span>String path<span class="token punctuation">)</span>                <span class="token number">2</span><span class="token punctuation">.</span> 通过转发器对象，实现转发功能             <span class="token comment" spellcheck="true">// 要记得携带请求和响应</span>            <span class="token keyword">void</span> <span class="token function">forward</span><span class="token punctuation">(</span>ServletRequest request<span class="token punctuation">,</span> ServletResponse response<span class="token punctuation">)</span>              <span class="token operator">*</span> 请求转发特点    <span class="token number">1</span><span class="token punctuation">.</span> 浏览器：发了一次请求    <span class="token number">2</span><span class="token punctuation">.</span> 地址栏：没有发生改变    <span class="token number">3</span><span class="token punctuation">.</span> 只能转发到服务器内部资源<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token number">4</span><span class="token punctuation">.</span>转发后可以获取原来请求的参数，也可以获取转发请求时新添加的参数。    <span class="token number">5</span><span class="token punctuation">.</span>原来时get<span class="token operator">/</span>post请求，转发后仍是get<span class="token operator">/</span>post请求，    <span class="token operator">*</span> 链式编程        request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"bServlet"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span></code></pre><pre class=" language-java"><code class="language-java">    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest request<span class="token punctuation">,</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1. 接收请求</span>        String msg <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"AServlet:"</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2. 业务处理: 请求转发</span><span class="token comment" spellcheck="true">//        RequestDispatcher dispatcher = request.getRequestDispatcher("BServlet");</span><span class="token comment" spellcheck="true">//        dispatcher.forward(request, response);</span>        request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"BServlet"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="5、域对象（共享数据）"><a href="#5、域对象（共享数据）" class="headerlink" title="5、域对象（共享数据）"></a>5、域对象（共享数据）</h2><ul><li><p>域对象：一个有作用范围的对象，开发者可以通过域对象在其作用范围内共享/传递数据 </p><blockquote><p>web中有四大域对象 :  jspContext, request , session, servletContext  </p><p>共同点:  设置,获取和移除数据的api完全相同, </p><p>​        作用范围不一样</p><p>域(scope) : 作用域, 作用范围</p></blockquote></li><li><p>request域对象：代表一次请求的范围，一般用于请求转发的多个资源中共享数据</p><blockquote><p>request的本职工作是请求数据的封装, 它兼职送快递</p><p>request的作用范围: 一次请求(一次请求到一次响应之间) </p></blockquote></li></ul><p><img src="https://i.loli.net/2021/09/03/Kt5zjIQFJeHnsqy.png" alt="1630635775992"> </p><pre class=" language-markdown"><code class="language-markdown"><span class="token list punctuation">*</span> API (request域对象可以看成一个map)<span class="token code keyword">    1. 设置数据</span><span class="token code keyword">            void setAttribute(String name, Object o)</span><span class="token code keyword">                -> map.put(key,value)</span><span class="token code keyword">    2. 获取数据</span><span class="token code keyword">            Object getAttribute(String name)</span><span class="token code keyword">                -> value = map.get(key)</span><span class="token code keyword">    3. 删除数据</span><span class="token code keyword">            void removeAttribute(String name)</span><span class="token code keyword">                ->  map.remove(key)</span></code></pre><h2 id="6、案例"><a href="#6、案例" class="headerlink" title="6、案例"></a>6、案例</h2><p><strong>需求</strong></p><p>实现用户的登录功能</p><p>登录成功跳转到SuccessServlet展示：登录成功！xxx,欢迎您</p><p>登录失败跳转到FailServlet展示：登录失败，用户名或密码错误</p><p><strong>需求分析</strong></p><p><img src="https://i.loli.net/2021/09/03/TAFhuInm8PDiB24.png" alt="1590997016531"></p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="①-创建web项目"><a href="#①-创建web项目" class="headerlink" title="① 创建web项目"></a>① 创建web项目</h4><p><img src="https://i.loli.net/2021/09/03/KXnaG1PLjTsu9BE.png" alt="1586934186927">  </p><h4 id="③-编写index-html"><a href="#③-编写index-html" class="headerlink" title="③ 编写index.html"></a>③ 编写index.html</h4><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>zh-CN<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--        post请求方式参数大小无限制,相对安全        1. 上传文件        2. 提交表单        -> 问题: 请求参数中文乱码   --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>登录页面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/day09-login/loginServlet<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        用户<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>        密码<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>登录<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h4 id="④-User实体类"><a href="#④-User实体类" class="headerlink" title="④ User实体类"></a>④ User实体类</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 用户对象</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String username<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 用户名</span>    <span class="token keyword">private</span> String password<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 密码</span>    <span class="token keyword">public</span> String <span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> username<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUsername</span><span class="token punctuation">(</span>String username<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>username <span class="token operator">=</span> username<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> password<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPassword</span><span class="token punctuation">(</span>String password<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>password <span class="token operator">=</span> password<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"User{"</span> <span class="token operator">+</span>                <span class="token string">"username='"</span> <span class="token operator">+</span> username <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", password='"</span> <span class="token operator">+</span> password <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="⑤-LoginServlet"><a href="#⑤-LoginServlet" class="headerlink" title="⑤ LoginServlet"></a>⑤ LoginServlet</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/loginServlet"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doPost</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//post请求中文乱码</span>        request<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//1. 获取请求参数</span>        String username <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String password <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2. 业务处理(判断用户名和密码是否存在)</span>            <span class="token comment" spellcheck="true">//要登录,必先注册,注册的数据一般放在数据库中(还没学,先用伪数据)</span>            <span class="token comment" spellcheck="true">// 伪数据, 只有一个用户已注册: 用户名jack, 密码123</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token string">"123"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//a. 账号密码正确 -> 请求转发SuccessServlet</span>            User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            user<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>            user<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>            request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//域对象设置数据</span>            request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/successServlet"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//b. 账号密码不正确 -> 请求转发FaliedServlet</span>            request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/failedServlet"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="⑥-SuccessServlet"><a href="#⑥-SuccessServlet" class="headerlink" title="⑥ SuccessServlet"></a>⑥ SuccessServlet</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/successServlet"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SuccessServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doPost</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"登录成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//注意, 如果没有设置,获取是null</span>        User user <span class="token operator">=</span> <span class="token punctuation">(</span>User<span class="token punctuation">)</span> request<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//域对象获取数据</span>        response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"恭喜"</span><span class="token operator">+</span>user<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">",登录成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="⑦-FailServlet"><a href="#⑦-FailServlet" class="headerlink" title="⑦ FailServlet"></a>⑦ FailServlet</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/failedServlet"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FailedServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doPost</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"登录失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"用户名不存在或密码错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis</title>
      <link href="/2020/04/28/Redis/"/>
      <url>/2020/04/28/Redis/</url>
      
        <content type="html"><![CDATA[<h1 id="1、Redis"><a href="#1、Redis" class="headerlink" title="1、Redis"></a>1、Redis</h1><h2 id="1、NoSql"><a href="#1、NoSql" class="headerlink" title="1、NoSql"></a>1、NoSql</h2><blockquote><p>Not Only SQL (不仅仅是SQL), 泛指非关系型数据库，通常用于提升数据查询的速度，有时也叫缓存。Redis是非关系型数据库的一种。非关系型数据库不能代替关系型数据库，只是关系型数据库的补充。</p></blockquote><h3 id="1、非关系和关系型数据库的区别"><a href="#1、非关系和关系型数据库的区别" class="headerlink" title="1、非关系和关系型数据库的区别"></a>1、非关系和关系型数据库的区别</h3><pre class=" language-markdown"><code class="language-markdown"> <span class="token title important"><span class="token punctuation">#</span>非关系和关系型数据库</span><span class="token list punctuation">1.</span> 关系型数据库 (正面战场)<span class="token code keyword">        mysql,oracle,sqlserver,access,db2...</span><span class="token code keyword">        最典型的数据结构是表，由二维表及其之间的联系所组成的一个数据组织</span><span class="token code keyword">    a. 优点：</span><span class="token code keyword">        1、易于维护：都是使用表结构，格式一致；</span><span class="token code keyword">        2、使用方便：SQL语言通用，可用于复杂查询；</span><span class="token code keyword">        3、学习成本低：有统一的操作规范(支持SQL),学习成本低。</span><span class="token code keyword">    b. 缺点：</span><span class="token code keyword">        1、存储在硬盘上, 所以读写性能比较差，尤其是海量数据的高效率读写；</span><span class="token code keyword">        2、固定的表结构，灵活度稍欠；</span><span class="token list punctuation">2.</span> 非关系型数据库(游击队)<span class="token code keyword">        非关系型数据库严格上不是一种数据库，应该是一种数据结构化存储方法的集合,可以是文档或者键值对等。</span><span class="token code keyword">    a. 优点：</span><span class="token code keyword">        1、格式灵活：存储数据的格式可以是key,value形式、文档形式、图片形式等等，文档形式、图片形式等等，使用灵活，应用场景广泛，而关系型数据库则只支持基础类型。</span><span class="token code keyword">        2、速度快：nosql可以使用硬盘或者内存作为载体，而关系型数据库只能使用硬盘；</span><span class="token code keyword">        3、高扩展性；</span><span class="token code keyword">        4、成本低：nosql数据库部署简单，基本都是开源软件。</span><span class="token code keyword">    b. 缺点：</span><span class="token code keyword">        1、不提供sql支持，学习和使用成本较高；</span><span class="token code keyword">        2、一般没有事务处理；</span><span class="token code keyword">        3、数据结构相对复杂，复杂查询方面稍欠。</span></code></pre><h3 id="2、NoSQL数据库的四大分类"><a href="#2、NoSQL数据库的四大分类" class="headerlink" title="2、NoSQL数据库的四大分类"></a>2、NoSQL数据库的四大分类</h3><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span>NoSQL数据库的四大分类</span>按存储的格式分成：<span class="token list punctuation">1.</span> 键值(Key-Value)存储数据库<span class="token code keyword">        这一类数据库主要会使用到一个哈希表，这个表中有一个特定的键和一个指针指向特定的数据。今天学习的Redis就是这种类型。Redis是使用C语言编写的(键值的类型很熟悉,但跟java不一样)，免费开源的。</span><span class="token list punctuation">2.</span> 列存储数据库<span class="token code keyword">        通常是用来应对分布式存储的海量数据。键仍然存在，但是它们的特点是指向了多个列。如：Cassandra, HBase, Riak.            </span><span class="token list punctuation">3.</span> 文档型数据库<span class="token code keyword">        文档型数据库可以看作是键值数据库的升级版，允许嵌套键值对。而且文档型数据库比键值数据库的查询效率更高。如：CouchDB, MongoDb。国内也有文档型数据库SequoiaDB，已经开源。</span><span class="token list punctuation">4.</span> 图形(Graph)数据库<span class="token code keyword">        图形结构的数据库同其他行列以及刚性结构的SQL数据库不同，它是使用灵活的图形模型，并且能够扩展到多个服务器上。</span></code></pre><h3 id="3、使用NOSQL解决的问题"><a href="#3、使用NOSQL解决的问题" class="headerlink" title="3、使用NOSQL解决的问题"></a>3、使用NOSQL解决的问题</h3><pre class=" language-markdown"><code class="language-markdown">具体表现为对如下三高问题的解决：<span class="token code keyword">    **High Performance - 数据库高并发访问** </span><span class="token code keyword">    **Huge Storage - 海量数据的存储** </span><span class="token code keyword">    **High Scalability &amp;&amp; High Availability- 高可扩展性和高可用性的需求** </span></code></pre><h2 id="2、redis的的五大值类型"><a href="#2、redis的的五大值类型" class="headerlink" title="2、redis的的五大值类型"></a>2、redis的的五大值类型</h2><blockquote><p>​    redis是一种高级的key-value的存储系统，<strong>键是string类型</strong>，其中value支持五种数据类型</p></blockquote><table><thead><tr><th>值的数据类型</th><th>值的格式说明</th></tr></thead><tbody><tr><td>string</td><td>字符串类型，类似于Java中String</td></tr><tr><td>hash</td><td>由键值对组成，类似于Java中Map</td></tr><tr><td>list</td><td>列表类型，类似于Java中List，元素是有序，可以重复。</td></tr><tr><td>set</td><td>集合类型，类似于Java中Set，元素是无序，不可重复</td></tr><tr><td>zset</td><td>sortedset有序的集合类型，每个元素有一个分数用来决定它的顺序。</td></tr></tbody></table><h3 id="1、string"><a href="#1、string" class="headerlink" title="1、string"></a>1、string</h3><p><img src="https://i.loli.net/2021/09/13/KDALn84HrumlSvX.png" alt="image-20210913184057939"></p><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span>特点</span><span class="token list punctuation">1.</span> 字符串类型是Redis中最为基础的数据存储类型<span class="token list punctuation">2.</span> 二进制安全, 存储不涉及编解码操作(数据底层是二进制 0101,直接存储0101)<span class="token list punctuation">3.</span> 最多可以容纳的数据长度是512M<span class="token title important"><span class="token punctuation">#</span>常用命令</span><span class="token list punctuation">1.</span> 增<span class="token code keyword">        1. 存一个值：set key value</span><span class="token code keyword">        2. 存多个值：mset key1 value1 key2 value2 (multi)</span><span class="token list punctuation">2.</span> 查<span class="token code keyword">        1. 获取指定key的值：get key</span><span class="token code keyword">        2. 获取多个指定key的值：mget key1 key2</span><span class="token list punctuation">3.</span> 删<span class="token code keyword">        删除指定key的值：del key[key2...] </span><span class="token list punctuation">4.</span> 改:<span class="token code keyword">        set 已存在的key 新value(覆盖)</span></code></pre><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td>set 键 值</td><td>添加或修改一个键和值，键不存在就是添加，存在就是修改</td></tr><tr><td>mset 键1 值1 键2 值2  ….</td><td>存多个值</td></tr><tr><td>get 键</td><td>获取值，如果存在就返回值，不存在返回nil(就是C语言中NULL)</td></tr><tr><td>mget 键1 键2  ….</td><td>获取多个指定key的值</td></tr><tr><td>del 键</td><td>删除指定的键和值，返回删除的个数</td></tr><tr><td>strlen 键</td><td>获取key对应的value的长度</td></tr></tbody></table><h3 id="2、hash"><a href="#2、hash" class="headerlink" title="2、hash"></a>2、hash</h3><p><img src="https://i.loli.net/2021/09/13/9YdLDN7k18B3bS6.png" alt="image-20210913184620924"></p><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span>特点</span><span class="token code keyword">    1. Redis中的Hash类型可以看成是键和值都是String类型的Map容器</span><span class="token code keyword">    2. 每一个Hash可以存储4G个键值对。</span><span class="token code keyword">    3. 该类型非常适合于存储对象的信息。如一个用户有姓名，密码，年龄等信息，则可以有username、password和age等键。</span><span class="token code keyword">    4. redis没有null的概念，如果把value都删除了，key也会自动移除。</span><span class="token title important"><span class="token punctuation">#</span>常用命令</span><span class="token list punctuation">1.</span> 增<span class="token code keyword">        1. hset key field value</span><span class="token code keyword">        2. hmset key field1 value1 field2 value2 ...</span><span class="token list punctuation">2.</span> 查<span class="token code keyword">        1. hget key field  (单个)</span><span class="token code keyword">        2. hmget key field1 field2 (多个)</span><span class="token code keyword">        3. hgetall key (获取此hash所有信息)</span><span class="token list punctuation">3.</span> 删<span class="token code keyword">        1. hdel key    [filed1 filed2...]  (删除一个或多个字段)</span><span class="token code keyword">        2. del key 可以删除整个键值对 (通用的)</span></code></pre><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td>hset 键 字段 值</td><td>添加键，字段，值</td></tr><tr><td>hget 键 字段</td><td>通过键，字段得到值</td></tr><tr><td>hmset 键 字段 值 字段 值</td><td>multiply多个，一次添加多个字段和值</td></tr><tr><td>hmget 键 字段 字段</td><td>通过键，获取多个字段和值</td></tr><tr><td>hdel 键 字段 字段</td><td>删除一个或多个字段的值</td></tr><tr><td>hgetall 键</td><td>得到这个键下所有的字段和值</td></tr><tr><td>hlen 键</td><td>获取键的长度</td></tr><tr><td>hexists key key里的某个值</td><td>判断key里的某个值知否存在（1为true，0为false）</td></tr><tr><td>hkeys/hvals  key</td><td>获取key中所有的key/值</td></tr></tbody></table><h3 id="3、list"><a href="#3、list" class="headerlink" title="3、list"></a>3、list</h3><p><img src="https://i.loli.net/2021/09/13/lSxmPtqgjvXVwH7.png" alt="image-20210913185237622"></p><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span>特点</span><span class="token code keyword">    1. 在Redis中，List类型是按照插入顺序排序的字符串链表。(可以左右操作)</span><span class="token code keyword">    2. 有序(插入顺序),有索引,可重复</span><span class="token code keyword">    3. 如果该键并不存在，Redis将为该键创建一个新的链表。与此相反，如果链表中所有的元素均被移除，那么该键也将会被从数据库中删除</span><span class="token code keyword">    4. List中可以包含的最大元素数量是4G个</span><span class="token title important"><span class="token punctuation">#</span> 常用命令</span><span class="token list punctuation">1.</span> 增<span class="token code keyword">        1. lpush key value1[value2...] (left : addFirst)</span><span class="token code keyword">        2. rpush key value1[value2...] (right : addLast)</span><span class="token list punctuation">2.</span> 查<span class="token code keyword">        1. lrange key start end (闭区间 : 两边都包括)</span><span class="token code keyword">        2. lrange key 0 -1  (查询所有)</span><span class="token code keyword">        3. lindex key index  (索引 : 0基  左边第一个0, 右边第一个索引-1)</span><span class="token list punctuation">3.</span> 删<span class="token code keyword">        1. lpop key 从左边删除一个</span><span class="token code keyword">        2. rpop key 从右边删除一个</span></code></pre><table><thead><tr><th>命令</th><th>行为</th></tr></thead><tbody><tr><td>lpush 键 元素 元素</td><td>left 从左边向指定的键中添加1个或多个元素，返回列表中元素的个数</td></tr><tr><td>rpush 键 元素 元素</td><td>right 从右边向指定的键中添加1个或多个元素</td></tr><tr><td>lpop 键</td><td>从左边删除一个元素，返回被删除的元素</td></tr><tr><td>rpop 键</td><td>从右边删除一个元素，返回被删除的元素</td></tr><tr><td>lrange 键 开始 结束</td><td>得到键中指定范围的元素的数据<br>每个元素都有一个索引号，从左向右0<del>n<br>从右向左索引号：-1</del>-(n+1)，每个元素有2个索引号<br>如果要取出整个列表中所有的元素，索引号应该是：0~-1</td></tr><tr><td>llen 键</td><td>获取列表的长度</td></tr><tr><td>lindex key index</td><td>获取指定索引位置的值</td></tr><tr><td>lrem key n value</td><td>删除key对应的value中n个值<br>（lrem list03 2 3        删除list03中的2个值为3的元素。）</td></tr></tbody></table><h3 id="4、set"><a href="#4、set" class="headerlink" title="4、set"></a>4、set</h3><p><img src="https://i.loli.net/2021/09/13/olH7nmYhMT49jzP.png" alt="image-20210913185853208"></p><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span>特点</span><span class="token code keyword">       1. 无序,无索引, 不可重复</span><span class="token code keyword">    2. Set可包含的最大元素数量是4G</span><span class="token title important"><span class="token punctuation">#</span> 常用命令</span><span class="token list punctuation">1.</span> 增<span class="token code keyword">        1. sadd key value[value2...]</span><span class="token list punctuation">2.</span> 查<span class="token code keyword">        1. smembers key(查询所有value)</span><span class="token code keyword">        2. scard key(查询value的数量)</span><span class="token code keyword">        3. sismember key value (判断指定的元素是否存在，存在返回1，否则返回0)</span><span class="token list punctuation">3.</span> 删<span class="token code keyword">        1. spop key : 随机删除</span><span class="token code keyword">        2. srem key members[member1,member2...] : 删除指定元素</span></code></pre><table><thead><tr><th>命令</th><th>行为</th></tr></thead><tbody><tr><td>sadd 键 元素 元素</td><td>向一个键中添加1个或多个元素</td></tr><tr><td>smembers 键</td><td>得到这个集合中所有的元素</td></tr><tr><td>sismember 键 元素</td><td>判断指定的元素在集合中是否存在，存在返回1，不存在返回0</td></tr><tr><td>srem 键 元素 元素</td><td>通过键删除一个或多个元素</td></tr><tr><td>srandmember key 整数n</td><td>从key集合中随机获取出n个元素</td></tr><tr><td>scard 键</td><td>获取集合中的元素个数</td></tr></tbody></table><h3 id="5、zset"><a href="#5、zset" class="headerlink" title="5、zset"></a>5、zset</h3><p><img src="https://i.loli.net/2021/09/13/lByFZQU5AjmwJis.png" alt="image-20210913190325458"></p><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span>特点</span><span class="token code keyword">    1. 每个元素都会关联一个分数</span><span class="token code keyword">    2. 排序(按score大小排序) , 支持左右索引</span><span class="token code keyword">    2. 一个元素(score,value) 其中score可重复,value不可重复</span><span class="token code keyword">    3. 应用 : 排行版</span><span class="token title important"><span class="token punctuation">#</span>常用命令</span><span class="token list punctuation">1.</span> 增<span class="token code keyword">        1. zadd key score1 member1[score2 member2...]</span><span class="token list punctuation">2.</span> 查<span class="token code keyword">        1. zcard key (统计数量)</span><span class="token code keyword">        2. zrange key start stop [withscores]    -> 范围查询</span><span class="token code keyword">        3. zrevrange key start stop[withscores]  (reverse 反转)</span><span class="token list punctuation">3.</span> 删<span class="token code keyword">        1. zrem key member[member2...]    </span></code></pre><table><thead><tr><th><strong>命令</strong></th><th><strong>行为</strong></th></tr></thead><tbody><tr><td><strong>zadd</strong> <strong>键</strong> <strong>分数</strong> <strong>值</strong> <strong>分数</strong> <strong>值</strong></td><td>添加1个或多个元素，每个元素都有一个分数</td></tr><tr><td><strong>zrange</strong> <strong>键</strong> <strong>开始索引</strong> <strong>结束索引</strong></td><td>获取指定范围的元素，得到所有的元素，索引是0到-1</td></tr><tr><td><strong>zrem 键 值 值</strong></td><td>删除一个或多个值</td></tr><tr><td><strong>zcard</strong> <strong>键</strong></td><td>得到元素个数</td></tr><tr><td><strong>zrank</strong> <strong>键</strong> <strong>值</strong></td><td>得到元素的索引号</td></tr><tr><td><strong>zscore 键 值</strong></td><td>得到元素的分数</td></tr><tr><td>zrangebyscore key 开始score 结束score</td><td>查找分数从开始score到结束score的value</td></tr></tbody></table><pre class=" language-markdown"><code class="language-markdown"><span class="token code keyword">    zcard/zcount key score区间/zrank key values值/zscore key 对应值</span>    <span class="token code keyword">    zcard zet01            获取zet01键的值的数量</span><span class="token code keyword">    zcount zet01 60 80        统计60分到80分的值的数量</span><span class="token code keyword">    zrank zet01 v4            获取值为v4的下标</span><span class="token code keyword">    zscore zet01 v4            获取值为v4的分数</span></code></pre><h3 id="6、key的命令（通用命令）"><a href="#6、key的命令（通用命令）" class="headerlink" title="6、key的命令（通用命令）"></a>6、key的命令（通用命令）</h3><table><thead><tr><th>keys *</th><th>查看当前库所有key   (匹配：keys *1)，可以用？或者 * 模糊匹配</th></tr></thead><tbody><tr><td>exists key</td><td>判断某个key是否存在</td></tr><tr><td>type key</td><td>查看你的key是什么类型</td></tr><tr><td>del key</td><td>删除指定的key数据</td></tr><tr><td>expire key 10</td><td>10秒钟：为给定的key设置过期时间</td></tr><tr><td>ttl key</td><td>查看还有多少秒过期，-1表示永不过期，-2表示已过期</td></tr><tr><td>select</td><td>命令切换数据库</td></tr><tr><td>dbsize</td><td>查看当前数据库的key的数量</td></tr><tr><td>flushdb</td><td>清空当前库</td></tr><tr><td>flushall</td><td>通杀全部库</td></tr></tbody></table><h2 id="3、Redis的持久化"><a href="#3、Redis的持久化" class="headerlink" title="3、Redis的持久化"></a>3、Redis的持久化</h2><h3 id="1、持久化简要"><a href="#1、持久化简要" class="headerlink" title="1、持久化简要"></a>1、持久化简要</h3><blockquote><p>mysql运行时数据在内存中,但是事务一旦提交,就会保存到硬盘上</p><p>redis数据库运行时数据主要在内存中,也会保存到硬盘上</p></blockquote><p><strong>问：把客户端和服务端都关闭了，再重新开启服务器和客户端，数据会不会丢失？</strong></p><pre><code>如果redis不能持久化, 数据都在内存中,断电数据就销毁.如果redis能够持久化, 数据在硬盘中,重启数据就会恢复.</code></pre><p><strong>什么是持久化：</strong></p><blockquote><p>概念：将内存中数据，写在硬盘文件上。服务器关闭，电脑重启数据也不会丢失。</p></blockquote><p><strong>Redis持久化的方式：</strong></p><blockquote><ol><li>RDB：Redis DataBase 默认的持久化方式，以二进制的方式将数据写入文件中。每隔一段时间写入一次。</li><li>AOF：Append Only File 以文本文件的方式记录用户的每次操作，数据还原时候，读取AOF文件，模拟用户的操作，将数据还原。</li></ol></blockquote><p><strong>RDB持久化机制</strong></p><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 优点</span><span class="token list punctuation">1.</span> 方便备份与恢复<span class="token code keyword">        整个Redis数据库将只包含一个文件，默认是dump.rdb，这对于文件备份和恢复而言是非常完美的。因为我们可以非常轻松的将一个单独的文件压缩后再转移到其它存储介质上。一旦系统出现灾难性故障，我们可以非常容易的进行恢复。</span><span class="token list punctuation">2.</span> 性能最大化<span class="token code keyword">        对于Redis的服务进程而言，在开始持久化时，它唯一需要做的只是分叉出子进程，由子进程完成这些持久化的工作，这样就可以极大的避免服务进程执行IO操作了。</span><span class="token list punctuation">3.</span> 启动效率更高<span class="token code keyword">        相比于AOF机制，如果数据集很大，RDB的启动效率会更高</span><span class="token title important"><span class="token punctuation">#</span>缺点</span><span class="token list punctuation">1.</span> 不能完全避免数据丢失<span class="token code keyword">        因为RDB是每隔一段时间写入数据，所以系统一旦在定时持久化之前出现宕机现象，此前没有来得及写入磁盘的数据都将丢失。</span><span class="token list punctuation">2.</span> 会导致服务器暂停的现象<span class="token code keyword">        由于RDB是通过子进程来协助完成数据持久化工作的，因此当数据集较大时，可能会导致整个服务器停止服务几百毫秒，甚至是1秒钟。</span></code></pre><h3 id="2、RDB持久化"><a href="#2、RDB持久化" class="headerlink" title="2、RDB持久化"></a>2、RDB持久化</h3><p>在redis.windows.conf配置文件中的SNAPSHOTTING中有如下说明：</p><table><thead><tr><th><strong>语法</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>save &lt;时间间隔&gt; &lt;修改键数&gt;</strong></td><td>过多久(单位是秒)，修改了多少个键(增删改)</td></tr></tbody></table><pre><code> 如下面配置的是RDB方式数据持久化时机，必须两个条件都满足的情况下才进行持久化的操作：</code></pre><table><thead><tr><th><strong>关键字</strong></th><th><strong>时间(秒)</strong></th><th><strong>修改键数</strong></th><th><strong>解释</strong></th></tr></thead><tbody><tr><td><strong>save</strong></td><td><strong>900</strong></td><td><strong>1</strong></td><td>到了15分钟修改了1个键</td></tr><tr><td><strong>save</strong></td><td><strong>300</strong></td><td><strong>10</strong></td><td>到了5分钟修改了10个键</td></tr><tr><td><strong>save</strong></td><td><strong>60</strong></td><td><strong>10000</strong></td><td>到了1分钟，修改了1万个键</td></tr></tbody></table><p><img src="https://i.loli.net/2021/09/13/hXpJBNblqAiC2Vf.png" alt="image-20210913193731531"></p><h4 id="1、原理"><a href="#1、原理" class="headerlink" title="1、原理"></a>1、原理</h4><pre class=" language-markdown"><code class="language-markdown"><span class="token list punctuation">1.</span> 默认的持久化方式（自动开启）<span class="token list punctuation">2.</span> 以二级制方式将数据写入文件中（dump.rdb）<span class="token list punctuation">3.</span> 每隔一段时间写入一次<span class="token list punctuation">4.</span> 每次会将数据库中的数据全部重新写入（从内存中使用fork出的线程直接读取数据，在保存到文件中）。</code></pre><h4 id="2、修改conf文件，改变快照（snapshot）配置。"><a href="#2、修改conf文件，改变快照（snapshot）配置。" class="headerlink" title="2、修改conf文件，改变快照（snapshot）配置。"></a>2、修改conf文件，改变快照（snapshot）配置。</h4><blockquote><p>即改变dump.rdb文件生成时机</p></blockquote><p>redis.window.conf中snapshot中的配置</p><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#########</span> SNAPSHOTTING  <span class="token punctuation">#########</span></span>#<span class="token title important"><span class="token punctuation">#</span> Save the DB on disk:</span>#<span class="token title important"><span class="token punctuation">#</span> save &lt;seconds> &lt;changes></span>save 900 1save 300 10save 60 10000<span class="token title important"><span class="token punctuation">#</span> 如果保存出现错误，则停止数据库继续写入</span>stop-writes-on-bgsave-error yes<span class="token title important"><span class="token punctuation">#</span> 是否压缩</span>rdbcompression yes<span class="token title important"><span class="token punctuation">#</span> 是否检验错误</span>rdbchecksum yes<span class="token title important"><span class="token punctuation">#</span> 保存的文件的文件名</span>dbfilename dump.rdb<span class="token title important"><span class="token punctuation">#</span> 工作路径</span>dir ./</code></pre><h3 id="3、AOF持久化"><a href="#3、AOF持久化" class="headerlink" title="3、AOF持久化"></a>3、AOF持久化</h3><p><img src="https://i.loli.net/2021/09/13/rG7m94wqFQbEJlW.png" alt="image-20210913193745290"></p><h4 id="1、原理-1"><a href="#1、原理-1" class="headerlink" title="1、原理"></a>1、原理</h4><pre class=" language-markdown"><code class="language-markdown"><span class="token list punctuation">1.</span> 以文本的方式记录用户的每次操作（流水账）（和rdb有所不同，rdb每次保存全部数据，aof是基于原来的文件继续追加）<span class="token list punctuation">2.</span> 还原的时候，redis服务器读取aof文件，执行文件里的命令，将数据还原。</code></pre><h4 id="2、修改配置"><a href="#2、修改配置" class="headerlink" title="2、修改配置"></a>2、修改配置</h4><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">##############################</span> APPEND ONLY MODE <span class="token punctuation">###############################</span></span><span class="token title important"><span class="token punctuation">#</span> 开启aof 默认是no</span>appendonly yes<span class="token title important"><span class="token punctuation">#</span> 每执行一次就同步一次</span>appendfsync always<span class="token title important"><span class="token punctuation">#</span> appendfsync everysec   每秒同步一次</span><span class="token title important"><span class="token punctuation">#</span> appendfsync no        写入aof文件，不等待磁盘同步</span><span class="token title important"><span class="token punctuation">#</span> 在aof重写的过程中进行磁盘同步（磁盘同步会被阻塞）</span>no-appendfsync-on-rewrite no<span class="token title important"><span class="token punctuation">#</span> aof重写配置</span>auto-aof-rewrite-percentage 100auto-aof-rewrite-min-size 64mb</code></pre><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> AOF持久化机制优点</span><span class="token code keyword">        AOF包含一个格式清晰、易于理解的日志文件用于记录所有的修改操作。也可以通过该文件完成数据的重建。该机制可以带来更高的数据安全性，所有的操作都是异步完成的。</span><span class="token title important"><span class="token punctuation">#</span> AOF持久化机制缺点</span><span class="token code keyword">    1. 文件比RDB更大：对于相同数量的数据集而言，AOF文件通常要大于RDB文件。</span><span class="token code keyword">    2. 运行效率比RDB更慢：根据同步策略的不同，AOF在运行效率上往往会慢于RDB。</span></code></pre><table><thead><tr><th><strong>Redis中提供了3种AOF同步策略</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>每秒同步</strong></td><td>每过一秒中记录一次</td></tr><tr><td><strong>每修改同步</strong></td><td>每次修改(增删改)都会记录一次</td></tr><tr><td><strong>不同步</strong></td><td>不记录任何操作</td></tr></tbody></table><p>AOF持久化机制配置</p><p><strong>AOF默认是关闭的，首先需要开启AOF模式</strong></p><table><thead><tr><th><strong>参数配置</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>appendonly   no/yes</strong></td><td>默认是no，关闭。如果要打开，设置成yes。<br>如果打开的AOF，RDB中存储的数据读取不出来。</td></tr></tbody></table><p><strong>AOF持久化时机</strong></p><p>这三种策略只能选择其中一种</p><table><thead><tr><th><strong>关键字</strong></th><th><strong>持久化时机</strong></th><th><strong>解释</strong></th></tr></thead><tbody><tr><td><strong>appendfsync</strong></td><td><strong>everysec</strong></td><td>每秒记录</td></tr><tr><td><strong>appendfsync</strong></td><td><strong>always</strong></td><td>每修改记录</td></tr><tr><td><strong>appendfsync</strong></td><td><strong>no</strong></td><td>不记录</td></tr></tbody></table><p><img src="https://i.loli.net/2021/09/13/sl9nabqMXv7QdYw.png" alt="image-20210913200020634"></p><h3 id="4、AOF和RDB的区别"><a href="#4、AOF和RDB的区别" class="headerlink" title="4、AOF和RDB的区别"></a>4、AOF和RDB的区别</h3><p><img src="https://i.loli.net/2021/09/13/aLPmniR47WBbvhj.png" alt="image-20210913195925217"></p><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 从写的效率上看</span><span class="token code keyword">    1. redis数据量小，rdb效率高（rdb直接保存二进制数据）</span><span class="token code keyword">    2. rides数据量大的时候，aof效率高（aof是增量更新）</span>    <span class="token title important"><span class="token punctuation">#</span> 从读的效率上看</span><span class="token code keyword">    1. Rdb效率高，直接读取二进制</span><span class="token code keyword">    aof是读取命令，执行命令，相对较慢。</span>    <span class="token title important"><span class="token punctuation">#</span> 数据安全</span><span class="token code keyword">    1. aof 相对安全</span></code></pre><h2 id="4、Jedis的使用"><a href="#4、Jedis的使用" class="headerlink" title="4、Jedis的使用"></a>4、Jedis的使用</h2><h3 id="1、导包"><a href="#1、导包" class="headerlink" title="1、导包"></a>1、导包</h3><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>redis.clients<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jedis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.8.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h3 id="2-Jedis类常用方法"><a href="#2-Jedis类常用方法" class="headerlink" title="2 Jedis类常用方法"></a>2 Jedis类常用方法</h3><p>注：每个方法就是redis中的命令名，方法的参数就是命令的参数。</p><p>在每次访问Redis数据库的时候，都需要创建一个Jedis对象。每个Jedis对象似于JDBC中Connection对象，类似于mybatis中session对象。</p><table><thead><tr><th><strong>连接和关闭</strong></th><th><strong>功能</strong></th></tr></thead><tbody><tr><td><strong>new Jedis(host,   port)</strong></td><td>创建Jedis连接对象，参数：<br>host: 服务器地址<br>port：端口号6379</td></tr><tr><td><strong>void close()</strong></td><td>关闭连接</td></tr></tbody></table><table><thead><tr><th><strong>对string操作的方法</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>set(String key,String value)</strong></td><td>添加字符串类型的键和值</td></tr><tr><td><strong>String get(String key)</strong></td><td>通过键得到字符串的值</td></tr><tr><td><strong>del(String … keys)</strong></td><td>删除一个或多个键</td></tr></tbody></table><table><thead><tr><th><strong>对hash操作的方法</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>hset(String key,String field,String value)</strong></td><td>添加一个hash类型的键，字段和值</td></tr><tr><td><strong>Map&lt;String,String&gt; hgetall(String key)</strong></td><td>通过一个键得到所有的字段和值，返回Map</td></tr></tbody></table><table><thead><tr><th><strong>对list操作的方法</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>lpush(String key,String…values)</strong></td><td>从左边添加多个值到list中</td></tr><tr><td><strong>List&lt;String&gt; lrange(String key,long start,long end)</strong></td><td>通过键得到指定范围的元素</td></tr></tbody></table><table><thead><tr><th><strong>对set操作的方法</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>sadd(String key,String…values)</strong></td><td>添加一个或多个元素</td></tr><tr><td><strong>Set&lt;String&gt; smembers(String key)</strong></td><td>通过键得到集合所有的元素</td></tr></tbody></table><table><thead><tr><th>对zset操作的方法</th><th>说明</th></tr></thead><tbody><tr><td><strong>zadd(String key, double score, String member)</strong></td><td>添加一个键，分数和值</td></tr><tr><td><strong>Set&lt;String&gt; zrange(String key, long start, long end)</strong></td><td>查询一个指定范围的元素</td></tr></tbody></table><h3 id="3、小案例"><a href="#3、小案例" class="headerlink" title="3、小案例"></a>3、小案例</h3><p><strong>操作步骤：</strong></p><ol><li>创建Jedis对象，指定服务器地址和端口号</li><li>向服务器写入</li><li>从服务器中读取上面的数据打印输出</li><li>关闭Jedis对象，释放资源</li><li>通过客户端查看数据库中是否有数据</li></ol><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1. 创建连接</span>        String host <span class="token operator">=</span> <span class="token string">"127.0.0.1"</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> port <span class="token operator">=</span> <span class="token number">6379</span><span class="token punctuation">;</span>        Jedis jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2. 访问redis数据库</span>       jedis<span class="token punctuation">.</span><span class="token function">lpush</span><span class="token punctuation">(</span><span class="token string">"list"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"book"</span><span class="token punctuation">,</span> <span class="token string">"thinking in java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"gf"</span><span class="token punctuation">,</span> <span class="token string">"高圆圆"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Double<span class="token operator">></span> exam <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        exam<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"zs"</span><span class="token punctuation">,</span> <span class="token number">15.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        exam<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"ls"</span><span class="token punctuation">,</span> <span class="token number">7.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        exam<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"ww"</span><span class="token punctuation">,</span> <span class="token number">22.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jedis<span class="token punctuation">.</span><span class="token function">zadd</span><span class="token punctuation">(</span><span class="token string">"exam"</span><span class="token punctuation">,</span> exam<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//3. 关闭连接</span>        jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1. 创建连接</span>        String host <span class="token operator">=</span> <span class="token string">"127.0.0.1"</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> port <span class="token operator">=</span> <span class="token number">6379</span><span class="token punctuation">;</span>        Jedis jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2. 访问redis数据库</span>        String gf <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"gf"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>gf<span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">lrange</span><span class="token punctuation">(</span><span class="token string">"list"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3. 关闭连接</span>        jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="5、Jedis连接池的使用"><a href="#5、Jedis连接池的使用" class="headerlink" title="5、Jedis连接池的使用"></a>5、Jedis连接池的使用</h2><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 连接池的作用</span><span class="token list punctuation">1.</span> 问题: 在服务端,如果频繁的创建和销毁连接, 非常消耗性能<span class="token list punctuation">2.</span> 解决: 连接池<span class="token code keyword">    1). 将多个连接放在一个容器进行统一管理</span><span class="token code keyword">    2). 用的时候取</span><span class="token code keyword">    3). 用完的时候还回去</span></code></pre><h3 id="1、-Jedis连接池API"><a href="#1、-Jedis连接池API" class="headerlink" title="1、 Jedis连接池API"></a>1、 Jedis连接池API</h3><table><thead><tr><th><strong>JedisPoolConfig配置类</strong></th><th><strong>功能说明</strong></th></tr></thead><tbody><tr><td><strong>JedisPoolConfig()</strong></td><td>创建一个配置对象</td></tr><tr><td><strong>void setMaxTotal()</strong></td><td>设置连接池的最大连接数</td></tr><tr><td><strong>void setMaxWaitMillis()</strong></td><td>设置最长等待时间</td></tr></tbody></table><table><thead><tr><th><strong>JedisPool连接池类</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>JedisPool(配置对象,服务器名,端口号)</strong></td><td>创建一个连接池，参数：<br>1. 上面的配置对象<br>2. 服务器名<br>3. 端口号</td></tr><tr><td><strong>Jedis getResource()</strong></td><td>从连接池中得到一个连接对象Jedis</td></tr></tbody></table><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1. 创建连接池</span>        JedisPoolConfig config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JedisPoolConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        config<span class="token punctuation">.</span><span class="token function">setMaxTotal</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 最大连接数: 5</span>        config<span class="token punctuation">.</span><span class="token function">setMaxWaitMillis</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 最长等待时间: 2000ms</span>        String host <span class="token operator">=</span> <span class="token string">"127.0.0.1"</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> port <span class="token operator">=</span> <span class="token number">6379</span><span class="token punctuation">;</span>        JedisPool pool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JedisPool</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span> host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2. 获取连接</span>        Jedis jedis <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3. 访问redis数据库</span>        String gf <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"gf"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>gf<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4. 将连接还给连接池(释放连接)</span>        jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="2、jedis连接池工具类"><a href="#2、jedis连接池工具类" class="headerlink" title="2、jedis连接池工具类"></a>2、jedis连接池工具类</h3><p><strong>redis.properties配置文件</strong></p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># 主机名</span><span class="token attr-name">host</span><span class="token punctuation">=</span><span class="token attr-value">localhost</span><span class="token comment" spellcheck="true"># 端口号</span><span class="token attr-name">port</span><span class="token punctuation">=</span><span class="token attr-value">6379</span><span class="token comment" spellcheck="true"># 最大连接数</span><span class="token attr-name">maxTotal</span><span class="token punctuation">=</span><span class="token attr-value">20</span><span class="token comment" spellcheck="true"># 最长等待时间</span><span class="token attr-name">maxWaitMillis</span><span class="token punctuation">=</span><span class="token attr-value">3000</span></code></pre><p><strong>JedisUtil.java</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>jedis<span class="token punctuation">;</span><span class="token keyword">import</span> redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span>Jedis<span class="token punctuation">;</span><span class="token keyword">import</span> redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span>JedisPool<span class="token punctuation">;</span><span class="token keyword">import</span> redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span>JedisPoolConfig<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ResourceBundle<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JedisUtil</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> JedisPool pool<span class="token punctuation">;</span>    <span class="token keyword">static</span><span class="token punctuation">{</span>        ResourceBundle bundle <span class="token operator">=</span> ResourceBundle<span class="token punctuation">.</span><span class="token function">getBundle</span><span class="token punctuation">(</span><span class="token string">"redis"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxTotal <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>bundle<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"maxTotal"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxWaitMillis <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>bundle<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"maxWaitMillis"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> port <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>bundle<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"port"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String host <span class="token operator">=</span> bundle<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"host"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//1. 创建连接池</span>        JedisPoolConfig config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JedisPoolConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        config<span class="token punctuation">.</span><span class="token function">setMaxTotal</span><span class="token punctuation">(</span>maxTotal<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 最大连接数: 5</span>        config<span class="token punctuation">.</span><span class="token function">setMaxWaitMillis</span><span class="token punctuation">(</span>maxWaitMillis<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 最长等待时间: 2000ms</span>        pool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JedisPool</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span> host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Jedis <span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> pool<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method03</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Jedis jedis <span class="token operator">=</span> JedisUtil<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String s <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"gf"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring01</title>
      <link href="/2020/04/28/Spring01/"/>
      <url>/2020/04/28/Spring01/</url>
      
        <content type="html"><![CDATA[<h1 id="1、Spring01"><a href="#1、Spring01" class="headerlink" title="1、Spring01"></a>1、Spring01</h1><h2 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h2><h3 id="1、Spring核心"><a href="#1、Spring核心" class="headerlink" title="1、Spring核心"></a>1、Spring核心</h3><p>Spring为企业级开发提供了丰富的功能，这些功能的底层都依赖于它的两个核心特性：</p><ul><li>控制反转（Inversion of Control，<strong>IOC</strong>）</li><li>面向切面编程（aspect-oriented programming,<strong>AOP</strong>）</li></ul><h3 id="2、Spring的体系结构"><a href="#2、Spring的体系结构" class="headerlink" title="2、Spring的体系结构"></a>2、Spring的体系结构</h3><p><img src="https://i.loli.net/2021/09/25/S2LWjJFmvERz3Gt.png" alt="image-20210925194723838"></p><h2 id="2、IOC简介（控制反转）"><a href="#2、IOC简介（控制反转）" class="headerlink" title="2、IOC简介（控制反转）"></a>2、IOC简介（控制反转）</h2><blockquote><p>工厂模式+配置文件+反射</p></blockquote><h3 id="1、IOC概念"><a href="#1、IOC概念" class="headerlink" title="1、IOC概念"></a>1、IOC概念</h3><pre class=" language-java"><code class="language-java"># IOC概念<span class="token number">0</span><span class="token punctuation">.</span> IoC 全称为 Inversion of Control，翻译为 “控制反转”。<span class="token number">1</span><span class="token punctuation">.</span> 控制什么<span class="token operator">?</span>        控制对象的创建和销毁<span class="token number">2</span><span class="token punctuation">.</span> 反转什么<span class="token operator">?</span>        对象的控制权（创建和销毁）从主动管理转为交给Spring的容器管理<span class="token number">3</span><span class="token punctuation">.</span> Spring的容器        Spring控制的资源全部放置在Spring容器中，该容器也称为IoC容器<span class="token number">4</span><span class="token punctuation">.</span> IOC的思想    <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span> 面向接口编程 <span class="token punctuation">(</span>多态<span class="token punctuation">)</span>        接口类型 变量 <span class="token operator">=</span> 接口实现类对象    <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span> 反射 <span class="token operator">+</span> 配置文件        <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span> 工厂模式<span class="token operator">:</span> 内置容器<span class="token punctuation">,</span>管理对象的创建和销毁</code></pre><p><strong>IOC的简易原理：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BeanFactory</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//1、事先存储容器</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//2、加载配置文件</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        ResourceBundle bundle <span class="token operator">=</span> ResourceBundle<span class="token punctuation">.</span><span class="token function">getBundle</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Enumeration<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> enumeration <span class="token operator">=</span> bundle<span class="token punctuation">.</span><span class="token function">getKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>enumeration<span class="token punctuation">.</span><span class="token function">hasMoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                String key <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> enumeration<span class="token punctuation">.</span><span class="token function">nextElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                String value <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> bundle<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//3、实例化bean</span>                Object beanObject <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//4、放入容器</span>                map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>beanObject<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//5、公共获得bean</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Object <span class="token function">getBean</span><span class="token punctuation">(</span>String calssName<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>calssName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1. 主动创建对象</span><span class="token comment" spellcheck="true">//        UserDaoImpl userDao = new UserDaoImpl();</span>        <span class="token comment" spellcheck="true">//2. 面向接口编程 : 解耦</span><span class="token comment" spellcheck="true">//        UserDao userDao = new UserDaoImpl();</span>        <span class="token comment" spellcheck="true">//3. 反射 + 配置文件 : 进一步解耦</span><span class="token comment" spellcheck="true">//        ResourceBundle bundle = ResourceBundle.getBundle("data");</span><span class="token comment" spellcheck="true">//        String userDaoClassName = bundle.getString("userDao");</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//        Class&lt;?> clazz = Class.forName(userDaoClassName);</span><span class="token comment" spellcheck="true">//        UserDao userDao = (UserDao) clazz.newInstance();</span>        <span class="token comment" spellcheck="true">//4. 工厂模式 : 统一管理bean的创建</span>        UserDao userDao <span class="token operator">=</span> <span class="token punctuation">(</span>UserDao<span class="token punctuation">)</span> BeanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"userDao"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userDao<span class="token punctuation">.</span><span class="token function">addUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://i.loli.net/2021/09/25/ugRnxU4SMVH3KOo.png" alt="image-20210925200034471"></p><h3 id="2、入门案例"><a href="#2、入门案例" class="headerlink" title="2、入门案例"></a>2、入门案例</h3><ol><li><p>导包</p><pre class=" language-xml"><code class="language-xml">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.9.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre></li><li><p>service包代码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//业务方法  </span>    <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"user service running..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>resources下applicationContext.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans        https://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 1.创建spring控制的资源            1). id 是这个bean的标识, 可以自定义,但是最好见名知意            2). class 指定实现类的全限定名    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.service.impl.UserServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre></li><li><p>测试</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//2.加载配置文件</span>        ApplicationContext ctx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.获取资源: 通过配置文件中的id</span>        UserService userService <span class="token operator">=</span> <span class="token punctuation">(</span>UserService<span class="token punctuation">)</span> ctx<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"userService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userService<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol><h4 id="重点类："><a href="#重点类：" class="headerlink" title="重点类："></a><strong>重点类：</strong></h4><blockquote><p>ApplicationContext  &amp;  ClassPathXmlApplicationContext</p></blockquote><p>1.ApplicationContext是一个接口，提供了访问spring容器的API</p><p>2.ClassPathXmlApplicationContext是一个类，实现了上述功能</p><p>3.ApplicationContext的顶层接口是BeanFactory</p><p>4.BeanFactory定义了bean相关的最基本操作</p><p>5.ApplicationContext在BeanFactory基础上追加了若干新功能</p><p><img src="https://i.loli.net/2021/09/25/ClVj2x3iMX16Pmo.png" alt="1591021082290"></p><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> IOC入门案例原理</span><span class="token code keyword">       0. IOC理念: 控制反转(不再主动创建对象,而是从工厂的IOC容器中获取对象)</span><span class="token code keyword">                好处: 解耦(方案切换,无需修改代码,只需修改配置文件即可)</span><span class="token code keyword">       1.  ApplicationContext 是一个工厂类 (BeanFactory的子接口)</span><span class="token code keyword">            1). ClassPathXmlApplicationContext 实现类</span><span class="token code keyword">                 用于解析xml配置文件,将xml中配置的bean加载到ioc容器中</span><span class="token code keyword">                 map.put("userService",new UserServiceImpl())</span><span class="token code keyword">            2). AnnotationConfigApplicationContext 实现类</span><span class="token code keyword">                用于解析注解配置</span><span class="token code keyword">       2.  从工厂的ioc容器中获取bean</span>   <span class="token title important"><span class="token punctuation">#</span> 备注</span><span class="token code keyword">    1. 配置</span><span class="token code keyword">        1). properties , 用Properties类/ResourceBundle类解析</span><span class="token code keyword">        2). xml , 用类似于dom4j解析</span><span class="token code keyword">        3). 注解  , 用反射解析</span><span class="token code keyword">     IOC入门案例制作(含义)</span><span class="token code keyword">        1. 导入spring的jar包(坐标)</span><span class="token code keyword">        2. 编写一个接口</span><span class="token code keyword">            为了解耦,让测试代码跟实现类解耦</span><span class="token code keyword">        3. 编写接口的实现类</span><span class="token code keyword">        4. 配置spring的配置文件xml</span><span class="token code keyword">            让实现类被IOC容器所加载</span><span class="token code keyword">        5. 编写测试代码</span><span class="token code keyword">            从IOC容器中获取对象,调用方法</span></code></pre><h2 id="3、IOC配置（XML配置）"><a href="#3、IOC配置（XML配置）" class="headerlink" title="3、IOC配置（XML配置）"></a>3、IOC配置（XML配置）</h2><h3 id="1、bean"><a href="#1、bean" class="headerlink" title="1、bean"></a>1、bean</h3><h4 id="1、基本格式"><a href="#1、基本格式" class="headerlink" title="1、基本格式"></a>1、基本格式</h4><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>beanId<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>beanName1,beanName2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ClassName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><h4 id="2、基本属性"><a href="#2、基本属性" class="headerlink" title="2、基本属性"></a>2、基本属性</h4><pre class=" language-markdown"><code class="language-markdown"><span class="token list punctuation">1.</span> id：bean的名称，通过id值获取bean<span class="token list punctuation">2.</span> class：bean的类型 (全限定名)<span class="token list punctuation">3.</span> name：bean的名称，可以通过name值获取bean，用于多人配合时给bean起别名<span class="token comment" spellcheck="true">&lt;!-- name和id的作用相似, 我们也可以通过name获取bean --></span></code></pre><h3 id="2、bean属性scope"><a href="#2、bean属性scope" class="headerlink" title="2、bean属性scope"></a>2、bean属性scope</h3><h4 id="1、格式"><a href="#1、格式" class="headerlink" title="1、格式"></a>1、格式</h4><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>singleton<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><h4 id="2、取值"><a href="#2、取值" class="headerlink" title="2、取值"></a>2、取值</h4><ul><li>singleton：设定创建出的对象保存在spring容器中，是一个单例的对象</li><li>prototype：设定创建出的对象保存在spring容器中，是一个非单例的对象</li><li>request、session、application、 websocket ：设定创建出的对象放置在web容器对应的位置 (了解)</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--              4. scope : 范围                1). singleton 单例 (默认)                    饿汉单例 : 还没从ioc容器中获取就已创建 (饿汉效率高,占内存)                2). prototype 多例                    懒汉多例 (懒汉效率低,不占内存)               运用 :                    1). 单例 : 一个类的多个对象没有差异                        地铁买票系统  (连接池)                    2). 多例 : 一个类的多个对象有差异                        学生 (好多...)    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userService<span class="token punctuation">"</span></span>          <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userService2,userService3<span class="token punctuation">"</span></span>          <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.spring.service.impl.UserServiceImpl<span class="token punctuation">"</span></span>          <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prototype<span class="token punctuation">"</span></span>    <span class="token punctuation">/></span></span></code></pre><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> singleton 和 prototype 区别</span><span class="token code keyword">    第一 singleton 单实例，prototype 多实例</span>    <span class="token code keyword">    第二 设置 scope 值是 singleton 时候，加载 spring 配置文件时候就会创建单实例对象</span><span class="token code keyword">        设置 scope 值是 prototype 时候，不是在加载 spring 配置文件时候创建 对象，在调用</span><span class="token code keyword">        getBean 方法时候创建多实例对象</span></code></pre><h3 id="3、bean生命周期"><a href="#3、bean生命周期" class="headerlink" title="3、bean生命周期"></a>3、bean生命周期</h3><blockquote><p>init-method，destroy-method</p><p>作用：定义bean对象在初始化或销毁时完成的工作</p></blockquote><pre class=" language-xml"><code class="language-xml">&lt;bean init-method="init" destroy-method="destroy><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><p>注意事项：</p><ul><li>当scope=“singleton”时，spring容器中有且仅有一个对象，init方法在创建容器时仅执行一次</li><li>当scope=“prototype”时，spring容器要创建同一类型的多个对象，init方法在每个对象创建时均执行一次</li><li>当scope=“singleton”时，关闭容器会导致bean实例的销毁，调用destroy方法一次</li><li>当scope=“prototype”时，对象的销毁由垃圾回收机制gc()控制，destroy方法将不会被执行</li></ul><p><strong>代码演示:</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">UserServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"constructor run"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//初始化方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"init run"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//销毁方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"destroy run"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"user service running..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userService<span class="token punctuation">"</span></span>      <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.spring.service.impl.UserServiceImpl<span class="token punctuation">"</span></span>      <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prototype<span class="token punctuation">"</span></span>      <span class="token attr-name">init-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>init<span class="token punctuation">"</span></span>      <span class="token attr-name">destroy-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>destroy<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><p><strong>测试：</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test03</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//从ioc容器中获取bean</span>      ApplicationContext ctx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      UserService userService1 <span class="token operator">=</span> <span class="token punctuation">(</span>UserService<span class="token punctuation">)</span> ctx<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"userService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      UserService userService2 <span class="token operator">=</span> <span class="token punctuation">(</span>UserService<span class="token punctuation">)</span> ctx<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"userService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//手动关闭容器(开发时不会这么干)</span>      ClassPathXmlApplicationContext cx <span class="token operator">=</span> <span class="token punctuation">(</span>ClassPathXmlApplicationContext<span class="token punctuation">)</span> ctx<span class="token punctuation">;</span>      cx<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><h3 id="4、bean对象创建方式"><a href="#4、bean对象创建方式" class="headerlink" title="4、bean对象创建方式"></a>4、bean对象创建方式</h3><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> bean对象的创建方式</span><span class="token list punctuation">1.</span> 直接配置<span class="token code keyword">    &lt;bean id="userService" class="com.itheima.service.impl.UserServiceImpl"/></span><span class="token code keyword">        场景: 在配置的时候,知道实现类的全限定名 (一般自己写bean)</span><span class="token code keyword">        底层原理: 空参构造</span><span class="token list punctuation">2.</span> 静态工厂 : 创建对象的方法是静态    <span class="token list punctuation">3.</span> 实例工厂 : 创建对象的方法是非静态的<span class="token code keyword">        场景: 像mybatis的dao层接口实现类,由于底层是动态代理,实现类是运行过程中创建的,没有类名,所以只能用工厂方式创建其实例</span></code></pre><h4 id="1、静态工厂"><a href="#1、静态工厂" class="headerlink" title="1、静态工厂"></a>1、静态工厂</h4><blockquote><p>factory-method</p><p>取值：工厂bean中用于获取对象的静态方法名(无参方法)</p><p>调用工厂类的静态方法</p></blockquote><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>FactoryClassName<span class="token punctuation">"</span></span> <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>factoryMethodName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><p><strong>代码演示：</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//静态工厂</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StaticFactory</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//静态方法可以直接用类名调用</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> UserService <span class="token function">getBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">UserServiceImpl2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>配置文件：</p><pre class=" language-xml"><code class="language-xml"> <span class="token comment" spellcheck="true">&lt;!--          静态工厂 :            1). 创建对象的方法是静态的            2). 底层原理               Class clazz =  Class.forName("com.itheima.spring.factory.StaticFactory");               Method getBean = clazz.getMethod("getBean");               UserService service = (UserService) getBean.invoke(null);                iocMap.put("userService2",service);    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userService2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.spring.factory.StaticFactory<span class="token punctuation">"</span></span>        <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getBean<span class="token punctuation">"</span></span>    <span class="token punctuation">/></span></span></code></pre><h4 id="2、实例工厂"><a href="#2、实例工厂" class="headerlink" title="2、实例工厂"></a>2、实例工厂</h4><blockquote><p>factory-bean，factory-method</p></blockquote><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>if<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.spring.factory.InstanceFactory<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    //创建工厂实例    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userService<span class="token punctuation">"</span></span> <span class="token attr-name">factory-bean</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>if<span class="token punctuation">"</span></span> <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getBean<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  //通过工厂实例调用方法</code></pre><p><strong>代码演示：</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//实例工厂</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InstanceFactory</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//非静态方法需要依赖对象调用</span>    <span class="token keyword">public</span>  UserService <span class="token function">getBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">UserServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>配置文件：</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--        实例工厂:            1). 创建对象的方法是非静态            2). 底层原理                第一个bean                     Class clazz =  Class.forName("com.itheima.spring.factory.StaticFactory");                     InstanceFactory factory = clazz.newInstance(); //空参构造创建实例                     iocMap.put("if",factory);                第二个bean                     InstanceFactory factory = iocMap.get("if");                     Class clazz = factory.getClass();                     Method getBean = clazz.getMethod("getBean");                    UserService service = (UserService) getBean.invoke(factory);                    iocMap.put("userService",service);    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>if<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.spring.factory.InstanceFactory<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userService<span class="token punctuation">"</span></span> <span class="token attr-name">factory-bean</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>if<span class="token punctuation">"</span></span> <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getBean<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><p><strong>测试类：</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test06</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//从ioc容器中获取bean</span>      ApplicationContext ctx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      UserService userService <span class="token operator">=</span> <span class="token punctuation">(</span>UserService<span class="token punctuation">)</span> ctx<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"userService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      userService<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><h3 id="5、DI-依赖注入"><a href="#5、DI-依赖注入" class="headerlink" title="5、DI 依赖注入"></a>5、DI 依赖注入</h3><p>IoC与DI是同一件事站在不同角度看待问题</p><ul><li>IoC（Inversion Of Control）控制翻转，Spring反向控制应用程序所需要使用的外部资源</li><li>DI（Dependency Injection）依赖注入，应用程序运行依赖的资源由Spring为其提供，资源进入应用程序的方式称为注入</li></ul><h4 id="1、set注入"><a href="#1、set注入" class="headerlink" title="1、set注入"></a>1、set注入</h4><blockquote><p>property</p><p>作用：使用set方法的形式为bean提供资源</p></blockquote><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--             TODO: set注入           原理:                 Class clazz = Class.forName("com.itheima.spring.service.impl.UserServiceImpl3")                 UserService service = clazz.newInstance();                   &lt;property name="name" value="zs"/>                     // 以下两行等价于 service.setName("zs")                Method setName = clazz.getMethod("setName",String.class);                setName.invoke(service,"zs")             要求:                 bean需要有空参  , 而且要有set方法             编写:                 1). property标签是bean的子标签                 2). name指定属性名(实际就是set方法名)                 3). value指定属性值 (只能是8大基本类型+String)                     ref指定引用类型 (reference)            --></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userDao<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.spring.dao.impl.UserDaoImpl<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userService3<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.spring.service.impl.UserServiceImpl3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>zs<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>18<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dao<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userDao<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><p>java类：</p><pre class=" language-java"><code class="language-java"># UserServiceImpl3类        <span class="token comment" spellcheck="true">// 必须要有get，set，空参构造</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl3</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>            <span class="token keyword">private</span> String name<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>        <span class="token keyword">private</span> UserDao dao<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h4 id="2、构造器注入"><a href="#2、构造器注入" class="headerlink" title="2、构造器注入"></a>2、构造器注入</h4><blockquote><p>constructor-arg</p><p>使用构造方法的形式为bean提供资源</p></blockquote><p>java类：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl4</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> UserDao dao<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">UserServiceImpl4</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">,</span> UserDao dao<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>dao <span class="token operator">=</span> dao<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"user service running444..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>        dao<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>xml：</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--             TODO: 构造器注入(了解)             原理:                 Class clazz = Class.forName("com.itheima.spring.service.impl.UserServiceImpl4")                 UserService service = clazz.newInstance();                       // 以下两行等价于 UserService service = new UserServiceImpl4("zs",18,userDao);                Constructor constructor = lazz.getConstructor(String.class,int.class,UserDao.class);                UserService service  = constructor.newInstance("zs",18,userDao);         --></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userService4<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.spring.service.impl.UserServiceImpl4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>zs<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>18<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dao<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userDao<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><p><strong>属性：</strong></p><pre class=" language-xml"><code class="language-xml">1. 格式1：&lt;constructor-arg name="argsName" value="argsValue /> name：对应bean中的构造方法所携带的参数名 value：设定非引用类型构造方法参数对应的值，不能与ref同时使用                                                                                2. 格式2：  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>arg-index<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>arg-type<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>beanId<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                                                                     ref：设定引用类型构造方法参数对应bean的id ，不能与value同时使用    type ：设定构造方法参数的类型，用于按类型匹配参数或进行类型校验    index ：设定构造方法参数的位置，用于按位置匹配参数，参数index值从0开始计数                                                  </code></pre><h4 id="3、集合类型数据注入"><a href="#3、集合类型数据注入" class="headerlink" title="3、集合类型数据注入"></a>3、集合类型数据注入</h4><ul><li><p>名称：array，list，set，map，props</p></li><li><p>类型：<strong>标签</strong></p></li><li><p>归属：property标签 或 constructor-arg标签</p></li><li><p>作用：注入集合数据类型属性</p></li></ul><p>(1)集合类型数据注入——list(掌握)</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>al<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>itheima<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>66666<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span></code></pre><p>(2)集合类型数据注入——props(掌握)</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>properties<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>props</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>itheima666<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>value<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>666666<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>props</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span></code></pre><p>(3)集合类型数据注入——array （了解）</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>arr<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>array</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>123456<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>66666<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>array</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span></code></pre><p>(4)集合类型数据注入——set（了解）</p><pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hs<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>itheima<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>66666<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span></code></pre><p>(5)集合类型数据注入——map（了解）</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hm<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>map</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>itheima66666<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>value<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>6666666666<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>map</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span></code></pre><p>原理：反射set方法</p><pre class=" language-markdown"><code class="language-markdown"> <span class="token title important"><span class="token punctuation">#</span> 集合类型数据注入</span><span class="token code keyword">       1. properties标签的name属性指定的是UserServiceImpl5中对应的属性名</span><span class="token code keyword">       2. properties的子标签</span><span class="token code keyword">           1). list : 声明该属性是List类型</span><span class="token code keyword">           2). props : 声明该属性是Properties类型</span><span class="token code keyword">           3). array : 声明该属性是数组类型</span><span class="token code keyword">           4). set : 声明该属性是Set类型</span><span class="token code keyword">           5). map : 声明该属性是Map类型</span><span class="token code keyword">      原理:</span><span class="token code keyword">         clazz = Class.forName("com.itheima.service.impl.UserServiceImpl5")</span><span class="token code keyword">         service = clazz.newInstance();</span><span class="token code keyword">         setList = service.getMethod("setList",List.class);</span><span class="token code keyword">         List list = new ArrayList();</span><span class="token code keyword">         list.add("zs");</span><span class="token code keyword">         list.add("ls");</span><span class="token code keyword">         list.add("ww");</span><span class="token code keyword">         setList.invoke(service,list);// service.setList(list)</span></code></pre><h3 id="6、SpEL"><a href="#6、SpEL" class="headerlink" title="6、SpEL"></a>6、SpEL</h3><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> springEL表达式</span><span class="token list punctuation">1.</span> ${}<span class="token code keyword">        ${} 用于加载外部文件指定的Key值 (在下一节的properties文件中演示)</span><span class="token list punctuation">2.</span> #{}<span class="token code keyword">        #{} 强调的是把内容赋值给属性    </span></code></pre><p>注意：所有属性值不区分是否引用类型，统一使用value赋值</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--        value属性: 指定基本类型数据 (8大基本类型+String)        ref属性: 指定的引用类型        springEL        1. ${表达式}            引入配置文件中的数据        2. #{表达式}            强调的是把内容赋值给属性            #{'字符串'}            #{数字,boolean}            #{变量名}    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myDate<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.util.Date<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userDao<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.dao.impl.UserDaoImpl<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.service.impl.UserServiceImpl2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- &lt;property name="name" value="zs"/>       &lt;property name="age" value="18"/>       &lt;property name="dao" ref="userDao"/>--></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#{<span class="token punctuation">'</span>ls<span class="token punctuation">'</span>}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#{18}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dao<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#{userDao}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><h3 id="7、引入properties文件"><a href="#7、引入properties文件" class="headerlink" title="7、引入properties文件"></a>7、引入properties文件</h3><ul><li><p>Spring提供了读取外部properties文件的机制，使用读取到的数据为bean的属性赋值</p></li><li><p>操作步骤</p><p>1.准备外部properties文件</p><p>2.开启context命名空间支持</p><pre class=" language-xml"><code class="language-xml">xmlns:context="http://www.springframework.org/schema/context"</code></pre></li></ul><p>​        3.加载指定的properties文件</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>property-placeholder</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:filename.properties<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><p>​        4.使用加载的数据</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>propertyName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${propertiesName}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><ul><li><p>注意：如果需要加载所有的properties文件，可以使用<code>*.properties</code>表示加载所有的properties文件</p></li><li><p>注意：读取数据使用**${propertiesName}<strong>格式进行，其中</strong>propertiesName**指properties文件中的属性名</p></li></ul><p><strong>示例：</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans        https://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/context        https://www.springframework.org/schema/context/spring-context.xsd        <span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--2. 加载指定的properties文件--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>property-placeholder</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:data.properties<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userDao<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.ioc.dao.impl.UserDaoImpl<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--        3. 使用加载的数据            ${外部文件中的key}    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.ioc.service.impl.UserServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userDao<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userDao<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${name}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${age}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Response&amp;ServletContext</title>
      <link href="/2020/04/28/Response&amp;ServletContext/"/>
      <url>/2020/04/28/Response&amp;ServletContext/</url>
      
        <content type="html"><![CDATA[<h1 id="1、Response-amp-ServletContext"><a href="#1、Response-amp-ServletContext" class="headerlink" title="1、Response&amp;ServletContext"></a>1、Response&amp;ServletContext</h1><h2 id="1、http响应消息格式"><a href="#1、http响应消息格式" class="headerlink" title="1、http响应消息格式"></a>1、http响应消息格式</h2><h3 id="①-响应行"><a href="#①-响应行" class="headerlink" title="① 响应行"></a>① 响应行</h3><pre class=" language-markdown"><code class="language-markdown"><span class="token list punctuation">*</span> 格式<span class="token code keyword">        协议/版本号 状态码</span><span class="token list punctuation">*</span> 例如<span class="token code keyword">        HTTP/1.1 200</span><span class="token list punctuation">*</span> 常见状态码<span class="token code keyword">    --------------- 用户可以正常访问页面</span><span class="token code keyword">    200 ：表示成功    </span><span class="token code keyword">    302 ：重定向(response学习)</span><span class="token code keyword">    304 ：从缓存中读取数据</span><span class="token code keyword">        (如果这个资源没有变化,浏览器是会缓存的,下次请求,就直接从缓存中读取,提高效率)</span><span class="token code keyword">    --------------- 用户无法正常访问页面</span><span class="token code keyword">    404：请求资源未找到（not  found）</span><span class="token code keyword">    405：请求的方法未找到（明天讲了servlet给大家演示....）</span><span class="token code keyword">    500：服务器内部错误（java代码写错了.....）</span></code></pre><h3 id="②-响应头"><a href="#②-响应头" class="headerlink" title="② 响应头"></a>② 响应头</h3><pre class=" language-markdown"><code class="language-markdown"><span class="token list punctuation">*</span> 格式<span class="token code keyword">        响应头名称：响应头的值</span><span class="token list punctuation">*</span> 例如<span class="token code keyword">        Last-Modified: Mon, 13 Apr 2020 06:11:24 GMT</span><span class="token code keyword">        Location: ./SuccessServlet</span><span class="token code keyword">        Content-Type: text/html;charset=utf-8</span><span class="token code keyword">        Content-Length: 0</span><span class="token code keyword">        Date: Fri, 03 Sep 2021 10:18:13 GMT</span><span class="token code keyword">        Keep-Alive: timeout=20</span><span class="token code keyword">        Connection: keep-alive</span></code></pre><p><strong>常见响应头</strong>：</p><pre class=" language-markdown"><code class="language-markdown"><span class="token list punctuation">1.</span> Location：通常与状态码302一起使用，实现重定向操作<span class="token code keyword">        Location:http://www.itcast.cn</span><span class="token list punctuation">2.</span> Content-Type：服务器告诉客户端，返回响应体的数据类型和编码方式<span class="token code keyword">        Content-Type:text/html;charset=utf-8</span><span class="token list punctuation">3.</span> Content-Disposition：服务器告诉客户端，以什么样方式打开响应体<span class="token code keyword">        * in-line（默认）：浏览器直接打开相应内容，展示给用户</span><span class="token code keyword">        * attachment;filename=文件名：浏览器以附件的方式保存文件 【文件下载】</span><span class="token list punctuation">4.</span> Refresh：在指定间隔时间后，跳转到某个页面<span class="token code keyword">        Refresh:5;http://www.itcast.cn</span></code></pre><h3 id="③-响应体（正文）"><a href="#③-响应体（正文）" class="headerlink" title="③ 响应体（正文）"></a>③ 响应体（正文）</h3><pre class=" language-markdown"><code class="language-markdown"><span class="token list punctuation">*</span> 服务器返回的数据，由浏览器解析后展示给用户   用户看到页面所有的内容，都是在响应体中返回的</code></pre><p><img src="https://i.loli.net/2021/09/03/8jgytsdnCRZzKwU.png" alt="image-20210903183704356"></p><h2 id="2、Response"><a href="#2、Response" class="headerlink" title="2、Response"></a>2、Response</h2><h3 id="1-、概述"><a href="#1-、概述" class="headerlink" title="1 、概述"></a>1 、概述</h3><ul><li><p>response对象表示web服务器给浏览器返回的响应信息</p><blockquote><p>response是由tomcat创建的</p></blockquote></li><li><p>作用：开发人员可以使用response对象的方法，设置要返回给浏览器的响应信息</p><blockquote><p>注意: tomcat + servlet (服务端)</p><p>在response中但凡不是Servlet设置的信息,就是tomcat设置的, 我们可以用Servlet中设置覆盖tomcat的设置</p></blockquote></li></ul><pre class=" language-markdown"><code class="language-markdown"><span class="token code keyword">    ServletResponse 接口 (理论上兼容大部分协议)</span><span class="token code keyword">            |    </span><span class="token code keyword">    HttpServletResponse 接口 (专门指的是http协议的响应)</span><span class="token code keyword">            |    </span><span class="token code keyword">    org.apache.catalina.connector.ResponseFacade 实现类（由tomcat提供的）</span></code></pre><h3 id="2-、设置Http响应行"><a href="#2-、设置Http响应行" class="headerlink" title="2 、设置Http响应行"></a>2 、设置Http响应行</h3><pre class=" language-markdown"><code class="language-markdown"><span class="token list punctuation">*</span> 格式<span class="token code keyword">         协议/版本号 状态码(status code) </span><span class="token list punctuation">*</span> 例如<span class="token code keyword">        HTTP/1.1 200    </span><span class="token list punctuation">*</span> API<span class="token code keyword">    1. 设置状态码(status code) </span><span class="token code keyword">             void setStatus(int sc)  </span><span class="token code keyword">    2. 常见响应状态码：</span><span class="token code keyword">            200：请求和响应都OK(顺利)</span><span class="token code keyword">            </span><span class="token code keyword">            302：重定向 (待会)</span><span class="token code keyword">            304：浏览器从缓存中加载数据</span><span class="token code keyword">            </span><span class="token code keyword">            404：请求的路径错误或请求的资源不存在(自己开发的时候,路径有问题)</span><span class="token code keyword">            405: 在HttpServlet的子类中, doGet或doPost方法没有重写</span><span class="token code keyword">            500：服务器内部异常</span><span class="token code keyword">            </span><span class="token code keyword">    3. 注意事项：上述常见的响应状态码，通常是由tomcat服务器自动响应给浏览器。我们一般是不需要手动设置的；       </span></code></pre><p><strong>浏览器缓存</strong>(304)</p><p><img src="https://i.loli.net/2021/09/03/Wg4ftx2UmE8IpKQ.png" alt="1599619354298"></p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>           response<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token number">302</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="3、设置Http响应头"><a href="#3、设置Http响应头" class="headerlink" title="3、设置Http响应头"></a>3、设置Http响应头</h3><pre class=" language-markdown"><code class="language-markdown"><span class="token list punctuation">*</span> 格式<span class="token code keyword">        响应头名称：响应头的值</span><span class="token code keyword">        (name : value)</span><span class="token list punctuation">*</span> 例如<span class="token code keyword">        Content-Length : 5 (指的是响应体内容长度5个字符)</span><span class="token list punctuation">*</span> API<span class="token code keyword">    1. 设置指定头名称和对应的值</span><span class="token code keyword">            void setHeader(String name, String value)  </span><span class="token code keyword">    2. value值可以由多个参数组成，不同参数之间使用分号隔开：         </span><span class="token code keyword">            response.setHeader(key,"value1;value2")；</span><span class="token code keyword">    3. 常用响应头：</span><span class="token code keyword">            refresh：定时刷新；</span><span class="token code keyword">            content-type:设置响应数据的数据类型和编码格式； (内容类型)</span><span class="token code keyword">            location:配合302响应状态码完成重定向；(位置)</span><span class="token code keyword">            content-disposition：通知浏览器以附件的形式解析响应的数据；(内容处置方式)        </span></code></pre><h3 id="4、设置Http响应体"><a href="#4、设置Http响应体" class="headerlink" title="4、设置Http响应体"></a>4、设置Http响应体</h3><pre class=" language-markdown"><code class="language-markdown">响应体中包含 响应数据的正文响应是服务器给浏览器发送数据: 输出流<span class="token list punctuation">*</span> API（输出流对象）<span class="token code keyword">    1. 字符输出流 : 用于向浏览器输出字符数据(文本)</span><span class="token code keyword">            PrintWriter getWriter()            </span><span class="token code keyword">    2. 字节输出流 : 用于向浏览器输出二进制数据(比如文件下载)</span><span class="token code keyword">            ServletOutputStream getOutputStream()</span><span class="token code keyword">    注意：在同一个servlet中，二种类型的输出流不能同时存在，互斥</span>    <span class="token code keyword">        # response操作</span><span class="token code keyword">        1. tomcat有默认设置</span><span class="token code keyword">        2. servlet可以手动设置(会覆盖默认设置)</span></code></pre><pre class=" language-java"><code class="language-java">    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//只有重定向需要设置状态码302，其他的tomcat已经帮忙做好了</span><span class="token comment" spellcheck="true">//        response.setStatus(302);</span><span class="token comment" spellcheck="true">//        response.getWriter().print("hello");</span>        <span class="token comment" spellcheck="true">//获取响应体字节输出流</span>        ServletOutputStream os <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        os<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取响应字符输出流</span>        PrintWriter writer <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        writer<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"hello world2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="3、-响应头的功能"><a href="#3、-响应头的功能" class="headerlink" title="3、 响应头的功能"></a>3、 响应头的功能</h2><h3 id="1、响应定时刷新-refresh"><a href="#1、响应定时刷新-refresh" class="headerlink" title="1、响应定时刷新(refresh)"></a>1、响应定时刷新(refresh)</h3><p><strong>步骤分析</strong></p><pre class=" language-markdown"><code class="language-markdown"><span class="token list punctuation">1.</span> 通过response设置响应头 Refresh<span class="token code keyword">        response.setHeader("Refresh","间隔时间（秒）;跳转页面");</span></code></pre><pre class=" language-java"><code class="language-java">第一个响应头 <span class="token operator">:</span> <span class="token function">refresh</span><span class="token punctuation">(</span>刷新<span class="token punctuation">)</span>          response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span>响应头name值<span class="token punctuation">,</span> <span class="token string">"value值1;value值2"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>          response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"refresh"</span><span class="token punctuation">,</span> <span class="token string">"5;http://www.baidu.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          服务器告诉浏览器<span class="token punctuation">,</span> 你<span class="token number">5</span>秒之后跳转到http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>baidu<span class="token punctuation">.</span>com 刷新页面</code></pre><h3 id="2、响应体中文乱码-content-type"><a href="#2、响应体中文乱码-content-type" class="headerlink" title="2、响应体中文乱码(content-type)"></a>2、响应体中文乱码(content-type)</h3><p><strong>需求</strong></p><p>向页面输出中文数据没有乱码  </p><p><strong>原因分析</strong></p><pre class=" language-markdown"><code class="language-markdown"><span class="token list punctuation">1.</span> 通过response获取字符输出流<span class="token code keyword">        PrintWriter pw = response.getWriter();        </span><span class="token list punctuation">2.</span> 通过字符输出输出中文字符<span class="token code keyword">        pw.write("中文....");</span><span class="token list punctuation">3.</span> 浏览器访问,网页出现中文乱码    <span class="token list punctuation">4.</span> 解决 : 统一浏览器和服务器编码(utf-8)    <span class="token code keyword">    response.setContentType("text/html;charset=utf-8");</span></code></pre><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 第二个响应头 : content-type (内容类型)</span><span class="token code keyword">    服务器告诉浏览器,使用何种语法解析响应体,使用何种字符集解码响应体</span><span class="token code keyword">     response.setHeader("content-type", "text/html;charset=utf-8");</span><span class="token code keyword">       1). 响应体中文乱码</span><span class="token code keyword">            I. 编码 : servlet (utf-8)</span><span class="token code keyword">            II. 解码 : 浏览器</span><span class="token code keyword">            服务器告诉浏览器, 用utf-8解码响应体</span><span class="token code keyword">       2).  MIME type (多用途互联网邮件扩展MIME，Multipurpose Internet Mail Extensions）</span><span class="token code keyword">            windows后缀名 :    txt         html            json</span><span class="token code keyword">             MIME type :    text/plain   text/html    application/json</span><span class="token code keyword">             windows : \</span><span class="token code keyword">             java : /  (unix系统)</span><span class="token code keyword">           服务器告诉浏览器, 用text/html的语法解析响应体</span></code></pre><h3 id="3、响应重定向-location-302"><a href="#3、响应重定向-location-302" class="headerlink" title="3、响应重定向(location+302)"></a>3、响应重定向(location+302)</h3><p><img src="https://i.loli.net/2021/09/03/2Qzr1saW5VUSTeJ.png" alt="image-20210903185758444"></p><p><strong>步骤分析</strong></p><pre class=" language-markdown"><code class="language-markdown"><span class="token list punctuation">*</span> 方式一<span class="token code keyword">    // 1.设置状态码</span><span class="token code keyword">        response.setStatus(302);</span><span class="token code keyword">    // 2.设置响应头 Location</span><span class="token code keyword">        response.setHeader("Location","重定向网络地址");</span><span class="token code keyword">            </span><span class="token list punctuation">*</span> 方式二<span class="token code keyword">    // 1.response这哥们封装专门处理重定向的方法 (掌握)</span><span class="token code keyword">        response.sendRedirect("重定向网络地址");</span></code></pre><p><strong>重定向特点</strong></p><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 重定向是浏览器行为</span><span class="token list punctuation">1.</span> 起码发起两次请求<span class="token list punctuation">2.</span> 浏览器地址栏的url被修改了(指向最后访问的地址)<span class="token list punctuation">3.</span> 可以访问服务器外部资源<span class="token list punctuation">4.</span> 不能通过request域对象共享数据</code></pre><pre class=" language-java"><code class="language-java">    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1. 接收请求</span>        String msg <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"CServlet:"</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2. 业务处理</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"CServlet: 收钱"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3. 响应(重定向)</span><span class="token comment" spellcheck="true">//        response.setStatus(302);</span><span class="token comment" spellcheck="true">//        response.setHeader("location", "DServlet");</span>        <span class="token comment" spellcheck="true">//等价于上面两行</span>        response<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span><span class="token string">"DServlet"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="总结：请求转发与重定向的区别"><a href="#总结：请求转发与重定向的区别" class="headerlink" title="总结：请求转发与重定向的区别"></a><strong>总结：请求转发与重定向的区别</strong></h3><pre class=" language-markdown"><code class="language-markdown"><span class="token list punctuation">1.</span> 哪个对象的方法<span class="token code keyword">    1). 请求转发 : request</span><span class="token code keyword">        request.getRequestDispatcher(转发地址).forward(request,response)        </span><span class="token code keyword">    2). 重定向 : response</span><span class="token code keyword">        response.sendRedirect(重定向地址); // 302状态码 + location头</span><span class="token list punctuation">2.</span> 行为人<span class="token code keyword">    请求转发 : 服务器内部行为,浏览器不知道服务器内部发生了什么</span><span class="token code keyword">    重定向 : 浏览器行为  </span><span class="token code keyword">            可以定向到其他服务器,但是请求转发只能在本服务器内</span><span class="token list punctuation">3.</span> 请求次数<span class="token code keyword">    请求转发 : 1次</span><span class="token code keyword">    重定向: 起码2次    </span><span class="token code keyword">            浏览器会限制重定向的次数,比如 google浏览器不超过20次    </span><span class="token list punctuation">4.</span> 数据共享 (重要)<span class="token code keyword">    请求转发: request域对象可以传递数据</span><span class="token code keyword">    重定向 : 不可以用request域对象传递数据 </span><span class="token code keyword">        重定向涉及多次请求, 超出一个request作用范围</span><span class="token code keyword">        </span><span class="token list punctuation">5.</span> 地址栏指向<span class="token code keyword">    请求转发: 一开始设置的路径 AServlet</span><span class="token code keyword">        一次请求</span><span class="token code keyword">    重定向: 最终指向最后一次请求的地址 DServlet        </span><span class="token code keyword">        多次请求,后续请求地址覆盖前面请求地址</span><span class="token list punctuation">6.</span> 总结<span class="token code keyword">    请求转发: 就一次请求, 可以使用request域传递数据,不可以转发到其他服务器</span><span class="token code keyword">    重定向: 涉及多次请求,不可以用request域传递数据,但是可以定向到其他的服务器</span>    <span class="token list punctuation">7.</span> 使用<span class="token code keyword">    a. 如果用request域对象传递数据,并且两个资源在同服务器内 -> 请求转发</span><span class="token code keyword">    b. 如果不需要request传递数据,或两个资源在不同服务器上  -> 重定向</span></code></pre><h2 id="4、ServletContext"><a href="#4、ServletContext" class="headerlink" title="4、ServletContext"></a>4、ServletContext</h2><h3 id="1、-概述"><a href="#1、-概述" class="headerlink" title="1、 概述"></a>1、 概述</h3><ul><li><p>web容器（tomcat）在启动时，它会为每个web项目承建一个对应的ServletContext对象(唯一)</p></li><li><p>它代表：当前web项目 </p><p><img src="https://i.loli.net/2021/09/03/AoRY2r4t37zCeMB.png" alt="1626598097155">    </p></li></ul><p><strong>主要作用</strong></p><ol><li><p>域对象（共享数据）</p><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> javaweb四大域对象:  有作用范围,并可在作用范围中共享数据的对象(有点像Map)</span><span class="token list punctuation">1.</span> 域对象方法api一样 : <span class="token code keyword">       setAttribute(name,value) </span><span class="token code keyword">       value  = getAttribute(name)</span><span class="token code keyword">       removeAttribute(name)</span><span class="token code keyword">       </span><span class="token list punctuation">2.</span> 作用范围不一样<span class="token code keyword">        pageContext &lt;  request &lt; session &lt; ServletContext</span><span class="token code keyword">        </span><span class="token list punctuation">3.</span> 获取域对象规律:<span class="token code keyword">    小域对象可以获取大域对象</span></code></pre></li><li><p>获取一些应用全局的数据</p><p>1). 获取全局的配置参数</p><pre class=" language-java"><code class="language-java">获取web<span class="token punctuation">.</span>xml中的初始化参数   <span class="token function">getInitParameter</span><span class="token punctuation">(</span><span class="token string">"参数名"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>2).获取项目中资源的真实路径</p><pre class=" language-java"><code class="language-java">String realPath <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">"resource/3.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>3).获取资源的MIME类型</p><pre class=" language-java"><code class="language-java">String mimeType <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getMimeType</span><span class="token punctuation">(</span><span class="token string">"resource/3.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span>  mime type <span class="token operator">:</span> 是文件类型一种表示形式    <span class="token operator">*</span>    txt <span class="token operator">-</span><span class="token operator">></span> text<span class="token operator">/</span>plain    <span class="token operator">*</span>    html <span class="token operator">-</span><span class="token operator">></span> text<span class="token operator">/</span>html</code></pre></li></ol><p><strong>获取ServletContext对象</strong></p><pre class=" language-java"><code class="language-java">    ServletContext        <span class="token number">1</span><span class="token punctuation">.</span> 对象获取            <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span> 注意<span class="token operator">:</span> servletContext是tomcat创建的<span class="token punctuation">,</span>全局唯一            <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span> 在servlet中直接获取            <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span> 小域对象可以获取大域对象            pageContext <span class="token operator">&lt;</span> request <span class="token operator">&lt;</span> session <span class="token operator">&lt;</span> servletContext                <span class="token number">1</span><span class="token punctuation">.</span> 通过request对象获得        ServletContext sc <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token number">2</span><span class="token punctuation">.</span> 继承HttpServlet后，可以直接调用        ServletContext sc <span class="token operator">=</span> <span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="2-、域对象（共享数据）"><a href="#2-、域对象（共享数据）" class="headerlink" title="2 、域对象（共享数据）"></a>2 、域对象（共享数据）</h3><blockquote><p>在当前整个服务器应用范围内，共享数据</p></blockquote><ul><li><p><strong>生命周期</strong></p><pre class=" language-markdown"><code class="language-markdown"><span class="token list punctuation">1.</span> 何时创建？<span class="token code keyword">        项目加载时，创建唯一的一个ServletContext对象(全局唯一)</span><span class="token list punctuation">2.</span> 何时销毁？<span class="token code keyword">        项目卸载时，销毁</span><span class="token list punctuation">3.</span> 作用范围？<span class="token code keyword">        与项目共存亡（多个servlet和多次请求都可以操作它）</span></code></pre></li><li><p><strong>API方法</strong></p><pre class=" language-tex"><code class="language-tex">1. 存储数据        void setAttribute(String name,Object value)2. 获取数据        Object getAttribute(String name)3. 删除数据        void removeAttribute(String name)</code></pre></li></ul><pre class=" language-java"><code class="language-java">    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        ServletContext context1 <span class="token operator">=</span> <span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ServletContext context2 <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//org.apache.catalina.core.ApplicationContextFacade@7f95da61</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>context1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//org.apache.catalina.core.ApplicationContextFacade@7f95da61</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>context2<span class="token punctuation">)</span><span class="token punctuation">;</span>        context1<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">,</span> <span class="token string">"dongxi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="3、获取资源在服务器的真实路径"><a href="#3、获取资源在服务器的真实路径" class="headerlink" title="3、获取资源在服务器的真实路径"></a>3、获取资源在服务器的真实路径</h3><pre class=" language-java"><code class="language-java"><span class="token operator">*</span> API        String <span class="token function">getRealPath</span><span class="token punctuation">(</span>String path<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-markdown"><code class="language-markdown"><span class="token code keyword">            项目虚拟路径:     /day06-response</span><span class="token code keyword">            项目真实路径:     E:\test\class125_web\out\artifacts\day06_response_war_exploded</span><span class="token code keyword">            举个例子:  访问资源 3.txt</span><span class="token code keyword">                虚拟路径:  http://localhost:8080/day06-response/resource/3.txt</span><span class="token code keyword">                真实路径:</span><span class="token code keyword">                        1). 项目源码路径,不是真实路径    E:\test\class125_web\day06-response\web\resource\3.txt</span><span class="token code keyword">                                E:\test\class125_web\day06-response</span><span class="token code keyword">                                    a. src   -> 编译到 web-inf/classes中</span><span class="token code keyword">                                            问题: jar包是class文件压缩包,直接放web-inf</span><span class="token code keyword">                                    b. web  -> 无需编译</span><span class="token code keyword">                        2).项目编译路径,才是真实路径</span><span class="token code keyword">                                 E:\test\class125_web\out\artifacts\day06_response_war_exploded</span><span class="token code keyword">                                    web-inf</span></code></pre><pre class=" language-java"><code class="language-java">       ServletContext context <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//根据资源的相对路径,获取其绝对真实路径</span>        String realPath <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">"resource/3.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>realPath<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="4、获取资源Mime类型"><a href="#4、获取资源Mime类型" class="headerlink" title="4、获取资源Mime类型"></a>4、获取资源Mime类型</h3><pre class=" language-java"><code class="language-java">context<span class="token punctuation">.</span><span class="token function">getMimeType</span><span class="token punctuation">(</span><span class="token string">"resource/3.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java">        <span class="token comment" spellcheck="true">/*        *  mime type : 是文件类型一种表示形式        *    txt -> text/plain        *    html -> text/html        *    json ->application/json        * */</span>        String mimeType <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getMimeType</span><span class="token punctuation">(</span><span class="token string">"resource/3.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mimeType<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="5、获取全局参数"><a href="#5、获取全局参数" class="headerlink" title="5、获取全局参数"></a>5、获取全局参数</h3><p>1). 获取全局的配置参数</p><pre class=" language-java"><code class="language-java">获取web<span class="token punctuation">.</span>xml中的初始化参数   <span class="token function">getInitParameter</span><span class="token punctuation">(</span><span class="token string">"参数名"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>web.xml</strong></p><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>sping.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">></span></span></code></pre><h2 id="5、案例文件下载"><a href="#5、案例文件下载" class="headerlink" title="5、案例文件下载"></a>5、案例文件下载</h2><p><strong>html：</strong></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--&lt;h1>文件下载第一种 直接下载不常用&lt;/h1>        &lt;a href="resource/1.zip">1.zip&lt;/a> &lt;br>        &lt;a href="resource/2.exe">2.exe&lt;/a> &lt;br>        &lt;a href="resource/3.txt">3.txt&lt;/a> &lt;br>        &lt;a href="resource/4.jpg">4.jpg&lt;/a> &lt;br>--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>文件下载第二种方案<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>DownloadServlet?file<span class="token punctuation">=</span>1.zip<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1.zip<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>DownloadServlet?file<span class="token punctuation">=</span>2.exe<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2.exe<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>DownloadServlet?file<span class="token punctuation">=</span>3.txt<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>3.txt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>DownloadServlet?file<span class="token punctuation">=</span>4.jpg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>4.jpg<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>DownloadServlet?file<span class="token punctuation">=</span>葵花宝典.zip<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>葵花宝典.zip<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><p><strong>DownLoadServlet：</strong></p><pre class=" language-markdown"><code class="language-markdown">1.获取文件名2.设置响应头信息，content-type，content-disposition3.找到真实路径4.通过流，进行复制。5.关闭流</code></pre><pre class=" language-java"><code class="language-java">    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1. 获取请求</span>        String fileName <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"file"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2. 业务处理</span>        <span class="token comment" spellcheck="true">//3. 响应</span>        <span class="token comment" spellcheck="true">/*            contentType: text/html;charset=utf-8                解决响应体中文乱码            下载文件中文乱码: (响应头中文乱码)                1. 原因:                    url网络传输不支持非法符号(比如中文)                        word=%E6%9D%AF%E5%AD%90                       url编码 : 杯子 ->  %E6%9D%AF%E5%AD%90                       url解码 : %E6%9D%AF%E5%AD%90 -> 杯子                    如果中文直接放响应头, 就会乱码                2. 解决:                    url编码         */</span>                <span class="token comment" spellcheck="true">// 中文编码，设置响应头</span>        String code <span class="token operator">=</span> DownLoadUtils<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"content-disposition"</span><span class="token punctuation">,</span> <span class="token string">"attachment;filename=X"</span> <span class="token operator">+</span> code<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置内容类型</span>        String mimeType <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMimeType</span><span class="token punctuation">(</span><span class="token string">"resource/"</span> <span class="token operator">+</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span>mimeType<span class="token punctuation">)</span><span class="token punctuation">;</span>                String realPath <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">"resource/"</span> <span class="token operator">+</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>        FileInputStream is <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>realPath<span class="token punctuation">)</span><span class="token punctuation">;</span>        ServletOutputStream os <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> length<span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>length <span class="token operator">=</span> is<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            os<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        os<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        is<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><strong>可能出现的问题：响应头中文乱码</strong></p><pre class=" language-markdown"><code class="language-markdown"><span class="token list punctuation">*</span> 如果该下载文件名是中文的话，会出现乱码...<span class="token code keyword">    谷歌和绝大多数的浏览器是通过 url编码</span><span class="token code keyword">        URLEncode() 编码</span><span class="token code keyword">        URLDecode() 解码</span><span class="token code keyword">    火狐浏览器   base64编码</span>    <span class="token list punctuation">*</span> 我们就需要考虑浏览器兼容性问题....<span class="token code keyword">    资料提供了判断浏览器不同编码的工具类直接使用即可....</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DownLoadUtils</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getName</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> String filename<span class="token punctuation">)</span> <span class="token keyword">throws</span> UnsupportedEncodingException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获得请求头中的User-Agent</span>        String agent <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"User-Agent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 根据不同的客户端进行不同的编码</span>        String filenameEncoder <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>agent<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"Firefox"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 火狐浏览器</span>             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是火狐"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            BASE64Encoder base64Encoder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BASE64Encoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            filenameEncoder <span class="token operator">=</span> <span class="token string">"=?utf-8?B?"</span> <span class="token operator">+</span> base64Encoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>filename<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"?="</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 其它浏览器</span>             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是google"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            filenameEncoder <span class="token operator">=</span> URLEncoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> filenameEncoder<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring02</title>
      <link href="/2020/04/28/Spring02/"/>
      <url>/2020/04/28/Spring02/</url>
      
        <content type="html"><![CDATA[<h1 id="1、Spring02"><a href="#1、Spring02" class="headerlink" title="1、Spring02"></a>1、Spring02</h1><h2 id="1、常用注解"><a href="#1、常用注解" class="headerlink" title="1、常用注解"></a>1、常用注解</h2><h3 id="1、启动注解功能（开启组件扫描）"><a href="#1、启动注解功能（开启组件扫描）" class="headerlink" title="1、启动注解功能（开启组件扫描）"></a>1、启动注解功能（开启组件扫描）</h3><ul><li><p>启动注解扫描，加载类中配置的注解项，在applicationContext.xml配置</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>packageName<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre></li><li><p>说明：</p><ul><li><p>在进行包所扫描时，会对配置的包及其子包中所有文件进行扫描</p></li><li><p>扫描过程是以文件夹递归迭代的形式进行的</p></li><li><p>扫描过程仅读取合法的java文件</p></li><li><p>扫描时仅读取spring可识别的注解</p></li><li><p>扫描结束后会将可识别的有效注解转化为spring对应的资源加入IoC容器</p></li></ul></li><li><p>注意：</p><ul><li>无论是注解格式还是XML配置格式，最终都是将资源加载到IoC容器中，差别仅仅是数据读取方式不同</li><li>从加载效率上来说注解优于XML配置文件</li></ul></li></ul><h3 id="2、bean的定义"><a href="#2、bean的定义" class="headerlink" title="2、bean的定义"></a>2、bean的定义</h3><blockquote><p>@Component    @Controller    @Service    @Repository</p><p>类注解</p><p>作用：设置该类为spring管理的bean</p></blockquote><ul><li><p>名称：@Component    @Controller    @Service    @Repository</p></li><li><p>类型：<strong>类注解</strong></p></li><li><p>位置：类定义上方</p></li><li><p>作用：设置该类为spring管理的bean</p></li><li><p>范例：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token operator">/</span><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">"id值"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClassName</span><span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre></li><li><p>说明：</p><ul><li>@Controller、@Service 、@Repository是@Component的衍生注解，功能同@Component</li></ul></li><li><p>相关属性</p><ul><li>value（默认）：定义bean的访问id</li></ul></li></ul><h3 id="3、bean的作用域"><a href="#3、bean的作用域" class="headerlink" title="3、bean的作用域"></a>3、bean的作用域</h3><ul><li><p>名称：@Scope</p></li><li><p>类型：<strong>类注解</strong></p></li><li><p>位置：类定义上方</p></li><li><p>作用：设置该类作为bean对应的scope属性</p></li><li><p>范例：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Scope</span><span class="token operator">/</span><span class="token annotation punctuation">@Scope</span><span class="token punctuation">(</span><span class="token string">"prototype"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//默认值是singleton</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClassName</span><span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre></li><li><p>相关属性</p><ul><li>value（默认）：定义bean的作用域，默认为singleton</li></ul></li></ul><h3 id="4、bean的生命周期"><a href="#4、bean的生命周期" class="headerlink" title="4、bean的生命周期"></a>4、bean的生命周期</h3><blockquote><p>@PostConstruct：初始化</p><p>@PreDestroy：销毁</p></blockquote><ul><li><p>名称：@PostConstruct、@PreDestroy</p></li><li><p>类型：<strong>方法注解</strong></p></li><li><p>位置：方法定义上方</p></li><li><p>作用：设置该类作为bean对应的生命周期方法</p></li><li><p>范例：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@PostConstruct</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"init..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre></li></ul><p><strong>代码演示：</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    1. bean标签配置        1). @Component("userService")            相当于配置了id -> Class        2). 四个注解,效果完全相同            @Component    @Controller     @Service          @Repository             组件           控制器(web)     业务层(service)   仓库(dao)    2. 作用范围的配置            @Scope("singleton") 默认单例,可以不写            @Scope("prototype") 多例    3. 生命周期            @PostConstruct : 构造之后就是初始化            @PreDestroy : 在销毁之前 */</span><span class="token comment" spellcheck="true">//@Component("userService")</span><span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span><span class="token string">"userService"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Scope</span><span class="token punctuation">(</span><span class="token string">"singleton"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">UserServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"UserServiceImpl constructor"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"UserServiceImpl run..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@PostConstruct</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"init"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@PreDestroy</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"destroy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="5、bean的非引用类型属性注入"><a href="#5、bean的非引用类型属性注入" class="headerlink" title="5、bean的非引用类型属性注入"></a>5、bean的非引用类型属性注入</h3><ul><li><p>名称：@Value</p></li><li><p>类型：<strong>属性注解、方法注解</strong></p></li><li><p>位置：属性定义上方，方法定义上方</p></li><li><p>作用：设置对应属性的值或对方法进行传参</p></li><li><p>范例：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${jdbc.username}"</span><span class="token punctuation">)</span><span class="token keyword">private</span> String username<span class="token punctuation">;</span></code></pre></li><li><p>说明：</p><ul><li><p>value值仅支持非引用类型数据，赋值时对方法的所有参数全部赋值</p></li><li><p>value值支持读取properties文件中的属性值，需要在类上配置@PropertySource(“ classpath:data.properties “),或者在xml配置外部文件扫描&lt;context:property-placeholder location=”classpath:jdbc.properties”/&gt;</p></li><li><p>value值支持SpEL</p></li><li><p>@value注解如果添加在属性上方，可以省略set方法（反射属性注入值，和xml配置的set注入不同）</p></li></ul></li><li><p>相关属性</p><ul><li>value（默认）：定义对应的属性值或参数值</li></ul></li></ul><h3 id="6、bean的引用类型属性注入"><a href="#6、bean的引用类型属性注入" class="headerlink" title="6、bean的引用类型属性注入"></a>6、bean的引用类型属性注入</h3><ul><li><p>名称：@Autowired、@Qualifier</p></li><li><p>类型：<strong>属性注解、方法注解</strong></p></li><li><p>位置：属性定义上方，方法定义上方</p></li><li><p>作用：设置对应属性的对象或对方法进行引用类型传参</p></li><li><p>范例：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token punctuation">(</span>required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"userDao"</span><span class="token punctuation">)</span><span class="token keyword">private</span> UserDao userDao<span class="token punctuation">;</span></code></pre></li><li><p>说明：</p><pre class=" language-markdown"><code class="language-markdown"><span class="token list punctuation">1.</span> @Autowired<span class="token code keyword">     原理:</span><span class="token code keyword">         注入的引用类型对象(来自IOC容器)</span><span class="token code keyword">         如果IOC容器中只有一个此类型的对象,直接注入</span><span class="token code keyword">         如果IOC容器中有多个此类型的对象,按照IOC容器中对象的名称注入,如果名称不匹配报错</span><span class="token code keyword">     属性: 了解,一般不写</span><span class="token code keyword">         required: </span><span class="token code keyword">             true: 此对象必须注入成功,若不成功则报错. 默认值</span><span class="token code keyword">             false: 可以注入不成功,此对象为null</span><span class="token list punctuation">2.</span> @Qualifier<span class="token code keyword">        1). 作用:在自动按照类型注入的基础之上,再按照bean的id注入.</span><span class="token code keyword">        2). 注意:此注解不能独立使用,它必须和Autowired一起使用             </span></code></pre></li></ul><p><strong>代码演示：</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//定义bean，后面添加bean的id</span><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">"userService"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"zs"</span><span class="token punctuation">)</span>    String name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"18"</span><span class="token punctuation">)</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*     1. @Autowired         原理:             注入的引用类型对象(来自IOC容器)             如果IOC容器中只有一个此类型的对象,直接注入             如果IOC容器中有多个此类型的对象,按照IOC容器中对象的名称注入,如果名称不匹配报错         属性: 了解,一般不写             required:                  true: 此对象必须注入成功,若不成功则报错. 默认值                 false: 可以注入不成功,此对象为null    2. @Qualifier            1). 作用:在自动按照类型注入的基础之上,再按照bean的id注入.            2). 注意:此注解不能独立使用,它必须和Autowired一起使用           */</span>    <span class="token annotation punctuation">@Autowired</span><span class="token punctuation">(</span>required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"userDao2"</span><span class="token punctuation">)</span>    UserDao userDao<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUserDao</span><span class="token punctuation">(</span>UserDao userDao<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userDao <span class="token operator">=</span> userDao<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"UserServiceImpl run..."</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>        userDao<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="7、加载properties文件"><a href="#7、加载properties文件" class="headerlink" title="7、加载properties文件"></a>7、加载properties文件</h3><ul><li><p>名称：@PropertySource</p></li><li><p>类型：<strong>类注解</strong></p></li><li><p>位置：类定义上方</p></li><li><p>作用：加载properties文件中的属性值</p></li><li><p>范例：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"classpath:filename.properties"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClassName</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${propertiesAttributeName}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String attributeName<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>相关属性</p><ul><li>value（默认）：设置加载的properties文件名  </li></ul></li></ul><p><strong>代码演示：</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Repository</span><span class="token punctuation">(</span><span class="token string">"bookDao"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//加载properties文件中的属性值</span><span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span><span class="token string">"classpath:data.properties"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BookDaoImpl</span> <span class="token keyword">implements</span> <span class="token class-name">BookDao</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${name}"</span><span class="token punctuation">)</span>    String name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${password}"</span><span class="token punctuation">)</span>    String password<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPassword</span><span class="token punctuation">(</span>String password<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>password <span class="token operator">=</span> password<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"BookDaoImpl run..."</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="8、加载第三方资源"><a href="#8、加载第三方资源" class="headerlink" title="8、加载第三方资源"></a>8、加载第三方资源</h3><ul><li><p>名称：@Bean</p></li><li><p>类型：<strong>方法注解</strong></p></li><li><p>位置：方法定义上方</p></li><li><p>作用：设置该方法的返回值作为spring管理的bean</p></li><li><p>范例：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"dataSource"</span><span class="token punctuation">)</span><span class="token keyword">public</span> DruidDataSource <span class="token function">createDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> ……<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre></li><li><p>说明：</p><ul><li>因为第三方bean无法在其源码上进行修改，使用@Bean解决第三方bean的引入问题</li><li>该注解用于替代XML配置中的静态工厂与实例工厂创建bean，不区分方法是否为静态或非静态</li><li>@Bean所在的类必须被spring扫描加载，否则该注解无法生效</li></ul></li><li><p>相关属性</p><ul><li>value（默认）：定义bean的访问id</li></ul></li></ul><p><strong>代码演示：</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span>        <span class="token comment" spellcheck="true">//必须添加，否则spring不会识别这个类，则下面的@Bean也用不了</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyClassFactory</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * @Bean:     *      将方法的返回值存放到IOC容器中     *      ioc容器中key的名称默认为 方法的名称     *      value属性: 设置存放到ioc容器时bean的名称     */</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"fb"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> MyClass <span class="token function">getMyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        MyClass mc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mc<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"lisi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mc<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> mc<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="9、纯注解格式"><a href="#9、纯注解格式" class="headerlink" title="9、纯注解格式"></a>9、纯注解格式</h3><ul><li><p>名称：@Configuration、@ComponentScan</p></li><li><p>类型：<strong>类注解</strong></p></li><li><p>位置：类定义上方</p></li><li><p>作用：设置当前类为spring核心配置加载类</p></li><li><p>范例：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token string">"scanPackageName"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringConfigClassName</span><span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre></li><li><p>说明：</p><ul><li>核心配合类用于替换spring核心配置文件，此类可以设置空的，不设置变量与属性</li><li>bean扫描工作使用注解@ComponentScan替代</li></ul></li></ul><p><strong>AnnotationConfigApplicationContext</strong></p><ul><li><p>加载纯注解格式上下文对象，需要使用AnnotationConfigApplicationContext</p><pre class=" language-java"><code class="language-java">AnnotationConfigApplicationContext ctx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>SpringConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><p><strong>代码演示：</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**  @Configuration: 设置一个类为Spring的配置类 * @ComponentScan: 设置需要扫描的包* */</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token string">"com.itheima"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span><span class="token string">"classpath:jdbc.properties"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringConfig</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>测试类：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        ApplicationContext ctx = new ClassPathXmlApplicationContext("applicationContext.xml");</span>        <span class="token comment" spellcheck="true">//加载纯注解格式上下文对象，需要使用AnnotationConfigApplicationContext</span>        ApplicationContext ctx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>SpringConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        MyClass mc <span class="token operator">=</span> <span class="token punctuation">(</span>MyClass<span class="token punctuation">)</span> ctx<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"fb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mc<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="10、第三方bean配置与管理"><a href="#10、第三方bean配置与管理" class="headerlink" title="10、第三方bean配置与管理"></a>10、第三方bean配置与管理</h3><ul><li><p>名称：@Import</p></li><li><p>类型：<strong>类注解</strong></p></li><li><p>位置：类定义上方</p></li><li><p>作用：导入第三方bean作为spring控制的资源</p></li><li><p>范例：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span>OtherClassName<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClassName</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre></li><li><p>说明：</p><ul><li>@Import注解在同一个类上，仅允许添加一次，如果需要导入多个，使用数组的形式进行设定</li><li>在被导入的类中可以继续使用@Import导入其他资源（了解）</li><li>@Bean所在的类可以使用导入的形式进入spring容器，无需声明为bean</li></ul></li></ul><p><strong>SpringConfig类：</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token string">"com.itheima"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//通过@Import导入第三方bean作为spring容器控制的资源</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span>MyClassFactory<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//MyClassFactory上不需要再声明@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringConfig</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//刚才这里需要声明为bean,放到spring容器中</span><span class="token comment" spellcheck="true">// 现在有了SpringConfig这个配置类,统一在那边配置即可</span><span class="token comment" spellcheck="true">//@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyClassFactory</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"fb"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> MyClass <span class="token function">getMyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        MyClass mc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mc<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"lisi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mc<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> mc<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="2、JdbcTemplate"><a href="#2、JdbcTemplate" class="headerlink" title="2、JdbcTemplate"></a>2、JdbcTemplate</h2><blockquote><p>JdbcTemplate是spring提供的一个模板类，它是对jdbc的封装,用于支持持久层的操作。</p></blockquote><p>maven坐标：</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--      spring ioc依赖  --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.9.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--      spring jdbc依赖 (jdbcTemplate在这个jar包里)  --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.9.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!--      mysql驱动  --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.45<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h3 id="1、入门案例"><a href="#1、入门案例" class="headerlink" title="1、入门案例"></a>1、入门案例</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Jdbc02Test</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//JdbcTemplate的入门案例</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.导入jar包坐标</span>        <span class="token comment" spellcheck="true">//2.创建JdbcTemplate</span>        <span class="token comment" spellcheck="true">// 该对象的执行需要依赖数据源(连接池),该对象会自动从连接池中获取连接,并使用获取的连接</span>        JdbcTemplate template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JdbcTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.创建连接池对象,交个template使用</span>        DriverManagerDataSource dataSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DriverManagerDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSource<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSource<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSource<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://localhost:3306/class120"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSource<span class="token punctuation">.</span><span class="token function">setDriverClassName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4.编写sql语句</span>        String sql <span class="token operator">=</span> <span class="token string">"select * from account where id = ? "</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//5.执行sql并返回结果集</span>        <span class="token comment" spellcheck="true">// 参数1: 要执行的sql语句</span>        <span class="token comment" spellcheck="true">// 参数2: 返回结果类型</span>        <span class="token comment" spellcheck="true">// 参数3: 可变参,</span>        <span class="token comment" spellcheck="true">//  sql语句中有几个? 此处就有几个参数,</span>        <span class="token comment" spellcheck="true">//  参数的个数,顺序,类型要和sql语句中? 的个数,顺序,类型保持一致</span>        Account account <span class="token operator">=</span> template<span class="token punctuation">.</span><span class="token function">queryForObject</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">BeanPropertyRowMapper</span><span class="token operator">&lt;</span>Account<span class="token operator">></span><span class="token punctuation">(</span>Account<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>account<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2、-JdbcTemplate的DML操作"><a href="#2、-JdbcTemplate的DML操作" class="headerlink" title="2、 JdbcTemplate的DML操作"></a>2、 JdbcTemplate的DML操作</h3><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 1. DML操作</span><span class="token list punctuation">1.</span> DML: data manipulation language 数据操纵语言<span class="token list punctuation">2.</span> DML包含了增删改三种操作(insert,delete,update)<span class="token title important"><span class="token punctuation">#</span> 2. template对象的API</span><span class="token code keyword">    public int update(final String sql,Object... args)</span><span class="token code keyword">    1. 参数 sql: 要执行的sql语句</span><span class="token code keyword">    2. 参数 args: sql执行时需要的参数</span><span class="token code keyword">    3. 返回值 : 被影响的行数</span></code></pre><p><strong>代码：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Jdbc03Test</span> <span class="token punctuation">{</span>    JdbcTemplate template<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//在每个@Test之前执行一次</span>    <span class="token annotation punctuation">@Before</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JdbcTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建连接池对象,交个template使用</span>        DriverManagerDataSource dataSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DriverManagerDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSource<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSource<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSource<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://localhost:3306/class120"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSource<span class="token punctuation">.</span><span class="token function">setDriverClassName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 添加:     *      需求: 向数据库中添加一条记录 柳岩 999     *  API:     *      update(String sql,Object... arg)     *          参数1: 要执行的sql语句     *          参数2: 可变参     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String sql <span class="token operator">=</span> <span class="token string">"insert into account values(null,?,?) "</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> template<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token string">"柳岩"</span><span class="token punctuation">,</span> <span class="token number">999</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"添加成功..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 修改:     *      需求: 修改id为3的账户名为:大幂幂 金额:1999     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String sql <span class="token operator">=</span> <span class="token string">"update account set name=?,money=? where id=? "</span><span class="token punctuation">;</span>        Object params<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"大幂幂"</span><span class="token punctuation">,</span><span class="token number">1999</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> template<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"修改成功..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 删除:     *      需求: 删除id为4的账户信息     *     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String sql <span class="token operator">=</span> <span class="token string">"delete from account where id=? "</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> template<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除成功..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3、JdbcTemplate的DQL操作"><a href="#3、JdbcTemplate的DQL操作" class="headerlink" title="3、JdbcTemplate的DQL操作"></a>3、JdbcTemplate的DQL操作</h3><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 1. DQL介绍</span><span class="token list punctuation">1.</span> DQL: data query language 数据查询语言<span class="token list punctuation">2.</span> DQL包含了查询操作: select<span class="token title important"><span class="token punctuation">#</span> 2. DQL结果集分类</span><span class="token code keyword">    对DQL执行结果进行分类的话, 大致可以分为以下三类</span><span class="token list punctuation">1.</span> 单行单列: 基本类型或String接收结果即可<span class="token code keyword">        select name from 表名 where id = 1;</span><span class="token code keyword">        select count(*) from 表名;</span><span class="token list punctuation">2.</span> 单行多列: Map<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key,value</span><span class="token punctuation">></span></span> key为字段名称,value为查询到的结果<span class="token code keyword">        select * from 表名 where id = 1;</span><span class="token list punctuation">3.</span> 多行多列: List&lt;Map<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key,value</span><span class="token punctuation">></span></span>><span class="token code keyword">        select * from 表名;</span><span class="token title important"><span class="token punctuation">#</span> 3. template对象的API</span><span class="token code keyword">    对应不同的结果集类型,有以下的方法可以使用</span><span class="token list punctuation">1.</span> 单行单列<span class="token code keyword">    public &lt;T> T queryForObject(String sql, Class&lt;T> requiredType, Object... args)</span><span class="token code keyword">        sql: 要执行的sql</span><span class="token code keyword">        requiredType: 返回的类型的字节码对象</span><span class="token code keyword">        args: sql所需要的参数</span><span class="token list punctuation">2.</span> 单行多列    <span class="token code keyword">    public Map&lt;String, Object> queryForMap(String sql, Object... args)</span><span class="token code keyword">        sql: 要执行的sql</span><span class="token code keyword">        args: sql所需要的参数</span><span class="token code keyword">        注意: 此方法只能返回一条结果!</span><span class="token list punctuation">3.</span> 多行多列<span class="token code keyword">    List&lt;Map&lt;String, Object>> queryForList(String sql, Object... args)</span><span class="token code keyword">        sql: 要执行的sql</span><span class="token code keyword">        args: sql所需要的参数</span><span class="token code keyword">        //将每条记录放map中,再将每个map放入list中</span><span class="token list punctuation">4.</span> 多行多列        <span class="token code keyword">    public &lt;T> List&lt;T> query(String sql, RowMapper&lt;T> rowMapper,Object... args) </span><span class="token code keyword">           sql: 要执行的sql</span><span class="token code keyword">           rowMapper: 行映射器</span><span class="token code keyword">                  我们可以通过BeanPropertyRowMapper并指定对应的返回值类型</span><span class="token code keyword">                  将结果集的每一行记录映射到一个对应类型的javaBean中</span><span class="token code keyword">        args: sql所需要的参数</span><span class="token code keyword">        //现将每一条记录封装到bean中,将多个bean使用list封装</span><span class="token list punctuation">5.</span> sql说明          <span class="token code keyword">        sql中可以使用?占位符</span></code></pre><pre class=" language-markdown"><code class="language-markdown"> JdbcTemplate操作 简洁版 <span class="token list punctuation">1.</span> DML<span class="token code keyword">         insert / update / delete</span> <span class="token list punctuation">2.</span> DQL<span class="token code keyword">     1). 结果集为单行单列  :</span><span class="token code keyword">         String = queryForObject (sql,String.class,参数)</span><span class="token code keyword">     2). 结果集为单行多列 :</span><span class="token code keyword">          Map =    queryForMap(sql,参数)</span><span class="token code keyword">          Account =    queryForObject(sql, new BeanPropertyRowMapper&lt;>(Account.class), 参数)</span><span class="token code keyword">     3). 结果集为多行多列:</span><span class="token code keyword">          List&lt;Map>  =  queryForList(sql,参数)</span><span class="token code keyword">           List&lt;Account> =    query(sql, new BeanPropertyRowMapper&lt;>(Account.class), 参数)</span></code></pre><p><strong>代码：</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    JdbcTemplate    1. DML            insert / update / delete    2. DQL        1). 结果集为单行单列  :            String = queryForObject (sql,String.class,参数)        2). 结果集为单行多列 :             Map =    queryForMap(sql,参数)             Account =    queryForObject(sql, new BeanPropertyRowMapper&lt;>(Account.class), 参数)        3). 结果集为多行多列:             List&lt;Map>  =  queryForList(sql,参数)              List&lt;Account> =    query(sql, new BeanPropertyRowMapper&lt;>(Account.class), 参数) */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JdbcTemplateDemo2</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> DruidDataSource ds<span class="token punctuation">;</span>    <span class="token keyword">static</span><span class="token punctuation">{</span>        ds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DruidDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ds<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://localhost:3306/class134"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ds<span class="token punctuation">.</span><span class="token function">setDriverClassName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ds<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ds<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">queryForObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        String sql <span class="token operator">=</span> <span class="token string">"select name from account where id = ?"</span><span class="token punctuation">;</span>        JdbcTemplate template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JdbcTemplate</span><span class="token punctuation">(</span>ds<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*            1. String sql            2. Class 返回值类型            3. Object... args 执行sql需要的参数         */</span>        String name <span class="token operator">=</span> template<span class="token punctuation">.</span><span class="token function">queryForObject</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// jack</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">queryForObject2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        String sql <span class="token operator">=</span> <span class="token string">"select count(*) from account"</span><span class="token punctuation">;</span>        JdbcTemplate template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JdbcTemplate</span><span class="token punctuation">(</span>ds<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> template<span class="token punctuation">.</span><span class="token function">queryForObject</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 3</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">queryForMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        String sql <span class="token operator">=</span> <span class="token string">"select * from account where id = ?"</span><span class="token punctuation">;</span>        JdbcTemplate template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JdbcTemplate</span><span class="token punctuation">(</span>ds<span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map <span class="token operator">=</span> template<span class="token punctuation">.</span><span class="token function">queryForMap</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//{id=2, name=rose, money=21000.0}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">queryForObject3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        String sql <span class="token operator">=</span> <span class="token string">"select * from account where id = ?"</span><span class="token punctuation">;</span>        JdbcTemplate template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JdbcTemplate</span><span class="token punctuation">(</span>ds<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*            1. String sql            2. RowMapper 行映射器                实现ORM : 将结果集的行映射到指定javaBean            3. Object... args 执行sql需要的参数         */</span>        Account account <span class="token operator">=</span> template<span class="token punctuation">.</span><span class="token function">queryForObject</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BeanPropertyRowMapper</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>Account<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//Account{id=1, name='jack', money=1000.0}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>account<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">queryForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        String sql <span class="token operator">=</span> <span class="token string">"select * from account"</span><span class="token punctuation">;</span>        JdbcTemplate template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JdbcTemplate</span><span class="token punctuation">(</span>ds<span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>></span> list <span class="token operator">=</span> template<span class="token punctuation">.</span><span class="token function">queryForList</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//{id=1, name=jack, money=1000.0}</span>        <span class="token comment" spellcheck="true">//{id=2, name=rose, money=21000.0}</span>        <span class="token comment" spellcheck="true">//{id=3, name=tom, money=5000.0}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        String sql <span class="token operator">=</span> <span class="token string">"select * from account"</span><span class="token punctuation">;</span>        JdbcTemplate template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JdbcTemplate</span><span class="token punctuation">(</span>ds<span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Account<span class="token operator">></span> list <span class="token operator">=</span> template<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BeanPropertyRowMapper</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>Account<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//Account{id=1, name='jack', money=1000.0}</span>        <span class="token comment" spellcheck="true">//Account{id=2, name='rose', money=21000.0}</span>        <span class="token comment" spellcheck="true">//Account{id=3, name='tom', money=5000.0}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Account account <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>account<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3、IOC和JdbcTemplate练习"><a href="#3、IOC和JdbcTemplate练习" class="headerlink" title="3、IOC和JdbcTemplate练习"></a>3、IOC和JdbcTemplate练习</h2><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.itheima.spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>day02-spring-ioc-practice<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--            spring ioc依赖        --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.9.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--            spring jdbc依赖 (jdbcTemplate在这个jar包里)        --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.9.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--            mysql驱动        --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.45<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--            junit测试框架        --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--            c3p0连接池        --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>c3p0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>c3p0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.9.1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--            druid连接池        --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0.9<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre><h3 id="1、1、纯xml方式"><a href="#1、1、纯xml方式" class="headerlink" title="1、1、纯xml方式"></a>1、1、纯xml方式</h3><p>jdbc.properties</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">jdbc.driver</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.jdbc.Driver</span><span class="token attr-name">jdbc.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost:3306/class134</span><span class="token attr-name">jdbc.username</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">jdbc.password</span><span class="token punctuation">=</span><span class="token attr-value">root</span></code></pre><p>application.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans        https://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/context        https://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>property-placeholder</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:jdbc.properties<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token comment" spellcheck="true">&lt;!--  &lt;bean id="ds" class="com.alibaba.druid.pool.DruidDataSource">        &lt;property name="url" value="${jdbc.url}"/>        &lt;property name="driverClassName" value="${jdbc.driver}"/>        &lt;property name="username" value="${jdbc.username}"/>        &lt;property name="password" value="${jdbc.password}"/>    &lt;/bean>--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ds<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mchange.v2.c3p0.ComboPooledDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbcUrl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.url}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClass<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.driver}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.username}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.password}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>template<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.jdbc.core.JdbcTemplate<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ds<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dao<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.account.dao.impl.AccountDaoImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>template<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>template<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.account.service.impl.AccountServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dao<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dao<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><h3 id="2、xml和注解混合方式"><a href="#2、xml和注解混合方式" class="headerlink" title="2、xml和注解混合方式"></a>2、xml和注解混合方式</h3><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 1. 配置xml:</span><span class="token code keyword">    第三方jar包提供的类用xml配置</span><span class="token title important"><span class="token punctuation">#</span> 2. 配置注解:</span><span class="token code keyword">    我们自定义类用注解配置</span></code></pre><p>application.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans        https://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/context        https://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--        TODO 用了注解,必须包扫描    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>property-placeholder</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:jdbc.properties<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token comment" spellcheck="true">&lt;!--  &lt;bean id="ds" class="com.alibaba.druid.pool.DruidDataSource">        &lt;property name="url" value="${jdbc.url}"/>        &lt;property name="driverClassName" value="${jdbc.driver}"/>        &lt;property name="username" value="${jdbc.username}"/>        &lt;property name="password" value="${jdbc.password}"/>    &lt;/bean>--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ds<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mchange.v2.c3p0.ComboPooledDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbcUrl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.url}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClass<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.driver}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.username}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.password}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>template<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.jdbc.core.JdbcTemplate<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ds<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><p>剩下的自定义类都在注解中配置，</p><h3 id="3、纯注解方式"><a href="#3、纯注解方式" class="headerlink" title="3、纯注解方式"></a>3、纯注解方式</h3><pre class=" language-markdown"><code class="language-markdown"><span class="token list punctuation">1.</span> 第三方jar包提供的类也用注解配置<span class="token list punctuation">2.</span> 那么核心配置文件就不需要了,用配置类代替</code></pre><p>SpringConfig类</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//spring注解配置类</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token string">"com.itheima"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 包扫描</span><span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span><span class="token string">"classpath:jdbc.properties"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 加载properties配置</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${jdbc.url}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String url<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${jdbc.driver}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String driverClassName<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${jdbc.username}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String username<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${jdbc.password}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String password<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 此DataSource会被放到IOC容器中</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"ds"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> DataSource <span class="token function">getDs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        DruidDataSource ds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DruidDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        ds.setUrl("${jdbc.url}"); // 这么写是不行的</span>        ds<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>        ds<span class="token punctuation">.</span><span class="token function">setDriverClassName</span><span class="token punctuation">(</span>driverClassName<span class="token punctuation">)</span><span class="token punctuation">;</span>        ds<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        ds<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ds<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//参数会去IOC容器中获取</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"template"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> JdbcTemplate <span class="token function">getTemplate</span><span class="token punctuation">(</span>DataSource ds<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        DataSource ds = getDs();</span>        JdbcTemplate template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JdbcTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span>ds<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> template<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>使用时：</strong></p><pre class=" language-java"><code class="language-java">ApplicationContext ctx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>SpringConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="4、Spring整合junit"><a href="#4、Spring整合junit" class="headerlink" title="4、Spring整合junit"></a>4、Spring整合junit</h2><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 引入单元测试的jar包(需要在 4.12以上)  --></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 导入Spring整合junit的jar包 --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.9.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>spring-test中的测试注解说明</p><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td>@RunWith(SpringJUnit4ClassRunner.class)</td><td>替换JUnit4运行器</td></tr><tr><td>@ContextConfiguration(value = {“classpath:bean.xml”})</td><td>Xml方式加载一个springIOC容器</td></tr><tr><td>@ContextConfiguration(classes = {SpringConfig.class})</td><td>注解方式加载一个springIOC容器</td></tr></tbody></table><p>测试代码</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//替换Junit4运行器 : junit底层解析测试类中的注解</span><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>SpringJUnit4ClassRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//加载注解配置类 : 底层自动创建工厂,就有ioc容器</span><span class="token annotation punctuation">@ContextConfiguration</span><span class="token punctuation">(</span>classes <span class="token operator">=</span> SpringConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//Xml方式加载一个springIOC容器</span><span class="token comment" spellcheck="true">//@ContextConfiguration(value = "classpath:applicationContext.xml")</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebApp2</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//自动装配</span>    <span class="token annotation punctuation">@Autowired</span>    AccountService service<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建工厂:加载xml配置文件/加载注解配置类</span><span class="token comment" spellcheck="true">//        ApplicationContext ctx = new ClassPathXmlApplicationContext("applicationContext.xml");</span><span class="token comment" spellcheck="true">//        ApplicationContext ctx = new AnnotationConfigApplicationContext(SpringConfig.class);</span>        <span class="token comment" spellcheck="true">//从ioc容器获取bean</span><span class="token comment" spellcheck="true">//        AccountService service = (AccountService) ctx.getBean("accountService");</span>        List<span class="token operator">&lt;</span>Account<span class="token operator">></span> list <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*@Test    public void method02() {        System.out.println("xx");    }*/</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>加密+AJAX跨域+JWT</title>
      <link href="/2020/04/28/%E5%8A%A0%E5%AF%86+AJAX%E8%B7%A8%E5%9F%9F+JWT/"/>
      <url>/2020/04/28/%E5%8A%A0%E5%AF%86+AJAX%E8%B7%A8%E5%9F%9F+JWT/</url>
      
        <content type="html"><![CDATA[<h1 id="1、加密-AJAX跨域-JWT"><a href="#1、加密-AJAX跨域-JWT" class="headerlink" title="1、加密+AJAX跨域+JWT"></a>1、加密+AJAX跨域+JWT</h1><h2 id="1、加密算法"><a href="#1、加密算法" class="headerlink" title="1、加密算法"></a>1、加密算法</h2><h3 id="1、加密算法分类"><a href="#1、加密算法分类" class="headerlink" title="1、加密算法分类"></a>1、加密算法分类</h3><h4 id="1、对称加密算法"><a href="#1、对称加密算法" class="headerlink" title="1、对称加密算法"></a>1、对称加密算法</h4><blockquote><ol><li><p><strong>对称加密算法</strong> 又称为 <strong>共享密钥加密算法</strong>。在 <strong>对称加密算法</strong> 中，使用的密钥只有一个，<strong>发送</strong> 和 <strong>接收</strong> 双方都使用这个密钥对数据进行 <strong>加密</strong> 和 <strong>解密</strong>。这就要求加密和解密方事先都必须知道加密的密钥。</p></li><li><p><strong>对称加密</strong> 算法主要有 <code>DES</code>、<code>3DES</code>、<code>AES</code> 等</p></li></ol></blockquote><p><img src="https://i.loli.net/2021/09/19/dTzngQuL2mEhZvR.png" alt="image-20210919173839797"></p><pre class=" language-markdown"><code class="language-markdown"><span class="token list punctuation">1.</span> 数据加密过程：在对称加密算法中，数据发送方 将 明文 (原始数据) 和 加密密钥 一起经过特殊 加密处理，生成复杂的 加密密文 进行发送。<span class="token list punctuation">2.</span> 数据解密过程：数据接收方 收到密文后，若想读取原数据，则需要使用 加密使用的密钥 及相同算法的 逆算法 对加密的密文进行解密，才能使其恢复成 可读明文。</code></pre><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 例子</span><span class="token list punctuation">1.</span> 甲方生成一个密钥K<span class="token list punctuation">2.</span> 甲方用这个密钥K将明文A进行加密为密文B<span class="token list punctuation">3.</span> 那么这个密文B,只有使用这个密钥K(甲方提供)才能解密</code></pre><h4 id="2、非对称加密算法"><a href="#2、非对称加密算法" class="headerlink" title="2、非对称加密算法"></a>2、非对称加密算法</h4><blockquote><ol><li><p><strong>非对称加密算法</strong>，又称为 <strong>公开密钥加密算法</strong>。它需要两个密钥，一个称为 <strong>公开密钥</strong> (<code>public key</code>)，即 <strong>公钥</strong>，另一个称为 <strong>私有密钥</strong> (<code>private key</code>)，即 <strong>私钥</strong>。</p></li><li><p>因为 <strong>加密</strong> 和 <strong>解密</strong> 使用的是两个不同的密钥，所以这种算法称为 <strong>非对称加密算法</strong>。</p></li><li><p><strong>非对称算法</strong> 主要有 <code>RSA</code>、<code>DSA</code> 等.</p></li></ol></blockquote><p><img src="https://i.loli.net/2021/09/19/sbgUQkhZo7OuE84.png" alt="image-20210919174431952"></p><pre class=" language-markdown"><code class="language-markdown"><span class="token list punctuation">1.</span> 如果使用公钥对数据进行加密，只有用对应的私钥才能进行解密。<span class="token list punctuation">2.</span> 如果使用私钥对数据进行加密，只有用对应的公钥才能进行解密。</code></pre><p> <strong>对称和非对称算法比较:</strong></p><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 对称算法</span><span class="token list punctuation">1.</span> 密钥管理：比较难，不适合互联网，一般用于内部系统(因为加解密用的密钥都是同一把,一旦泄露就完蛋了)<span class="token list punctuation">2.</span> 安全性：中<span class="token list punctuation">3.</span> 加密速度：快,适合大数据量的加解密处理<span class="token title important"><span class="token punctuation">#</span> 非对称算法</span><span class="token list punctuation">1.</span> 密钥管理：密钥容易管理(私钥只要保存好就没事了)<span class="token list punctuation">2.</span> 安全性：高<span class="token list punctuation">3.</span> 加密速度：比较慢，适合 小数据量 加解密或数据签名</code></pre><h4 id="3、消息摘要"><a href="#3、消息摘要" class="headerlink" title="3、消息摘要"></a>3、消息摘要</h4><blockquote><ol><li><p><strong>消息摘要算法</strong>的主要特征是<strong>加密</strong>过程不需要密钥，并且经过加密的数据无法被解密，只有输入相同的明文数据经过相同的消息摘要算法才能得到相同的密文.</p></li><li><p>不需要密钥,且不可逆</p></li><li><p>消息摘要算法有<strong>MD5</strong>和SHA等…</p></li></ol></blockquote><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 例子: md5算法</span><span class="token list punctuation">1.</span> 明文: 123 <span class="token list punctuation">2.</span> 密文: 202cb962ac59075b964b07152d234b70<span class="token list punctuation">3.</span> 用户注册的时候: 将用户输入的明文密码经过md5算法之后变成密文,然后保存到数据库<span class="token list punctuation">4.</span> 用户登录的时候: 将用户输入的明文密码经过md5算法之后变成密文,跟数据库中的密码进行比较<span class="token list punctuation">5.</span> 好处: 由于md5算法的不可逆性,除了用户本人, 别人就算知道密文,也无法得知明文,这样提高了密码的安全性</code></pre><h2 id="2、ajax跨域请求"><a href="#2、ajax跨域请求" class="headerlink" title="2、ajax跨域请求"></a>2、ajax跨域请求</h2><h3 id="1、前后端分离-集群"><a href="#1、前后端分离-集群" class="headerlink" title="1、前后端分离/集群"></a>1、前后端分离/集群</h3><p>在目前Web 开发中, 前端后端有两种协作模式，分别是: </p><ol><li>服务端渲染</li><li><strong>前后端分离(目前主流)</strong></li></ol><h4 id="1、服务端渲染"><a href="#1、服务端渲染" class="headerlink" title="1、服务端渲染"></a>1、服务端渲染</h4><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 特点</span><span class="token code keyword">    1. 所有的web资源都放在一起, 由同一个服务器进行统一管理（前后端代码必须放到一起）</span><span class="token code keyword">    2. 页面和页面中使用的数据，由服务器组装，最后将完整的HTML页面响应给客户端</span>    <span class="token title important"><span class="token punctuation">#</span> 优点</span><span class="token code keyword">    1. 前端耗时少。因为服务器端负责动态生成 HTML 内容，浏览器只需要直接渲染页面即可。</span><span class="token code keyword">    2. 有利于SEO（搜索引擎优化）。因为服务器端响应的是完整的 HTML 页面内容，所以爬虫更容易爬取获得信息，更有利于 SEO。</span>    <span class="token title important"><span class="token punctuation">#</span> 缺点</span><span class="token code keyword">    1. 占用服务器端资源。即服务器端完成 HTML 页面内容的拼接，如果请求较多，会对服务器造成一定的访问压力。</span><span class="token code keyword">    2. 不利于分工合作，开发效率低。使用服务器端渲染，则不容易进行分工合作，尤其对于前端复杂度高的项目，不利于项目高效开发。</span></code></pre><h4 id="2、前后端分离"><a href="#2、前后端分离" class="headerlink" title="2、前后端分离"></a>2、前后端分离</h4><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 特点</span><span class="token code keyword">    - 依赖于Ajax技术。</span><span class="token code keyword">    - 后端不提供完整的 HTML 页面内容，而 是提供一些 API 接口</span><span class="token code keyword">    - 前端通过 Ajax 调用后端提供的 API 接口，拿到 json 数据 之后再在前端进行 HTML 页面的拼接，最终展示在浏览器上。</span><span class="token code keyword">    - 前端和后端是两个项目, 一般会分别部署</span>    <span class="token title important"><span class="token punctuation">#</span> 优点：</span><span class="token code keyword">    - 开发体验好。前端专注于 UI 页面的开发，后端专注于api 的开发，且前端有更多的选择性。</span><span class="token code keyword">    - 用户体验好。Ajax 技术的广泛应用，极大的提高了用户的体验，可以轻松实现页面的局部刷新。</span><span class="token code keyword">    - 减轻了服务器端的渲染压力。因为页面最终是在每个用户的浏览器中生成的。</span>    <span class="token title important"><span class="token punctuation">#</span> 缺点</span><span class="token code keyword">    不利于SEO。因为完整的 HTML 页面需要在客户端动态拼接完成，所以爬虫对无法爬取页面的有效信息。(解决方案:利用 Vue、React 等前端框架的 **SSR** (server side render)技术能够很好的解决 SEO 问题!)</span></code></pre><h3 id="2、ajax跨域请求受限"><a href="#2、ajax跨域请求受限" class="headerlink" title="2、ajax跨域请求受限"></a>2、ajax跨域请求受限</h3><h4 id="1、-跨域请求"><a href="#1、-跨域请求" class="headerlink" title="1、 跨域请求"></a>1、 跨域请求</h4><p>​    <strong>跨域请求</strong>： 当前发起请求的域与该请求指向的资源所在的域不一样。</p><p>​    <strong>同域</strong>：  协议+域名+端口号都相同才是同域    </p><pre class=" language-markdown"><code class="language-markdown"> <span class="token list punctuation">1.</span> 前端和后端项目分别部署到服务器A和服务器B， 浏览器或客户端首先获取到服务器A的网页，然后从网页上再发起一个请求到服务器B， 因为服务器A和服务器B的域不相同，那么这个请求就是跨域请求了。</code></pre><h4 id="2、同源策略"><a href="#2、同源策略" class="headerlink" title="2、同源策略"></a>2、同源策略</h4><blockquote><ol><li><p>出于安全方面的考虑（比如CSRF攻击），通常浏览器会对上面提到的跨域请求作出限制</p></li><li><p>同源策略(Same-origin Policy) 是浏览器对跨域请求进行控制的一种基本的安全策略。</p></li></ol></blockquote><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 同源策略的限制</span><span class="token list punctuation">1.</span> 限制来自不同源的document或脚本，对当前document读取或设置某些属性<span class="token list punctuation">2.</span> 禁止ajax直接发起跨域HTTP请求（其实可以发送请求，但是返回的结果被浏览器拦截了，造成请求失败）<span class="token list punctuation">3.</span> 禁止cookie跨域<span class="token list punctuation">4.</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span><span class="token punctuation">></span></span>等带有src属性的标签可以从不同的域加载和执行资源(允许跨域)</code></pre><h4 id="3、ajax跨域实现方案—CORS"><a href="#3、ajax跨域实现方案—CORS" class="headerlink" title="3、ajax跨域实现方案—CORS"></a>3、ajax跨域实现方案—CORS</h4><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 常见的AJAX跨域请求的实现方式:</span><span class="token list punctuation">1.</span> JSONP<span class="token list punctuation">2.</span> nginx代理跨域<span class="token list punctuation">3.</span> 跨域资源共享（CORS）</code></pre><blockquote><ol><li><p><strong>CORS</strong>是一个W3C标准，全称是”跨域资源共享”（Cross-origin resource sharing）。它允许浏览器向跨源服务器，发出ajax请求，从而克服了AJAX只能同源使用的限制。</p></li><li><p>整个CORS通信过程，都是浏览器自动完成，不需要用户参与。对于开发者来说，CORS通信与同源的AJAX通信没有差别，代码完全一样。浏览器一旦发现AJAX请求跨源，就会自动添加一些附加的头信息，有时还会多出一次附加的请求，但用户不会有感觉。</p></li></ol><p>​    3. 实现CORS通信的关键是服务器。只要服务器实现了CORS接口，就可以跨源通信。    </p></blockquote><h5 id="1、两种请求"><a href="#1、两种请求" class="headerlink" title="1、两种请求"></a>1、两种请求</h5><blockquote><p>浏览器将CORS请求分成两类：<strong>简单请求</strong>（simple request）和<strong>非简单请求</strong>（not-so-simple request）。</p></blockquote><p>只要同时满足以下两大条件，就属于简单请求。</p><pre class=" language-markdown"><code class="language-markdown"><span class="token list punctuation">1.</span> 请求方法是以下三种方法之一：<span class="token code keyword">    1). HEAD</span><span class="token code keyword">    2). GET</span><span class="token code keyword">    3). POST</span><span class="token list punctuation">2.</span> HTTP的请求头（Header）：<span class="token code keyword">    1). 无自定义头 </span><span class="token code keyword">    2). Content-Type为以下几种：</span><span class="token code keyword">          text/plain    (纯文本 txt)</span><span class="token code keyword">          multipart/form-data  (上传文件用的)</span><span class="token code keyword">          application/x-www-form-urlencoded (参数name=value&amp;name=value)  -> 表单提交</span></code></pre><p>​    只要不同时满足以上两个条件，那么就属于非简单请求。</p><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 开发中常见的【非简单请求】出现场景：</span><span class="token list punctuation">1.</span> 请求方式为put，delete的ajax请求<span class="token code keyword">            Restful风格 (springMVC)</span><span class="token list punctuation">2.</span> 发送json格式参数的ajax请求<span class="token code keyword">        Content-Type: application/json;charset=UTF-8</span><span class="token list punctuation">3.</span> 带自定义请求头的ajax请求<span class="token code keyword">            token信息放在请求头中</span></code></pre><p>​    之所以区分简单请求和非简单请求， 是因为浏览器对这两种请求的处理，是不一样的。</p><h5 id="2、简单请求"><a href="#2、简单请求" class="headerlink" title="2、简单请求"></a>2、简单请求</h5><p><strong>对于简单请求，浏览器直接发出CORS请求。</strong></p><p>​    浏览器发现这次跨源AJAX请求是简单请求，就自动在头信息之中，添加一个<code>Origin</code>字段。（浏览器会检测请求的响应头，如果没有特定的响应头就会报错，实际是访问了，但浏览器将信息给抛弃了）。</p><p>下面是一个简单请求的请求报文 ：</p><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 请求报文</span>POST /cors01/MyServlet HTTP/1.1Host: localhost:8080Content-Type: application/x-www-form-urlencodedOrigin: http://localhost:63342...</code></pre><p>​    上面的头信息中，<code>Origin</code>字段用来说明，本次请求来自哪个源（协议 + 域名 + 端口）。服务器根据这个值，决定是否同意这次请求。</p><p>​    如果<code>Origin</code>指定的源，不在许可范围内，服务器会返回一个正常的HTTP响应。浏览器发现，这个响应的头信息没有包含<code>Access-Control-Allow-Origin</code>字段（详见下文），就知道出错了，从而抛出一个错误。注意，这种错误无法通过状态码识别，因为HTTP回应的状态码有可能是200。</p><p>​    如果<code>Origin</code>指定的域名在许可范围内，服务器返回的响应，响应报文中至少多出一个头信息字段。</p><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 响应报文</span>Access-Control-Allow-Origin: http://localhost:63342</code></pre><p>Access-Control-Allow-Origin(访问控制允许源)的值要么是请求时<code>Origin</code>字段的值，要么是一个<code>*</code>，表示接受任意域名的请求。</p><h6 id="1、解决方案"><a href="#1、解决方案" class="headerlink" title="1、解决方案"></a>1、解决方案</h6><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 解决方案（在servlet或filtter中修改响应头信息）</span><span class="token code keyword">        // 设置允许跨域</span><span class="token code keyword">         //表示允许请求时的origin值(发出请求的网址)</span><span class="token code keyword">        response.setHeader("Access-Control-Allow-Origin", "*");  //`*`，表示接受任意域名的请求</span></code></pre><h5 id="3、非简单请求"><a href="#3、非简单请求" class="headerlink" title="3、非简单请求"></a>3、非简单请求</h5><blockquote><p>非简单请求的CORS请求，浏览器会在正式通信之前，增加一次HTTP查询请求，称为”预检”请求（preflight request）。</p><p>浏览器先询问服务器，当前网页所在的域名是否在服务器的许可名单之中，以及可以使用哪些HTTP请求方式和请求头字段。只有得到肯定答复，浏览器才会发出正式的ajax请求，否则就报错。</p></blockquote><h6 id="1、预检请求"><a href="#1、预检请求" class="headerlink" title="1、预检请求"></a>1、预检请求</h6><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 请求报文(预检请求中描述ajax正式请求的信息)</span>POST /cors01/MyServlet HTTP/1.1Host: localhost:8080Access-Control-Request-Method: POSTAccess-Control-Request-Headers: content-typeOrigin: http://localhost:63342...</code></pre><p>“预检”请求用的请求方法是<code>OPTIONS</code>，表示这个请求是用来询问的。头信息里面，关键字段是<code>Origin</code>，表示请求来自哪个源。</p><p>除了<code>Origin</code>字段，”预检”请求的头信息包括两个特殊字段。</p><p><strong>（1）Access-Control-Request-Method</strong></p><p>该字段是必须的，用来列出浏览器的CORS请求会用到哪些HTTP方法，上例是<code>POST</code>。</p><p><strong>（2）Access-Control-Request-Headers</strong></p><p>该字段是一个逗号分隔的字符串，指定浏览器CORS请求会额外发送的头信息字段，上例是<code>content-type</code>。</p><p>服务器收到”预检”请求以后，检查了<code>Origin</code>、<code>Access-Control-Request-Method</code>和<code>Access-Control-Request-Headers</code>字段以后，根据已有的设置， 判断是否允许跨源请求，最后做出响应。</p><p>​    下面是预检请求对应的一个响应报文片段</p><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 响应报文</span>Access-Control-Allow-Methods: POST, GET, OPTIONS, DELETEAccess-Control-Allow-Headers:content-typeAccess-Control-Allow-Origin: *Access-Control-Max-Age: 3600<span class="token hr punctuation">***</span></code></pre><p><strong>（1）Access-Control-Allow-Methods</strong></p><p>​    该字段必需，它的值是逗号分隔的一个字符串，表明服务器支持的所有跨域请求的方法。注意，返回的是所有支持的方法，而不单是浏览器请求的那个方法。这是为了避免多次”预检”请求。</p><p><strong>（2）Access-Control-Allow-Headers</strong></p><p>​    如果浏览器请求包括<code>Access-Control-Request-Headers</code>字段，则<code>Access-Control-Allow-Headers</code>字段是必需的。它也是一个逗号分隔的字符串，表明服务器支持的所有头信息字段，不限于浏览器在”预检”中请求的字段。</p><p><strong>（3）Access-Control-Max-Age</strong></p><p>​    该字段可选，用来指定本次预检请求的有效期，单位为秒。上面结果中，有效期是1个小时（3600秒），即允许缓存该条回应1个小时，在此期间，不用发出另一条预检请求。</p><h6 id="2、正式请求"><a href="#2、正式请求" class="headerlink" title="2、正式请求"></a>2、正式请求</h6><p>一旦服务器通过了”预检”请求，以后每次浏览器正常的CORS请求，就都跟简单请求一样，会有一个<code>Origin</code>头信息字段。服务器的回应，也都会有一个<code>Access-Control-Allow-Origin</code>头信息字段。</p><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 正式请求的响应报文</span>HTTP/1.1 200Access-Control-Allow-Origin: *Access-Control-Allow-Methods: POST, GET, OPTIONS, DELETEAccess-Control-Max-Age: 3600Access-Control-Allow-Headers: content-typeAccess-Control-Allow-Credentials: trueContent-Type: application/json;charset=utf-8Content-Length: 7Date: Fri, 19 Mar 2021 10:03:49 GMT</code></pre><p>​    如果预检请求没有通过，那么在浏览器控制台会看到报错信息。</p><h6 id="3、解决方法"><a href="#3、解决方法" class="headerlink" title="3、解决方法"></a>3、解决方法</h6><blockquote><p>在过滤器中修改response响应头，或者在servlet中的dooptions()方法中修改，因为预检请求的请求方法是options。</p></blockquote><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span>ServletRequest servletRequest<span class="token punctuation">,</span> ServletResponse servletResponse<span class="token punctuation">,</span> FilterChain filterChain<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ServletException <span class="token punctuation">{</span>        HttpServletRequest request <span class="token operator">=</span> <span class="token punctuation">(</span>HttpServletRequest<span class="token punctuation">)</span> servletRequest<span class="token punctuation">;</span>        HttpServletResponse response <span class="token operator">=</span> <span class="token punctuation">(</span>HttpServletResponse<span class="token punctuation">)</span> servletResponse<span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置状态码</span>        response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"application/json;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 设置返回类型</span>        <span class="token comment" spellcheck="true">// 设置允许跨域</span>            <span class="token comment" spellcheck="true">//表示允许请求时的origin值(发出请求的网址)</span>        response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Allow-Origin"</span><span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//该字段必需，它的值是逗号分隔的一个字符串，表明服务器支持的所有跨域请求的方法。</span>        response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Allow-Methods"</span><span class="token punctuation">,</span> <span class="token string">"POST, GET, OPTIONS, DELETE"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        如果浏览器请求包括Access-Control-Request-Headers字段，</span>                <span class="token comment" spellcheck="true">//  则Access-Control-Allow-Headers字段是必需的。</span>        response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Allow-Headers"</span><span class="token punctuation">,</span> <span class="token string">"content-type"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//如果需要多个,可以加</span>        <span class="token comment" spellcheck="true">//        response.setHeader("Access-Control-Allow-Headers", "content-type,authorization");</span>        <span class="token comment" spellcheck="true">//该字段可选，用来指定本次预检请求的有效期，单位为秒。上面结果中，有效期是1分钟（60秒），</span>        <span class="token comment" spellcheck="true">// 即允许缓存该条回应1个小时，在此期间，不用发出另一条预检请求。</span>        response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Max-Age"</span><span class="token punctuation">,</span> <span class="token string">"60"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//测试code</span>        filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>servletRequest<span class="token punctuation">,</span>servletResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="3、跨域身份认证-JWT"><a href="#3、跨域身份认证-JWT" class="headerlink" title="3、跨域身份认证_JWT"></a>3、跨域身份认证_JWT</h2><blockquote><p>JSON WEB Token（JWT），是一种基于JSON的、用于在网络上声明某种主张的令牌（token）， 也是目前最流行的跨域身份认证解决方案之一。</p></blockquote><h3 id="1、Token介绍"><a href="#1、Token介绍" class="headerlink" title="1、Token介绍"></a>1、Token介绍</h3><pre class=" language-markdown"><code class="language-markdown"><span class="token list punctuation">1.</span> Token的引入：Token是在客户端频繁向服务端请求数据，服务端频繁的去数据库查询用户名和密码并进行对比，判断用户名和密码正确与否，并作出相应提示，在这样的背景下，Token便应运而生。<span class="token list punctuation">2.</span> Token的定义：Token是服务端生成的一串字符串(服务器可以鉴别token的有效期和完整性)，以作客户端进行请求的一个令牌，当第一次登录后，服务器生成一个Token便将此Token返回给客户端，以后客户端只需带上这个Token前来请求数据即可，无需再次带上用户名和密码。<span class="token list punctuation">3.</span> 使用Token的目的：Token的目的是为了减轻服务器的压力，减少频繁的查询数据库，使服务器更加健壮。</code></pre><h3 id="2、JWT认证流程"><a href="#2、JWT认证流程" class="headerlink" title="2、JWT认证流程"></a>2、JWT认证流程</h3><p><img src="https://i.loli.net/2021/09/19/SjebHN9X5DFfok4.png" alt="image-20210919194018126"></p><pre class=" language-markdown"><code class="language-markdown"><span class="token list punctuation">1.</span> 前端提交用户名和密码，服务端验证<span class="token list punctuation">2.</span> 服务端验证通过后，生成token，返回给前端<span class="token list punctuation">3.</span> 前端自行保存token（cookie或localstorage）<span class="token list punctuation">4.</span> 前端登陆成功后，每次请求要在请求头带上Authorization ，值是token<span class="token list punctuation">5.</span> 服务端会校验token有效期和完整性,校验通过就知道用户身份,然后获得授权允许访问,否则需要前端重新登录</code></pre><h3 id="3、JWT-令牌结构"><a href="#3、JWT-令牌结构" class="headerlink" title="3、JWT 令牌结构"></a>3、JWT 令牌结构</h3><p>Token真正样子如下所示</p><p><img src="https://i.loli.net/2021/09/19/IAtHGjwiWDoXChg.png" alt="1615879393106">         </p><p>​    它是一个很长的字符串，中间用点（<code>.</code>）分隔成三个部分。注意，JWT 内部是没有换行的，这里只是为了便于展示，将它写成了几行。</p><p>JWT 的三个部分依次如下: </p><pre class=" language-markdown"><code class="language-markdown"><span class="token list punctuation">1.</span> Header（头部）: 用于描述 JWT 的元数据（json字符串）<span class="token list punctuation">2.</span> Payload（负载）: 用来存放实际需要传递的数据（json字符串）<span class="token list punctuation">3.</span> Signature（签名）: 对前两部分的签名，防止数据篡改（由前两块信息加密后的密文）</code></pre><p>写成一行，就是下面的样子:</p><pre class=" language-markdown"><code class="language-markdown">Header.Payload.Signature</code></pre><h4 id="1、Header"><a href="#1、Header" class="headerlink" title="1、Header"></a>1、Header</h4><p>Header 部分是一个 JSON 对象，描述 JWT 的元数据，通常是下面的样子。</p><blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">{</span><span class="token string">"alg"</span><span class="token punctuation">:</span> <span class="token string">"HS256"</span><span class="token punctuation">,</span><span class="token string">"typ"</span><span class="token punctuation">:</span> <span class="token string">"JWT"</span><span class="token punctuation">}</span></code></pre></blockquote><p>​    上面代码中，<code>alg</code>属性表示签名的算法（algorithm），默认是 HMAC SHA256（写成 HS256,这是一种对称加密算法）；<code>typ</code>属性表示这个令牌（token）的类型（type），JWT 令牌统一写为<code>JWT</code>。</p><p>最后，将上面的 JSON 对象使用 Base64URL 算法转成字符串。</p><blockquote><p>备注: Base64URL编码基本跟 Base64 算法基本类似，但有一些小的不同。</p><p>JWT 作为一个令牌（token），有些场合可能会放到 URL（比如 api.example.com/?token=xxx）。Base64 有三个字符<code>+</code>、<code>/</code>和<code>=</code>，在 URL 里面有特殊含义，所以要被替换掉：<code>=</code>被省略、<code>+</code>替换成<code>-</code>，<code>/</code>替换成<code>_</code> 。这就是 Base64URL 算法。</p></blockquote><h4 id="2-Payload"><a href="#2-Payload" class="headerlink" title="2 Payload"></a>2 Payload</h4><p>Payload 部分也是一个 JSON 对象，用来存放实际需要传递的数据。JWT 规定了7个官方字段，可选非必须。</p><blockquote><ul><li>iss (issuer)：签发人</li><li>exp (expiration time)：过期时间</li><li>sub (subject)：主题</li><li>aud (audience)：受众</li><li>nbf (Not Before)：生效时间</li><li>iat (Issued At)：签发时间</li><li>jti (JWT ID)：编号</li></ul></blockquote><p>除了官方字段，你还可以在这个部分定义私有字段，下面就是一个例子。</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"jti"</span><span class="token operator">:</span> <span class="token string">"657478e3-c1ba-4b93-bdfa-ad59583712d1"</span><span class="token punctuation">,</span>      <span class="token property">"iss"</span><span class="token operator">:</span> <span class="token string">"heima"</span><span class="token punctuation">,</span>  <span class="token property">"iat"</span><span class="token operator">:</span> <span class="token string">"1615885608000"</span><span class="token punctuation">,</span>  <span class="token property">"exp"</span><span class="token operator">:</span> <span class="token string">"1615885609000"</span><span class="token punctuation">,</span>  <span class="token property">"userId"</span><span class="token operator">:</span> <span class="token string">"9527"</span>    <span class="token punctuation">}</span></code></pre><p>前几个是官方字段,最后一个id是自定义的字段, 这个 JSON 对象也要使用 Base64URL 算法转成字符串。</p><p>注意：对于已签名的令牌，此信息尽管可以防止篡改，但任何人都可以读取。除非将其加密，否则请勿将机密信息放入JWT的Header和Payload中。</p><h4 id="3-Signature"><a href="#3-Signature" class="headerlink" title="3 Signature"></a>3 Signature</h4><p>​    Signature 部分是对前两部分的签名，防止数据篡改。</p><p>​    首先，需要指定一个密钥（secret）。这个密钥只有服务器才知道，不能泄露给用户。然后，使用 Header 里面指定的签名算法（默认是 HMAC SHA256,这是一种对称加密算法），按照下面的公式产生签名。</p><pre class=" language-markdown"><code class="language-markdown">HMACSHA256(  base64UrlEncode(header) + "." +  base64UrlEncode(payload),  secret)</code></pre><p>​    算出签名以后，把 Header、Payload、Signature 三个部分拼成一个字符串，每个部分之间用”点”（<code>.</code>）分隔，就可以返回给用户。</p><h2 id="4、JWT代码实现"><a href="#4、JWT代码实现" class="headerlink" title="4、JWT代码实现"></a>4、JWT代码实现</h2><h3 id="4-1-服务器生成token"><a href="#4-1-服务器生成token" class="headerlink" title="4.1 服务器生成token"></a>4.1 服务器生成token</h3><blockquote><p>第一步: pom文件中导入jar包依赖</p><p>第二步: 编写AppJwtUtil的工具类</p><p>第三步: 在用户第一次登录成功时,创建token并响应给浏览器</p></blockquote><p>第一步: pom文件中导入jar包依赖</p><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--JWT--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.jsonwebtoken<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jjwt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.9.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>第二步: 编写工具类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>case2<span class="token punctuation">.</span>utils<span class="token punctuation">;</span><span class="token keyword">import</span> io<span class="token punctuation">.</span>jsonwebtoken<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span>BASE64Encoder<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>SecretKey<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>spec<span class="token punctuation">.</span>SecretKeySpec<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppJwtUtil</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// TOKEN的有效期一小时（S）</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> TOKEN_TIME_OUT <span class="token operator">=</span> 3_600<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 密钥,不能泄露</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String TOKEN_ENCRY_KEY <span class="token operator">=</span> <span class="token string">"MDk4ZjZiY2Q0NjIxZDM3M2NhZGU0ZTgzMjYyN2I0ZjY"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*        获取token方法 :            userId 是要存到token的用户信息， 如有需要可以添加更多      */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getToken</span><span class="token punctuation">(</span>Integer userId<span class="token punctuation">)</span><span class="token punctuation">{</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> claimMaps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        claimMaps<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"userId"</span><span class="token punctuation">,</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> currentTime <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Jwts<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//jwt编号:随机产生</span>                <span class="token punctuation">.</span><span class="token function">setIssuedAt</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>currentTime<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//签发时间</span>                <span class="token punctuation">.</span><span class="token function">setIssuer</span><span class="token punctuation">(</span><span class="token string">"heima"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//签发者信息</span>                <span class="token punctuation">.</span><span class="token function">setExpiration</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>currentTime <span class="token operator">+</span> TOKEN_TIME_OUT <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//过期时间戳</span>                <span class="token punctuation">.</span><span class="token function">addClaims</span><span class="token punctuation">(</span>claimMaps<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//自定义</span>                <span class="token punctuation">.</span><span class="token function">signWith</span><span class="token punctuation">(</span>SignatureAlgorithm<span class="token punctuation">.</span>HS256<span class="token punctuation">,</span> <span class="token function">generalKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//加密方式</span>                <span class="token punctuation">.</span><span class="token function">compact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取token中的claims信息     *     * @param token     * @return     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Jws<span class="token operator">&lt;</span>Claims<span class="token operator">></span> <span class="token function">getJws</span><span class="token punctuation">(</span>String token<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> Jwts<span class="token punctuation">.</span><span class="token function">parser</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">setSigningKey</span><span class="token punctuation">(</span><span class="token function">generalKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">parseClaimsJws</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取payload body信息(指的是tocken中Payload部分)     * @param token     * @return Claims 是Map     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Claims <span class="token function">getClaimsBody</span><span class="token punctuation">(</span>String token<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">getJws</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ExpiredJwtException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> JwsHeader <span class="token function">getClaimsHeader</span><span class="token punctuation">(</span>String token<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">getJws</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ExpiredJwtException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getClaimsSignature</span><span class="token punctuation">(</span>String token<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">getJws</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ExpiredJwtException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     *     * 检查token     *      1. 检查tocken的完整性和有效期     *      2. 检查失败会报错     *      3. 检查成功返回tocken的playload内容     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Claims <span class="token function">checkToken</span><span class="token punctuation">(</span>String token<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Claims claims <span class="token operator">=</span> <span class="token function">getClaimsBody</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>claims<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>               <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"token解析失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> claims<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ExpiredJwtException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"token已经失效"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"token解析失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 由字符串生成加密key     *     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> SecretKey <span class="token function">generalKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> encodedKey <span class="token operator">=</span> Base64<span class="token punctuation">.</span><span class="token function">getEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>TOKEN_ENCRY_KEY<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*        使用len的第一个len字节构造来自给定字节数组的key ，从offset开始。        构成密钥的字节是key[offset]和key[offset+len-1]之间的字节。        参数            key - 密钥的密钥材料。 将复制以offset开头的数组的第一个len字节，以防止后续修改。            offset - 密钥材料开始的 key中的偏移量。            len - 密钥材料的长度。            algorithm - 与给定密钥材料关联的密钥算法的名称。 AES是一种对称加密算法         */</span>        SecretKey key <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SecretKeySpec</span><span class="token punctuation">(</span>encodedKey<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> encodedKey<span class="token punctuation">.</span>length<span class="token punctuation">,</span> <span class="token string">"AES"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> key<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//测试</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String token <span class="token operator">=</span> <span class="token function">getToken</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>        Claims claims <span class="token operator">=</span> <span class="token function">checkToken</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> xx <span class="token operator">=</span> Base64<span class="token punctuation">.</span><span class="token function">getUrlDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token string">"eyJqdGkiOiIxZjQwYmVkOC03YjQ5LTRkYmQtYjAyNS02YTM4M2U5ZjM5ZTkiLCJpYXQiOjE2MTgxNTU2MTAsImlzcyI6ImhlaW1hIiwiZXhwIjoxNjE4MTU5MjEwLCJpZCI6MX0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//{"jti":"1f40bed8-7b49-4dbd-b025-6a383e9f39e9","iat":1618155610,"iss":"heima","exp":1618159210,"id":1}</span>        String s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>xx<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> yy <span class="token operator">=</span> Base64<span class="token punctuation">.</span><span class="token function">getUrlDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token string">"eyJhbGciOiJIUzI1NiJ9"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//{"jti":"1f40bed8-7b49-4dbd-b025-6a383e9f39e9","iat":1618155610,"iss":"heima","exp":1618159210,"id":1}</span>        String s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>yy<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//{"alg":"HS256"}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>        Object userId <span class="token operator">=</span> claims<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"userId"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object iat <span class="token operator">=</span> claims<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"iat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object exp  <span class="token operator">=</span> claims<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"exp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object jti  <span class="token operator">=</span> claims<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"jti"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object sub   <span class="token operator">=</span> claims<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"sub"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//没有定义的信息是获取不到的</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jti<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>iat<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>exp<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sub<span class="token punctuation">)</span><span class="token punctuation">;</span>        JwsHeader header <span class="token operator">=</span> <span class="token function">getClaimsHeader</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>        String algorithm <span class="token operator">=</span> header<span class="token punctuation">.</span><span class="token function">getAlgorithm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>algorithm<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// HS256</span>        String claimsSignature <span class="token operator">=</span> <span class="token function">getClaimsSignature</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>claimsSignature<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>第三步: 在用户第一次登录成功时,创建tocken并响应给浏览器</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> userId <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> String token <span class="token operator">=</span> AppJwtUtil<span class="token punctuation">.</span><span class="token function">getToken</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span> BaseController<span class="token punctuation">.</span><span class="token function">printResult</span><span class="token punctuation">(</span>resp<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token string">"登录成功！"</span><span class="token punctuation">,</span> token<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="4-2-浏览器保存token"><a href="#4-2-浏览器保存token" class="headerlink" title="4.2 浏览器保存token"></a>4.2 浏览器保存token</h3><p>浏览器保存token可以用cookie或LocalStorage进行保存,我们这里用的是cookie</p><p>第一步: 导入工具cookie.js </p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//保存cookie</span><span class="token keyword">function</span> saveCookie <span class="token punctuation">(</span>name<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> exp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//设置到期时间（一个小时）</span>        exp<span class="token punctuation">.</span><span class="token function">setTime</span><span class="token punctuation">(</span>exp<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span>        document<span class="token punctuation">.</span>cookie <span class="token operator">=</span> name <span class="token operator">+</span> <span class="token string">'='</span> <span class="token operator">+</span> <span class="token function">encodeURI</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">';expires='</span> <span class="token operator">+</span> exp<span class="token punctuation">.</span><span class="token function">toGMTString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//删除cookie</span><span class="token keyword">function</span> delCookie <span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> exp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    exp<span class="token punctuation">.</span><span class="token function">setTime</span><span class="token punctuation">(</span>exp<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> cval <span class="token operator">=</span> <span class="token function">setCookie</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cval <span class="token operator">&amp;&amp;</span> cval <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        document<span class="token punctuation">.</span>cookie <span class="token operator">=</span> name <span class="token operator">+</span> <span class="token string">'='</span> <span class="token operator">+</span> cval <span class="token operator">+</span> <span class="token string">';expires='</span> <span class="token operator">+</span> exp<span class="token punctuation">.</span><span class="token function">toGMTString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>第二步: 在登录成功接收到响应时,保存cookie</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">saveCookie</span><span class="token punctuation">(</span><span class="token string">"auth_token"</span><span class="token punctuation">,</span>resp<span class="token punctuation">.</span>data<span class="token punctuation">.</span>result<span class="token punctuation">)</span></code></pre><h3 id="4-3-浏览器请求头中携带token"><a href="#4-3-浏览器请求头中携带token" class="headerlink" title="4.3 浏览器请求头中携带token"></a>4.3 浏览器请求头中携带token</h3><p>​    登录成功之后,后续ajax请求需要携带token.</p><p>第一步: 设置axios拦截器 (auth_interceptor.js)</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//每次axios请求都会进行拦截</span>axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 在发送请求之前,获取浏览器cookie中的token,加入到请求头中</span>    <span class="token keyword">let</span> token<span class="token operator">=</span><span class="token function">getCookie</span><span class="token punctuation">(</span><span class="token string">"auth_token"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"auth"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">{</span>        req<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>Authorization<span class="token operator">=</span>token<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// alert('token不存在，请重新登录！');</span>    <span class="token comment" spellcheck="true">// window.top.location.href = "login.html";</span>    <span class="token keyword">return</span> req<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 在请求错误时要做的事儿</span>    <span class="token comment" spellcheck="true">// 该返回的数据则是axios.catch(err)中接收的数据</span>    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//响应拦截</span>axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 请求成功对响应数据做处理</span>    <span class="token comment" spellcheck="true">// 该返回的数据则是axios.then(res)中接收的数据</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>response <span class="token operator">&amp;&amp;</span> response<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">alert</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>            window<span class="token punctuation">.</span>top<span class="token punctuation">.</span>location <span class="token operator">=</span> <span class="token string">"login.html"</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> response<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> response<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 在请求错误时要做的事儿</span>    <span class="token comment" spellcheck="true">// 该返回的数据则是axios.catch(err)中接收的数据</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">getCookie</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> prefix <span class="token operator">=</span> name <span class="token operator">+</span> <span class="token string">"="</span>    <span class="token keyword">var</span> start <span class="token operator">=</span> document<span class="token punctuation">.</span>cookie<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>prefix<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> end <span class="token operator">=</span> document<span class="token punctuation">.</span>cookie<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">";"</span><span class="token punctuation">,</span> start <span class="token operator">+</span> prefix<span class="token punctuation">.</span>length<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>end <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        end <span class="token operator">=</span> document<span class="token punctuation">.</span>cookie<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> value <span class="token operator">=</span> document<span class="token punctuation">.</span>cookie<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>start <span class="token operator">+</span> prefix<span class="token punctuation">.</span>length<span class="token punctuation">,</span> end<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token function">decodeURI</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>第二步: 在需要登录权限验证的页面中引入拦截器</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/auth_interceptor.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="4-4-服务器验证token"><a href="#4-4-服务器验证token" class="headerlink" title="4.4 服务器验证token"></a>4.4 服务器验证token</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>case2<span class="token punctuation">.</span>filter<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>case2<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>vo<span class="token punctuation">.</span>Result<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>case2<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>AppJwtUtil<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>case2<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>BaseController<span class="token punctuation">;</span><span class="token keyword">import</span> io<span class="token punctuation">.</span>jsonwebtoken<span class="token punctuation">.</span>Claims<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>WebFilter<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token annotation punctuation">@WebFilter</span><span class="token punctuation">(</span>urlPatterns <span class="token operator">=</span> <span class="token string">"/*"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>    <span class="token operator">/</span><span class="token operator">/</span> 白名单  在名单上的路径不需要拦截    List<span class="token operator">&lt;</span>String<span class="token operator">></span> urlList <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>            <span class="token string">"/"</span><span class="token punctuation">,</span>            <span class="token string">"/loginServlet"</span><span class="token punctuation">,</span>            <span class="token string">"*.html"</span><span class="token punctuation">,</span>            <span class="token string">"*.js"</span><span class="token punctuation">,</span>            <span class="token string">"*.css"</span><span class="token punctuation">,</span>            <span class="token string">"*.png"</span><span class="token punctuation">,</span>            <span class="token string">"*.jpg"</span><span class="token punctuation">,</span>            <span class="token string">"/element-ui/*"</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>FilterConfig filterConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"登录过滤器 已经启动啦"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span>ServletRequest servletRequest<span class="token punctuation">,</span> ServletResponse servletResponse<span class="token punctuation">,</span> FilterChain filterChain<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ServletException <span class="token punctuation">{</span>        HttpServletRequest request <span class="token operator">=</span> <span class="token punctuation">(</span>HttpServletRequest<span class="token punctuation">)</span> servletRequest<span class="token punctuation">;</span>        HttpServletResponse response <span class="token operator">=</span> <span class="token punctuation">(</span>HttpServletResponse<span class="token punctuation">)</span> servletResponse<span class="token punctuation">;</span>        <span class="token operator">/</span><span class="token operator">/</span> 设置允许跨域        <span class="token function">setCros</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">/</span><span class="token operator">/</span> 查看是否是需要放行的路径<span class="token punctuation">,</span>如果是<span class="token punctuation">,</span>则放行<span class="token punctuation">,</span>如果不是检查用户tocken        <span class="token keyword">boolean</span> isExclude <span class="token operator">=</span> <span class="token function">isFilterExcludeRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>isExclude<span class="token punctuation">)</span><span class="token punctuation">{</span>            filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>servletRequest<span class="token punctuation">,</span>servletResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token operator">/</span><span class="token operator">/</span> 检查用户token        String token <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"Authorization"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>token <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token string">""</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            BaseController<span class="token punctuation">.</span><span class="token function">printResult</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token string">"token不存在！"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token operator">/</span><span class="token operator">/</span> 解析token        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Claims claims <span class="token operator">=</span> AppJwtUtil<span class="token punctuation">.</span><span class="token function">checkToken</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>            Integer id <span class="token operator">=</span> <span class="token punctuation">(</span>Integer<span class="token punctuation">)</span>claims<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"userId"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"用户id:"</span> <span class="token operator">+</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>            filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>servletRequest<span class="token punctuation">,</span>servletResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            BaseController<span class="token punctuation">.</span><span class="token function">printResult</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token string">"token过期或无效！"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">setCros</span><span class="token punctuation">(</span>HttpServletResponse response<span class="token punctuation">)</span> <span class="token punctuation">{</span>        response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Allow-Origin"</span><span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Allow-Methods"</span><span class="token punctuation">,</span> <span class="token string">"POST, GET, OPTIONS, DELETE"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Max-Age"</span><span class="token punctuation">,</span> <span class="token string">"3600"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">/</span><span class="token operator">/</span>自定义Authorization请求头用于发送token        response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Allow-Headers"</span><span class="token punctuation">,</span> <span class="token string">"content-type,Authorization"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">/</span><span class="token operator">*</span><span class="token operator">*</span>     <span class="token operator">*</span> 判断是否是 过滤器直接放行的请求     <span class="token operator">*</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span>主要用于静态资源的放行     <span class="token operator">*</span> @<span class="token keyword">return</span>     <span class="token operator">*</span><span class="token operator">/</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isFilterExcludeRequest</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>null <span class="token operator">!=</span> urlList <span class="token operator">&amp;&amp;</span> urlList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            String url <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>String ecludedUrl <span class="token operator">:</span> urlList<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>ecludedUrl<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"*."</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 如果配置的是后缀匹配, 则把前面的*号干掉，然后用endWith来判断</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span>ecludedUrl<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ecludedUrl<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"/*"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>ecludedUrl<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// 前缀匹配，必须要是/开头</span>                        ecludedUrl <span class="token operator">=</span> <span class="token string">"/"</span> <span class="token operator">+</span> ecludedUrl<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">// 如果配置是前缀匹配, 则把最后的*号干掉，然后startWith来判断</span>                    String prffixStr <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getContextPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> ecludedUrl<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> ecludedUrl<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span>prffixStr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 如果不是前缀匹配也不是后缀匹配,那就是全路径匹配</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>ecludedUrl<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// 全路径匹配，也必须要是/开头</span>                        ecludedUrl <span class="token operator">=</span> <span class="token string">"/"</span> <span class="token operator">+</span> ecludedUrl<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    String targetUrl <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getContextPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> ecludedUrl<span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>targetUrl<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文字背景粒子特效</title>
      <link href="/2020/03/27/jQuery+CSS3/"/>
      <url>/2020/03/27/jQuery+CSS3/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>一款jQuery+CSS3的文字背景粒子动画特效，一共6种粒子效果，每种文字背景的粒子效果都不同，有漂浮的有坠落的等等。 </p><h3 id="0x001-特效演示"><a href="#0x001-特效演示" class="headerlink" title="0x001 特效演示"></a>0x001 特效演示</h3><hr><div style="width: 100%;text-align: center; height: 120px; position: relative; bottom: 0px;"><span class="particletext fire" style="font-size:48px;position: relative;">This is fires</span></div><div style="width: 100%;text-align: center; height: 120px; position: relative; bottom: 0px;"> <span class="particletext lines" style="font-size:48px; position: relative;">This is lines</span></div><div style="width: 100%;text-align: center; height: 120px; position: relative; bottom: 0px;"><span class="particletext hearts" style="font-size:48px; position: relative;">This is hearts</span></div><div style="width: 100%;text-align: center; height: 120px; position: relative; bottom: 0px;"> <span class="particletext bubbles" style="font-size:48px; position: relative;">This is bubbles</span></div><div style="width: 100%;text-align: center; height: 120px; position: relative; bottom: 0px;"> <span class="particletext confetti" style="font-size:48px; position: relative;">This is confetti</span></div><div style="width: 100%;text-align: center; height: 120px; position: relative; bottom: 0px;"> <span class="particletext sunbeams" style="font-size:48px; position: relative;">This is sunbeams</span></div><style>.particletext {  }.fire > .particle {  position: absolute;  background-color: rgba(255, 193, 7, 0.5);  border-radius: 40px;  border-top-right-radius: 0px;  -webkit-animation: fires 0.8s linear infinite;          animation: fires 0.8s linear infinite;  -webkit-transform: rotate(-45deg);          transform: rotate(-45deg);  opacity: 0;}/*css keyframes 动画*/@-webkit-keyframes fires {  0% {    -webkit-transform: rotate(-70deg) translateY(0%);            transform: rotate(-70deg) translateY(0%);  }  25% {    -webkit-transform: rotate(-20deg) translateY(-5%);            transform: rotate(-20deg) translateY(-5%);    opacity: 1;  }  50% {    -webkit-transform: rotate(-70deg) translateY(-10%);            transform: rotate(-70deg) translateY(-10%);  }  75% {    -webkit-transform: rotate(-20deg) translateY(-20%);            transform: rotate(-20deg) translateY(-20%);  }  100% {    -webkit-transform: rotate(-70deg) translateY(-40%);            transform: rotate(-70deg) translateY(-40%);    opacity: 1;  }}@keyframes fires {  0% {    -webkit-transform: rotate(-70deg) translateY(0%);            transform: rotate(-70deg) translateY(0%);  }  25% {    -webkit-transform: rotate(-20deg) translateY(-5%);            transform: rotate(-20deg) translateY(-5%);    opacity: 1;  }  50% {    -webkit-transform: rotate(-70deg) translateY(-10%);            transform: rotate(-70deg) translateY(-10%);  }  75% {    -webkit-transform: rotate(-20deg) translateY(-20%);            transform: rotate(-20deg) translateY(-20%);  }  100% {    -webkit-transform: rotate(-70deg) translateY(-40%);            transform: rotate(-70deg) translateY(-40%);    opacity: 1;  }}</style><script type="text/javascript" src="https://code.jquery.com/jquery-3.1.1.min.js"></script><script>function fire() {    $.each($(".particletext.fire"), function(){       var firecount = ($(this).width()/50)*20;       for(var i = 0; i <= firecount; i++) {          var size = $.rnd(8,12);          $(this).append('<span class="particle" style="top:' + $.rnd(40,70) + '%; left:' + $.rnd(-10,100) + '%;width:' + size + 'px; height:' + size + 'px;animation-delay: ' + ($.rnd(0,20)/10) + 's;"></span>');       }    }); } </script><style>.lines > .particle {  position: absolute;  background-color: rgba(244, 67, 54, 0.5);  -webkit-animation: lines 3s linear infinite;          animation: lines 3s linear infinite;}@-webkit-keyframes lines {  0%, 50%, 100% {    -webkit-transform: translateY(0%);            transform: translateY(0%);  }  25% {    -webkit-transform: translateY(100%);            transform: translateY(100%);  }  75% {    -webkit-transform: translateY(-100%);            transform: translateY(-100%);  }}@keyframes lines {  0%, 50%, 100% {    -webkit-transform: translateY(0%);            transform: translateY(0%);  }  25% {    -webkit-transform: translateY(100%);            transform: translateY(100%);  }  75% {    -webkit-transform: translateY(-100%);            transform: translateY(-100%);  }}</style><script>function lines() {    $.each($(".particletext.lines"), function(){       var linecount = ($(this).width()/50)*10;       for(var i = 0; i <= linecount; i++) {          $(this).append('<span class="particle" style="top:' + $.rnd(-30,30) + '%; left:' + $.rnd(-10,110) + '%;width:' + $.rnd(1,3) + 'px; height:' + $.rnd(20,80) + '%;animation-delay: -' + ($.rnd(0,30)/10) + 's;"></span>');       }    }); } </script><style>.hearts > .particle {  opacity: 0;  position: absolute;  background-color: #cc2a5d;  -webkit-animation: hearts 3s ease-in infinite;          animation: hearts 3s ease-in infinite;}.hearts > .particle:before,.hearts > .particle:after {  position: absolute;  content: '';  border-radius: 100px;  top: 0px;  left: 0px;  width: 100%;  height: 100%;  background-color: #cc2a5d;}.hearts > .particle:before {  -webkit-transform: translateX(-50%);          transform: translateX(-50%);}.hearts > .particle:after {  -webkit-transform: translateY(-50%);          transform: translateY(-50%);}@-webkit-keyframes hearts {  0% {    opacity: 0;    -webkit-transform: translate(0, 0%) rotate(45deg);            transform: translate(0, 0%) rotate(45deg);  }  20% {    opacity: 0.8;    -webkit-transform: translate(0, -20%) rotate(45deg);            transform: translate(0, -20%) rotate(45deg);  }  100% {    opacity: 0;    -webkit-transform: translate(0, -1000%) rotate(45deg);            transform: translate(0, -1000%) rotate(45deg);  }}@keyframes hearts {  0% {    opacity: 0;    -webkit-transform: translate(0, 0%) rotate(45deg);            transform: translate(0, 0%) rotate(45deg);  }  20% {    opacity: 0.8;    -webkit-transform: translate(0, -20%) rotate(45deg);            transform: translate(0, -20%) rotate(45deg);  }  100% {    opacity: 0;    -webkit-transform: translate(0, -1000%) rotate(45deg);            transform: translate(0, -1000%) rotate(45deg);  }}</style><script>function hearts() {    $.each($(".particletext.hearts"), function(){       var heartcount = ($(this).width()/50)*5;       for(var i = 0; i <= heartcount; i++) {          var size = ($.rnd(60,120)/10);          $(this).append('<span class="particle" style="top:' + $.rnd(20,80) + '%; left:' + $.rnd(0,95) + '%;width:' + size + 'px; height:' + size + 'px;animation-delay: ' + ($.rnd(0,30)/10) + 's;"></span>');       }    }); } </script><style>.bubbles > .particle {  opacity: 0;  position: absolute;  background-color: rgba(33, 150, 243, 0.5);  -webkit-animation: bubbles 3s ease-in infinite;          animation: bubbles 3s ease-in infinite;  border-radius: 100%;}@-webkit-keyframes bubbles {  0% {    opacity: 0;  }  20% {    opacity: 1;    -webkit-transform: translate(0, -20%);            transform: translate(0, -20%);  }  100% {    opacity: 0;    -webkit-transform: translate(0, -1000%);            transform: translate(0, -1000%);  }}@keyframes bubbles {  0% {    opacity: 0;  }  20% {    opacity: 1;    -webkit-transform: translate(0, -20%);            transform: translate(0, -20%);  }  100% {    opacity: 0;    -webkit-transform: translate(0, -1000%);            transform: translate(0, -1000%);  }}</style><script>function bubbles() {    $.each($(".particletext.bubbles"), function(){       var bubblecount = ($(this).width()/50)*10;       for(var i = 0; i <= bubblecount; i++) {          var size = ($.rnd(40,80)/10);          $(this).append('<span class="particle" style="top:' + $.rnd(20,80) + '%; left:' + $.rnd(0,95) + '%;width:' + size + 'px; height:' + size + 'px;animation-delay: ' + ($.rnd(0,30)/10) + 's;"></span>');       }    }); } </script><style>.confetti > .particle {  opacity: 0;  position: absolute;  -webkit-animation: confetti 3s ease-in infinite;          animation: confetti 3s ease-in infinite;}.confetti > .particle.c1 {  background-color: rgba(76, 175, 80, 0.5);}.confetti > .particle.c2 {  background-color: rgba(156, 39, 176, 0.5);}@-webkit-keyframes confetti {  0% {    opacity: 0;    -webkit-transform: translateY(0%) rotate(0deg);            transform: translateY(0%) rotate(0deg);  }  10% {    opacity: 1;  }  35% {    -webkit-transform: translateY(-800%) rotate(270deg);            transform: translateY(-800%) rotate(270deg);  }  80% {    opacity: 1;  }  100% {    opacity: 0;    -webkit-transform: translateY(2000%) rotate(1440deg);            transform: translateY(2000%) rotate(1440deg);  }}@keyframes confetti {  0% {    opacity: 0;    -webkit-transform: translateY(0%) rotate(0deg);            transform: translateY(0%) rotate(0deg);  }  10% {    opacity: 1;  }  35% {    -webkit-transform: translateY(-800%) rotate(270deg);            transform: translateY(-800%) rotate(270deg);  }  80% {    opacity: 1;  }  100% {    opacity: 0;    -webkit-transform: translateY(2000%) rotate(1440deg);            transform: translateY(2000%) rotate(1440deg);  }}</style><script>function confetti() {    $.each($(".particletext.confetti"), function(){       var confetticount = ($(this).width()/50)*10;       for(var i = 0; i <= confetticount; i++) {          $(this).append('<span class="particle c' + $.rnd(1,2) + '" style="top:' + $.rnd(10,50) + '%; left:' + $.rnd(0,100) + '%;width:' + $.rnd(6,8) + 'px; height:' + $.rnd(3,4) + 'px;animation-delay: ' + ($.rnd(0,30)/10) + 's;"></span>');       }    }); } </script><style>.sunbeams > .particle {  position: absolute;  background-color: rgba(253, 216, 53, 0.5);  -webkit-animation: sunbeams 3s linear infinite;          animation: sunbeams 3s linear infinite;}@-webkit-keyframes sunbeams {  0% {    -webkit-transform: translateY(40%) rotate(0deg);            transform: translateY(40%) rotate(0deg);  }  50% {    -webkit-transform: translateY(-40%) rotate(180deg);            transform: translateY(-40%) rotate(180deg);  }  100% {    -webkit-transform: translateY(40%) rotate(360deg);            transform: translateY(40%) rotate(360deg);  }  0%,14%,17%,43%,53%,71%,80%,94%,100% {    opacity: 0;  }  6%,15%,24%,28%,48%,55%,78%,82%,99% {    opacity: 1;  }}@keyframes sunbeams {  0% {    -webkit-transform: translateY(40%) rotate(0deg);            transform: translateY(40%) rotate(0deg);  }  50% {    -webkit-transform: translateY(-40%) rotate(180deg);            transform: translateY(-40%) rotate(180deg);  }  100% {    -webkit-transform: translateY(40%) rotate(360deg);            transform: translateY(40%) rotate(360deg);  }  0%,14%,17%,43%,53%,71%,80%,94%,100% {    opacity: 0;  }  6%,15%,24%,28%,48%,55%,78%,82%,99% {    opacity: 1;  }}</style><script>function sunbeams() {    $.each($(".particletext.sunbeams"), function(){       var linecount = ($(this).width()/50)*10;       for(var i = 0; i <= linecount; i++) {          $(this).append('<span class="particle" style="top:' + $.rnd(-50,00) + '%; left:' + $.rnd(0,100) + '%;width:' + $.rnd(1,3) + 'px; height:' + $.rnd(80,160) + '%;animation-delay: -' + ($.rnd(0,30)/10) + 's;"></span>');       }    }); } </script><script type="text/javascript">  function initparticles() {       bubbles();       hearts();       lines();       confetti();       fire();       sunbeams();     }  jQuery.rnd = function(m,n) {      m = parseInt(m);      n = parseInt(n);      return Math.floor( Math.random() * (n - m + 1) ) + m;  }  initparticles();</script><h3 id="0x002-Fires-特效"><a href="#0x002-Fires-特效" class="headerlink" title="0x002 Fires 特效"></a>0x002 Fires 特效</h3><h4 id="1-JS-代码"><a href="#1-JS-代码" class="headerlink" title="1. JS 代码"></a>1. JS 代码</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">function</span> <span class="token function">fire</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    $<span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".particletext.fire"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">var</span> firecount <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">20</span><span class="token punctuation">;</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> firecount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">var</span> size <span class="token operator">=</span> $<span class="token punctuation">.</span><span class="token function">rnd</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'&lt;span class="particle" style="top:'</span> <span class="token operator">+</span> $<span class="token punctuation">.</span><span class="token function">rnd</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">70</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'%; left:'</span> <span class="token operator">+</span> $<span class="token punctuation">.</span><span class="token function">rnd</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'%;width:'</span> <span class="token operator">+</span> size <span class="token operator">+</span> <span class="token string">'px; height:'</span> <span class="token operator">+</span> size <span class="token operator">+</span> <span class="token string">'px;animation-delay: '</span> <span class="token operator">+</span> <span class="token punctuation">(</span>$<span class="token punctuation">.</span><span class="token function">rnd</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'s;">&lt;/span>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>   jQuery<span class="token punctuation">.</span>rnd <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>      m <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>      n <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token operator">+</span> m<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">fire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h4 id="2-CSS-代码"><a href="#2-CSS-代码" class="headerlink" title="2. CSS 代码"></a>2. CSS 代码</h4><pre class=" language-css"><code class="language-css"><span class="token selector">&lt;style><span class="token class">.fire</span> > <span class="token class">.particle</span> </span><span class="token punctuation">{</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">255</span>, <span class="token number">193</span>, <span class="token number">7</span>, <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">40</span>px<span class="token punctuation">;</span>  <span class="token property">border-top-right-radius</span><span class="token punctuation">:</span> <span class="token number">0</span>px<span class="token punctuation">;</span>  <span class="token property">-webkit-animation</span><span class="token punctuation">:</span> fires <span class="token number">0.8</span>s linear infinite<span class="token punctuation">;</span>          <span class="token property">animation</span><span class="token punctuation">:</span> fires <span class="token number">0.8</span>s linear infinite<span class="token punctuation">;</span>  <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>-<span class="token number">45</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>-<span class="token number">45</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@-webkit-keyframes</span> fires</span> <span class="token punctuation">{</span>  <span class="token selector">0% </span><span class="token punctuation">{</span>    <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>-<span class="token number">70</span>deg<span class="token punctuation">)</span> <span class="token function">translateY</span><span class="token punctuation">(</span><span class="token number">0%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>-<span class="token number">70</span>deg<span class="token punctuation">)</span> <span class="token function">translateY</span><span class="token punctuation">(</span><span class="token number">0%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">25% </span><span class="token punctuation">{</span>    <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>-<span class="token number">20</span>deg<span class="token punctuation">)</span> <span class="token function">translateY</span><span class="token punctuation">(</span>-<span class="token number">5%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>-<span class="token number">20</span>deg<span class="token punctuation">)</span> <span class="token function">translateY</span><span class="token punctuation">(</span>-<span class="token number">5%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">50% </span><span class="token punctuation">{</span>    <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>-<span class="token number">70</span>deg<span class="token punctuation">)</span> <span class="token function">translateY</span><span class="token punctuation">(</span>-<span class="token number">10%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>-<span class="token number">70</span>deg<span class="token punctuation">)</span> <span class="token function">translateY</span><span class="token punctuation">(</span>-<span class="token number">10%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">75% </span><span class="token punctuation">{</span>    <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>-<span class="token number">20</span>deg<span class="token punctuation">)</span> <span class="token function">translateY</span><span class="token punctuation">(</span>-<span class="token number">20%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>-<span class="token number">20</span>deg<span class="token punctuation">)</span> <span class="token function">translateY</span><span class="token punctuation">(</span>-<span class="token number">20%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">100% </span><span class="token punctuation">{</span>    <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>-<span class="token number">70</span>deg<span class="token punctuation">)</span> <span class="token function">translateY</span><span class="token punctuation">(</span>-<span class="token number">40%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>-<span class="token number">70</span>deg<span class="token punctuation">)</span> <span class="token function">translateY</span><span class="token punctuation">(</span>-<span class="token number">40%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@keyframes</span> fires</span> <span class="token punctuation">{</span>  <span class="token selector">0% </span><span class="token punctuation">{</span>    <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>-<span class="token number">70</span>deg<span class="token punctuation">)</span> <span class="token function">translateY</span><span class="token punctuation">(</span><span class="token number">0%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>-<span class="token number">70</span>deg<span class="token punctuation">)</span> <span class="token function">translateY</span><span class="token punctuation">(</span><span class="token number">0%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">25% </span><span class="token punctuation">{</span>    <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>-<span class="token number">20</span>deg<span class="token punctuation">)</span> <span class="token function">translateY</span><span class="token punctuation">(</span>-<span class="token number">5%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>-<span class="token number">20</span>deg<span class="token punctuation">)</span> <span class="token function">translateY</span><span class="token punctuation">(</span>-<span class="token number">5%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">50% </span><span class="token punctuation">{</span>    <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>-<span class="token number">70</span>deg<span class="token punctuation">)</span> <span class="token function">translateY</span><span class="token punctuation">(</span>-<span class="token number">10%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>-<span class="token number">70</span>deg<span class="token punctuation">)</span> <span class="token function">translateY</span><span class="token punctuation">(</span>-<span class="token number">10%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">75% </span><span class="token punctuation">{</span>    <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>-<span class="token number">20</span>deg<span class="token punctuation">)</span> <span class="token function">translateY</span><span class="token punctuation">(</span>-<span class="token number">20%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>-<span class="token number">20</span>deg<span class="token punctuation">)</span> <span class="token function">translateY</span><span class="token punctuation">(</span>-<span class="token number">20%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">100% </span><span class="token punctuation">{</span>    <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>-<span class="token number">70</span>deg<span class="token punctuation">)</span> <span class="token function">translateY</span><span class="token punctuation">(</span>-<span class="token number">40%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>-<span class="token number">70</span>deg<span class="token punctuation">)</span> <span class="token function">translateY</span><span class="token punctuation">(</span>-<span class="token number">40%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>&lt;/style></code></pre><h4 id="3-HTML-代码"><a href="#3-HTML-代码" class="headerlink" title="3. HTML 代码"></a>3. HTML 代码</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span><span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">120</span>px<span class="token punctuation">;</span> <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span> <span class="token property">bottom</span><span class="token punctuation">:</span> <span class="token number">0</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>particletext fire<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">font-size</span><span class="token punctuation">:</span><span class="token number">48</span>px<span class="token punctuation">;</span><span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>This is fires<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h3 id="0x003-Lines-特效"><a href="#0x003-Lines-特效" class="headerlink" title="0x003 Lines 特效"></a>0x003 Lines 特效</h3><h4 id="1-JS-代码-1"><a href="#1-JS-代码-1" class="headerlink" title="1. JS 代码"></a>1. JS 代码</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">function</span> <span class="token function">lines</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    $<span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".particletext.lines"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">var</span> linecount <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">;</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> linecount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'&lt;span class="particle" style="top:'</span> <span class="token operator">+</span> $<span class="token punctuation">.</span><span class="token function">rnd</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'%; left:'</span> <span class="token operator">+</span> $<span class="token punctuation">.</span><span class="token function">rnd</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">110</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'%;width:'</span> <span class="token operator">+</span> $<span class="token punctuation">.</span><span class="token function">rnd</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'px; height:'</span> <span class="token operator">+</span> $<span class="token punctuation">.</span><span class="token function">rnd</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'%;animation-delay: -'</span> <span class="token operator">+</span> <span class="token punctuation">(</span>$<span class="token punctuation">.</span><span class="token function">rnd</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'s;">&lt;/span>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>   jQuery<span class="token punctuation">.</span>rnd <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>      m <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>      n <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token operator">+</span> m<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">lines</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h4 id="2-CSS-代码-1"><a href="#2-CSS-代码-1" class="headerlink" title="2. CSS 代码"></a>2. CSS 代码</h4><pre class=" language-css"><code class="language-css"><span class="token selector">&lt;style><span class="token class">.lines</span> > <span class="token class">.particle</span> </span><span class="token punctuation">{</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">244</span>, <span class="token number">67</span>, <span class="token number">54</span>, <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">-webkit-animation</span><span class="token punctuation">:</span> lines <span class="token number">3</span>s linear infinite<span class="token punctuation">;</span>          <span class="token property">animation</span><span class="token punctuation">:</span> lines <span class="token number">3</span>s linear infinite<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@-webkit-keyframes</span> lines</span> <span class="token punctuation">{</span>  <span class="token selector">0%, 50%, 100% </span><span class="token punctuation">{</span>    <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span><span class="token number">0%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span><span class="token number">0%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">25% </span><span class="token punctuation">{</span>    <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span><span class="token number">100%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span><span class="token number">100%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">75% </span><span class="token punctuation">{</span>    <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>-<span class="token number">100%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>-<span class="token number">100%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@keyframes</span> lines</span> <span class="token punctuation">{</span>  <span class="token selector">0%, 50%, 100% </span><span class="token punctuation">{</span>    <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span><span class="token number">0%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span><span class="token number">0%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">25% </span><span class="token punctuation">{</span>    <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span><span class="token number">100%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span><span class="token number">100%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">75% </span><span class="token punctuation">{</span>    <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>-<span class="token number">100%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>-<span class="token number">100%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>&lt;/style></code></pre><h4 id="3-HTML-代码-1"><a href="#3-HTML-代码-1" class="headerlink" title="3. HTML 代码"></a>3. HTML 代码</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span><span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">120</span>px<span class="token punctuation">;</span> <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span> <span class="token property">bottom</span><span class="token punctuation">:</span> <span class="token number">0</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span> <span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>particletext lines<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">font-size</span><span class="token punctuation">:</span><span class="token number">48</span>px<span class="token punctuation">;</span> <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>This is lines<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h3 id="0x004-Hearts-特效"><a href="#0x004-Hearts-特效" class="headerlink" title="0x004 Hearts 特效"></a>0x004 Hearts 特效</h3><h4 id="1-JS-代码-2"><a href="#1-JS-代码-2" class="headerlink" title="1. JS 代码"></a>1. JS 代码</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">function</span> <span class="token function">hearts</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    $<span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".particletext.hearts"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">var</span> heartcount <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">5</span><span class="token punctuation">;</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> heartcount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">var</span> size <span class="token operator">=</span> <span class="token punctuation">(</span>$<span class="token punctuation">.</span><span class="token function">rnd</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">120</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'&lt;span class="particle" style="top:'</span> <span class="token operator">+</span> $<span class="token punctuation">.</span><span class="token function">rnd</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'%; left:'</span> <span class="token operator">+</span> $<span class="token punctuation">.</span><span class="token function">rnd</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">95</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'%;width:'</span> <span class="token operator">+</span> size <span class="token operator">+</span> <span class="token string">'px; height:'</span> <span class="token operator">+</span> size <span class="token operator">+</span> <span class="token string">'px;animation-delay: '</span> <span class="token operator">+</span> <span class="token punctuation">(</span>$<span class="token punctuation">.</span><span class="token function">rnd</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'s;">&lt;/span>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>   jQuery<span class="token punctuation">.</span>rnd <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>      m <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>      n <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token operator">+</span> m<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">hearts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h4 id="2-CSS-代码-2"><a href="#2-CSS-代码-2" class="headerlink" title="2. CSS 代码"></a>2. CSS 代码</h4><pre class=" language-css"><code class="language-css"><span class="token selector">&lt;style><span class="token class">.hearts</span> > <span class="token class">.particle</span> </span><span class="token punctuation">{</span>  <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#cc2a5d</span><span class="token punctuation">;</span>  <span class="token property">-webkit-animation</span><span class="token punctuation">:</span> hearts <span class="token number">3</span>s ease-in infinite<span class="token punctuation">;</span>          <span class="token property">animation</span><span class="token punctuation">:</span> hearts <span class="token number">3</span>s ease-in infinite<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.hearts</span> > <span class="token class">.particle</span><span class="token pseudo-element">:before</span>, <span class="token class">.hearts</span> > <span class="token class">.particle</span><span class="token pseudo-element">:after</span> </span><span class="token punctuation">{</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>  <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span>px<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span>px<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#cc2a5d</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.hearts</span> > <span class="token class">.particle</span><span class="token pseudo-element">:before</span> </span><span class="token punctuation">{</span>  <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span>-<span class="token number">50%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span>-<span class="token number">50%</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.hearts</span> > <span class="token class">.particle</span><span class="token pseudo-element">:after</span> </span><span class="token punctuation">{</span>  <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>-<span class="token number">50%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>-<span class="token number">50%</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@-webkit-keyframes</span> hearts</span> <span class="token punctuation">{</span>  <span class="token selector">0% </span><span class="token punctuation">{</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0%</span><span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">45</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0%</span><span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">45</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">20% </span><span class="token punctuation">{</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">0.8</span><span class="token punctuation">;</span>    <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span><span class="token number">0</span>, -<span class="token number">20%</span><span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">45</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span><span class="token number">0</span>, -<span class="token number">20%</span><span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">45</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">100% </span><span class="token punctuation">{</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span><span class="token number">0</span>, -<span class="token number">1000%</span><span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">45</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span><span class="token number">0</span>, -<span class="token number">1000%</span><span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">45</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@keyframes</span> hearts</span> <span class="token punctuation">{</span>  <span class="token selector">0% </span><span class="token punctuation">{</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0%</span><span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">45</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0%</span><span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">45</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">20% </span><span class="token punctuation">{</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">0.8</span><span class="token punctuation">;</span>    <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span><span class="token number">0</span>, -<span class="token number">20%</span><span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">45</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span><span class="token number">0</span>, -<span class="token number">20%</span><span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">45</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">100% </span><span class="token punctuation">{</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span><span class="token number">0</span>, -<span class="token number">1000%</span><span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">45</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span><span class="token number">0</span>, -<span class="token number">1000%</span><span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">45</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>&lt;/style></code></pre><h4 id="3-HTML-代码-2"><a href="#3-HTML-代码-2" class="headerlink" title="3. HTML 代码"></a>3. HTML 代码</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span><span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">120</span>px<span class="token punctuation">;</span> <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span> <span class="token property">bottom</span><span class="token punctuation">:</span> <span class="token number">0</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>particletext hearts<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">font-size</span><span class="token punctuation">:</span><span class="token number">48</span>px<span class="token punctuation">;</span> <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>This is hearts<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h3 id="0x005-Bubbles-特效"><a href="#0x005-Bubbles-特效" class="headerlink" title="0x005 Bubbles 特效"></a>0x005 Bubbles 特效</h3><h4 id="1-JS-代码-3"><a href="#1-JS-代码-3" class="headerlink" title="1. JS 代码"></a>1. JS 代码</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">function</span> <span class="token function">bubbles</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    $<span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".particletext.bubbles"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">var</span> bubblecount <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">;</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> bubblecount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">var</span> size <span class="token operator">=</span> <span class="token punctuation">(</span>$<span class="token punctuation">.</span><span class="token function">rnd</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'&lt;span class="particle" style="top:'</span> <span class="token operator">+</span> $<span class="token punctuation">.</span><span class="token function">rnd</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'%; left:'</span> <span class="token operator">+</span> $<span class="token punctuation">.</span><span class="token function">rnd</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">95</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'%;width:'</span> <span class="token operator">+</span> size <span class="token operator">+</span> <span class="token string">'px; height:'</span> <span class="token operator">+</span> size <span class="token operator">+</span> <span class="token string">'px;animation-delay: '</span> <span class="token operator">+</span> <span class="token punctuation">(</span>$<span class="token punctuation">.</span><span class="token function">rnd</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'s;">&lt;/span>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>   jQuery<span class="token punctuation">.</span>rnd <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>      m <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>      n <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token operator">+</span> m<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">bubbles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h4 id="2-CSS-代码-3"><a href="#2-CSS-代码-3" class="headerlink" title="2. CSS 代码"></a>2. CSS 代码</h4><pre class=" language-css"><code class="language-css"><span class="token selector">&lt;style>&lt;style><span class="token class">.bubbles</span> > <span class="token class">.particle</span> </span><span class="token punctuation">{</span>  <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">33</span>, <span class="token number">150</span>, <span class="token number">243</span>, <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">-webkit-animation</span><span class="token punctuation">:</span> bubbles <span class="token number">3</span>s ease-in infinite<span class="token punctuation">;</span>          <span class="token property">animation</span><span class="token punctuation">:</span> bubbles <span class="token number">3</span>s ease-in infinite<span class="token punctuation">;</span>  <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@-webkit-keyframes</span> bubbles</span> <span class="token punctuation">{</span>  <span class="token selector">0% </span><span class="token punctuation">{</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">20% </span><span class="token punctuation">{</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span><span class="token number">0</span>, -<span class="token number">20%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span><span class="token number">0</span>, -<span class="token number">20%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">100% </span><span class="token punctuation">{</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span><span class="token number">0</span>, -<span class="token number">1000%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span><span class="token number">0</span>, -<span class="token number">1000%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@keyframes</span> bubbles</span> <span class="token punctuation">{</span>  <span class="token selector">0% </span><span class="token punctuation">{</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">20% </span><span class="token punctuation">{</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span><span class="token number">0</span>, -<span class="token number">20%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span><span class="token number">0</span>, -<span class="token number">20%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">100% </span><span class="token punctuation">{</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span><span class="token number">0</span>, -<span class="token number">1000%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span><span class="token number">0</span>, -<span class="token number">1000%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>&lt;/style></code></pre><h4 id="3-HTML-代码-3"><a href="#3-HTML-代码-3" class="headerlink" title="3. HTML 代码"></a>3. HTML 代码</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span><span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">120</span>px<span class="token punctuation">;</span> <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span> <span class="token property">bottom</span><span class="token punctuation">:</span> <span class="token number">0</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span> <span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>particletext bubbles<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">font-size</span><span class="token punctuation">:</span><span class="token number">48</span>px<span class="token punctuation">;</span> <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>This is bubbles<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h3 id="0x006-Confetti-特效"><a href="#0x006-Confetti-特效" class="headerlink" title="0x006 Confetti 特效"></a>0x006 Confetti 特效</h3><h4 id="1-JS-代码-4"><a href="#1-JS-代码-4" class="headerlink" title="1. JS 代码"></a>1. JS 代码</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">function</span> <span class="token function">confetti</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    $<span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".particletext.confetti"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">var</span> confetticount <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">;</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> confetticount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'&lt;span class="particle c'</span> <span class="token operator">+</span> $<span class="token punctuation">.</span><span class="token function">rnd</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'" style="top:'</span> <span class="token operator">+</span> $<span class="token punctuation">.</span><span class="token function">rnd</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'%; left:'</span> <span class="token operator">+</span> $<span class="token punctuation">.</span><span class="token function">rnd</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'%;width:'</span> <span class="token operator">+</span> $<span class="token punctuation">.</span><span class="token function">rnd</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'px; height:'</span> <span class="token operator">+</span> $<span class="token punctuation">.</span><span class="token function">rnd</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'px;animation-delay: '</span> <span class="token operator">+</span> <span class="token punctuation">(</span>$<span class="token punctuation">.</span><span class="token function">rnd</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'s;">&lt;/span>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>   jQuery<span class="token punctuation">.</span>rnd <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>      m <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>      n <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token operator">+</span> m<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">confetti</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h4 id="2-CSS-代码-4"><a href="#2-CSS-代码-4" class="headerlink" title="2. CSS 代码"></a>2. CSS 代码</h4><pre class=" language-css"><code class="language-css"><span class="token selector">&lt;style><span class="token class">.confetti</span> > <span class="token class">.particle</span> </span><span class="token punctuation">{</span>  <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">-webkit-animation</span><span class="token punctuation">:</span> confetti <span class="token number">3</span>s ease-in infinite<span class="token punctuation">;</span>          <span class="token property">animation</span><span class="token punctuation">:</span> confetti <span class="token number">3</span>s ease-in infinite<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.confetti</span> > <span class="token class">.particle.c1</span> </span><span class="token punctuation">{</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">76</span>, <span class="token number">175</span>, <span class="token number">80</span>, <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.confetti</span> > <span class="token class">.particle.c2</span> </span><span class="token punctuation">{</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">156</span>, <span class="token number">39</span>, <span class="token number">176</span>, <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@-webkit-keyframes</span> confetti</span> <span class="token punctuation">{</span>  <span class="token selector">0% </span><span class="token punctuation">{</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span><span class="token number">0%</span><span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">0</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span><span class="token number">0%</span><span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">0</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">10% </span><span class="token punctuation">{</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">35% </span><span class="token punctuation">{</span>    <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>-<span class="token number">800%</span><span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">270</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>-<span class="token number">800%</span><span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">270</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">80% </span><span class="token punctuation">{</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">100% </span><span class="token punctuation">{</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span><span class="token number">2000%</span><span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">1440</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span><span class="token number">2000%</span><span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">1440</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@keyframes</span> confetti</span> <span class="token punctuation">{</span>  <span class="token selector">0% </span><span class="token punctuation">{</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span><span class="token number">0%</span><span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">0</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span><span class="token number">0%</span><span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">0</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">10% </span><span class="token punctuation">{</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">35% </span><span class="token punctuation">{</span>    <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>-<span class="token number">800%</span><span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">270</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>-<span class="token number">800%</span><span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">270</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">80% </span><span class="token punctuation">{</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">100% </span><span class="token punctuation">{</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span><span class="token number">2000%</span><span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">1440</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span><span class="token number">2000%</span><span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">1440</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>&lt;/style></code></pre><h4 id="3-HTML-代码-4"><a href="#3-HTML-代码-4" class="headerlink" title="3. HTML 代码"></a>3. HTML 代码</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span><span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">120</span>px<span class="token punctuation">;</span> <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span> <span class="token property">bottom</span><span class="token punctuation">:</span> <span class="token number">0</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span> <span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>particletext confetti<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">font-size</span><span class="token punctuation">:</span><span class="token number">48</span>px<span class="token punctuation">;</span> <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>This is confetti<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h3 id="0x007-Sunbeams-特效"><a href="#0x007-Sunbeams-特效" class="headerlink" title="0x007 Sunbeams 特效"></a>0x007 Sunbeams 特效</h3><h4 id="1-JS-代码-5"><a href="#1-JS-代码-5" class="headerlink" title="1. JS 代码"></a>1. JS 代码</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">function</span> <span class="token function">sunbeams</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    $<span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".particletext.sunbeams"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">var</span> linecount <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">;</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> linecount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'&lt;span class="particle" style="top:'</span> <span class="token operator">+</span> $<span class="token punctuation">.</span><span class="token function">rnd</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">00</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'%; left:'</span> <span class="token operator">+</span> $<span class="token punctuation">.</span><span class="token function">rnd</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'%;width:'</span> <span class="token operator">+</span> $<span class="token punctuation">.</span><span class="token function">rnd</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'px; height:'</span> <span class="token operator">+</span> $<span class="token punctuation">.</span><span class="token function">rnd</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">160</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'%;animation-delay: -'</span> <span class="token operator">+</span> <span class="token punctuation">(</span>$<span class="token punctuation">.</span><span class="token function">rnd</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'s;">&lt;/span>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>   jQuery<span class="token punctuation">.</span>rnd <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>      m <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>      n <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token operator">+</span> m<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">sunbeams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h4 id="2-CSS-代码-5"><a href="#2-CSS-代码-5" class="headerlink" title="2. CSS 代码"></a>2. CSS 代码</h4><pre class=" language-css"><code class="language-css"><span class="token selector">&lt;style><span class="token class">.sunbeams</span> > <span class="token class">.particle</span> </span><span class="token punctuation">{</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">253</span>, <span class="token number">216</span>, <span class="token number">53</span>, <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">-webkit-animation</span><span class="token punctuation">:</span> sunbeams <span class="token number">3</span>s linear infinite<span class="token punctuation">;</span>          <span class="token property">animation</span><span class="token punctuation">:</span> sunbeams <span class="token number">3</span>s linear infinite<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@-webkit-keyframes</span> sunbeams</span> <span class="token punctuation">{</span>  <span class="token selector">0% </span><span class="token punctuation">{</span>    <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span><span class="token number">40%</span><span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">0</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span><span class="token number">40%</span><span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">0</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">50% </span><span class="token punctuation">{</span>    <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>-<span class="token number">40%</span><span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">180</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>-<span class="token number">40%</span><span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">180</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">100% </span><span class="token punctuation">{</span>    <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span><span class="token number">40%</span><span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">360</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span><span class="token number">40%</span><span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">360</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">0%,14%,17%,43%,53%,71%,80%,94%,100% </span><span class="token punctuation">{</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">6%,15%,24%,28%,48%,55%,78%,82%,99% </span><span class="token punctuation">{</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@keyframes</span> sunbeams</span> <span class="token punctuation">{</span>  <span class="token selector">0% </span><span class="token punctuation">{</span>    <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span><span class="token number">40%</span><span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">0</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span><span class="token number">40%</span><span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">0</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">50% </span><span class="token punctuation">{</span>    <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>-<span class="token number">40%</span><span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">180</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>-<span class="token number">40%</span><span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">180</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">100% </span><span class="token punctuation">{</span>    <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span><span class="token number">40%</span><span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">360</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span><span class="token number">40%</span><span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">360</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">0%,14%,17%,43%,53%,71%,80%,94%,100% </span><span class="token punctuation">{</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">6%,15%,24%,28%,48%,55%,78%,82%,99% </span><span class="token punctuation">{</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>&lt;/style></code></pre><h4 id="3-HTML-代码-5"><a href="#3-HTML-代码-5" class="headerlink" title="3. HTML 代码"></a>3. HTML 代码</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span><span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">120</span>px<span class="token punctuation">;</span> <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span> <span class="token property">bottom</span><span class="token punctuation">:</span> <span class="token number">0</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>particletext sunbeams<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">font-size</span><span class="token punctuation">:</span><span class="token number">48</span>px<span class="token punctuation">;</span> <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>This is sunbeams<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery+CSS3 </tag>
            
            <tag> 粒子特效 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS的基础使用</title>
      <link href="/2020/03/15/CSS%E5%9F%BA%E7%A1%80/"/>
      <url>/2020/03/15/CSS%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="1、CSS的使用"><a href="#1、CSS的使用" class="headerlink" title="1、CSS的使用"></a>1、CSS的使用</h1><h2 id="1、css的三种引入方式"><a href="#1、css的三种引入方式" class="headerlink" title="1、css的三种引入方式"></a>1、css的三种引入方式</h2><h3 id="1、行内样式"><a href="#1、行内样式" class="headerlink" title="1、行内样式"></a>1、行内样式</h3><pre class=" language-css"><code class="language-css"><span class="token number">1.</span> 行内样式    a<span class="token number">.</span> 含义<span class="token punctuation">:</span> 就是写在当前标签内的样式    b<span class="token number">.</span> 每个标签都有style属性        style = <span class="token string">"css样式"</span>    c<span class="token number">.</span> 只对当前的标签起作用 &lt;span style=<span class="token string">"color:red;font-size:30px"</span>>span<span class="token number">1</span>&lt;/span></code></pre><h3 id="2、-内部样式"><a href="#2、-内部样式" class="headerlink" title="2、 内部样式"></a>2、 内部样式</h3><pre class=" language-css"><code class="language-css"><span class="token selector">2. 内部样式    a. 含义: 写在当前html中的样式    b. 在当前html中写一个style标签,在标签内部        选择器</span><span class="token punctuation">{</span> css样式 <span class="token punctuation">}</span>    <span class="token selector">c. 对当前html中的相应标签(选择器决定的)起作用&lt;head>    &lt;meta charset="UTF-8">    &lt;title>01-HTML引入CSS&lt;/title>    &lt;style type="text/css">        span</span><span class="token punctuation">{</span>            <span class="token property">color</span> <span class="token punctuation">:</span> green<span class="token punctuation">;</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">40</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    &lt;/style>&lt;/head></code></pre><h3 id="3、-外部样式"><a href="#3、-外部样式" class="headerlink" title="3、 外部样式"></a>3、 外部样式</h3><pre class=" language-css"><code class="language-css"><span class="token selector">3. 外部样式    a. 含义: 单独的编写一个css文件,然后引入到html中 (css文件复用性更好,其他html也可以用)    b. css文件里面: 直接写        选择器</span><span class="token punctuation">{</span>css样式<span class="token punctuation">}</span>    c<span class="token number">.</span> 引入到html中        &lt;link rel=<span class="token string">"stylesheet"</span> href=<span class="token string">"../css/my.css"</span>>        <span class="token number">1.</span> <span class="token function">rel</span><span class="token punctuation">(</span>relative<span class="token punctuation">)</span> 后面是一个固定值<span class="token property">stylesheet</span> <span class="token punctuation">:</span> 声明引入的是一                        个css文件        <span class="token number">2.</span> <span class="token property">href</span> <span class="token punctuation">:</span> 链接,写css文件即可<span class="token punctuation">(</span>远程和本地<span class="token punctuation">)</span>&lt;head>    &lt;meta charset=<span class="token string">"UTF-8"</span>>    &lt;title><span class="token number">01</span>-HTML引入CSS&lt;/title>     &lt;link rel=<span class="token string">"stylesheet"</span> href=<span class="token string">"../css/my.css"</span>>&lt;/head></code></pre><p>注意：</p><ol><li>优先级 (基于相同属性,如果不同属性是叠加)<pre><code>            行内样式 &gt; 内部 = 外部</code></pre></li><li>html页面被浏览器从上至下加载,后加载会覆盖先加载的</li><li>style标签和link标签放在html中任意位置,规范放head标签内</li><li>style标签的 type属性是可以省略的, 固定值 text/css : 声明当前是css语法</li></ol><h2 id="2、基本语法"><a href="#2、基本语法" class="headerlink" title="2、基本语法"></a>2、基本语法</h2><pre class=" language-css"><code class="language-css">    <span class="token selector">css语法:        css属性名1 : css属性值1;        css属性名2 : css属性值2a css属性值2b css属性值2c;    1. 样式名多个单词用横杠分割 font-size (java 小驼峰: fontSize)    2. 样式值多个单词用空格分割 border: 1px solid blue (宽度 实线 颜色)    3. 多个样式之间，以分号分割&lt;!DOCTYPE html>&lt;html lang="zh-CN">&lt;head>    &lt;meta charset="UTF-8">    &lt;title>02-CSS语法&lt;/title>    &lt;style>        span</span><span class="token punctuation">{</span>            <span class="token property">color</span> <span class="token punctuation">:</span> red<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid blue<span class="token punctuation">;</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">50</span>px        <span class="token punctuation">}</span>    &lt;/style>&lt;/head>&lt;body>    &lt;span style=<span class="token string">"font-size: 50px"</span>>样式名多个单词用横杠分割&lt;/span>&lt;br/>    &lt;span>样式值多个单词用空格分割&lt;/span>&lt;br/>    &lt;span>多个样式之间，以分号分割&lt;/span>&lt;br/>&lt;/body>&lt;/html></code></pre><h2 id="3、选择器"><a href="#3、选择器" class="headerlink" title="3、选择器"></a>3、选择器</h2><ol><li>标签选择器</li><li>class选择器</li><li>id选择器</li></ol><h3 id="1、标签选择器"><a href="#1、标签选择器" class="headerlink" title="1、标签选择器"></a>1、标签选择器</h3><pre class=" language-css"><code class="language-css"><span class="token selector">标签名选择器的格式是：标签名</span><span class="token punctuation">{</span>     属性：值<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">span</span><span class="token punctuation">{</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span>&lt;span>马尔扎哈&lt;/span></code></pre><h3 id="2、class选择器"><a href="#2、class选择器" class="headerlink" title="2、class选择器"></a>2、class选择器</h3><pre class=" language-css"><code class="language-css"><span class="token selector">2. class选择器 -> 类加载器   ：可以用很多次    1). 每个标签都有class属性,属性值可以重复,而且还可以设置多个值    2). 语法        .类选择器名字</span><span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.female</span> -> 选中class=female的一组标签<span class="token class">.female</span></span><span class="token punctuation">{</span>    <span class="token property">color</span> <span class="token punctuation">:</span> green<span class="token punctuation">;</span><span class="token punctuation">}</span>&lt;span class=<span class="token string">"female"</span>>古力娜扎&lt;/span></code></pre><h3 id="3、id选择器"><a href="#3、id选择器" class="headerlink" title="3、id选择器"></a>3、id选择器</h3><pre class=" language-css"><code class="language-css"><span class="token selector">1. id选择器,只能用一次    1). 每个标签都有id属性,属性值必须唯一    2). 语法        <span class="token id">#id</span>值        <span class="token id">#boss</span> -> 选中id=boss的标签    3). 特点: 一般只选中一个标签<span class="token id">#boss</span></span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span>&lt;span id=<span class="token string">"boss"</span>>灭霸&lt;/span></code></pre><h3 id="4、组合（并集）选择器"><a href="#4、组合（并集）选择器" class="headerlink" title="4、组合（并集）选择器"></a>4、组合（并集）选择器</h3><pre class=" language-css"><code class="language-css"><span class="token selector">组合选择器的格式是：     选择器 1，选择器 2，选择器 n</span><span class="token punctuation">{</span>        属性：值<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token selector">组合选择器可以让多个选择器共用同一个 css 样式代码。<span class="token class">.class01</span> , <span class="token id">#id01</span>，span</span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>     <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>     <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px yellow solid<span class="token punctuation">;</span><span class="token punctuation">}</span>&lt;div id=<span class="token string">"id01"</span>>div 标签 class<span class="token number">01</span>&lt;/div> &lt;br /> &lt;span >span 标签&lt;/span> &lt;br /> &lt;div class=<span class="token string">"class01"</span>>div 标签&lt;/div> &lt;br /> &lt;div>div 标签 id<span class="token number">01</span>&lt;/div> &lt;br /></code></pre><h3 id="5、子类选择器（只找一级子元素）"><a href="#5、子类选择器（只找一级子元素）" class="headerlink" title="5、子类选择器（只找一级子元素）"></a>5、子类选择器（只找一级子元素）</h3><pre class=" language-css"><code class="language-css"><span class="token selector">语法: 父选择器>子选择器    此父选择器下的一级子选择器<span class="token id">#mydiv</span>>span</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*color : blue;*/</span><span class="token punctuation">}</span></code></pre><h3 id="6、子类选择器（找所有子元素）"><a href="#6、子类选择器（找所有子元素）" class="headerlink" title="6、子类选择器（找所有子元素）"></a>6、子类选择器（找所有子元素）</h3><pre class=" language-css"><code class="language-css"><span class="token selector">层级选择器(多)    语法: 祖先选择器 子孙选择器 <span class="token class">.y</span> span</span><span class="token punctuation">{</span>    <span class="token property">color</span> <span class="token punctuation">:</span> green<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="7、属性选择器"><a href="#7、属性选择器" class="headerlink" title="7、属性选择器"></a>7、属性选择器</h3><pre class=" language-css"><code class="language-css"><span class="token selector">语法: 选择器1<span class="token attribute">[属性名='值']</span>    此选择器中符合属性条件的标签input<span class="token attribute">[type='text']</span></span><span class="token punctuation">{</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="4、常用属性"><a href="#4、常用属性" class="headerlink" title="4、常用属性"></a>4、常用属性</h2><h3 id="1、字体与文本"><a href="#1、字体与文本" class="headerlink" title="1、字体与文本"></a>1、字体与文本</h3><pre class=" language-css"><code class="language-css">字体颜色：color：red；        <span class="token property">color</span><span class="token punctuation">:</span><span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">255</span>,<span class="token number">0</span>,<span class="token number">0</span><span class="token punctuation">)</span>；        <span class="token property">color</span><span class="token punctuation">:</span><span class="token hexcode">#ff002e</span>；文字大小<span class="token punctuation">:</span><span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>行高<span class="token punctuation">:</span><span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">40</span>px<span class="token punctuation">;</span>字体加粗<span class="token punctuation">:</span><span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>字体<span class="token punctuation">:</span><span class="token property">font-family</span><span class="token punctuation">:</span> 楷体<span class="token punctuation">;</span>文字倾斜<span class="token punctuation">:</span><span class="token property">font-style</span><span class="token punctuation">:</span> italic<span class="token punctuation">;</span>隐藏下划线<span class="token punctuation">:</span><span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span></code></pre><h3 id="2、背景属性"><a href="#2、背景属性" class="headerlink" title="2、背景属性"></a>2、背景属性</h3><pre class=" language-css"><code class="language-css"> 背景颜色：  <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span> 背景图片：  <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url">url("../img/a.jpg")</span><span class="token punctuation">;</span>背景是否重复：<span class="token property">peat</span><span class="token punctuation">:</span> no-repeat<span class="token punctuation">;</span>背景位置偏移：   <span class="token property">background-position</span><span class="token punctuation">:</span> <span class="token number">10</span>px <span class="token number">20</span>px<span class="token punctuation">;</span></code></pre><p>background-position的值可以有一下三种：</p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>top left ，top center ，top right， center left ，center center ，center right ，bottom left ，bottom center ，bottom right</td><td>如果您仅规定了一个关键词，那么第二个值将是”center”。</td></tr><tr><td>x% y%</td><td>第一个值是水平位置，第二个值是垂直位置。<br>左上角是 0% 0%。右下角是 100% 100%<br>如果您仅规定了一个值，另一个值将是 50%。</td></tr><tr><td>xpos ypos(左上角的坐标)</td><td>第一个值是水平位置，第二个值是垂直位置<br>左上角是 0 0。单位是像素 (0px 0px) 或任何其他的 CSS 单位。</td></tr></tbody></table><h2 id="5、元素显示（Display-显示-与-Visibility（可见性）"><a href="#5、元素显示（Display-显示-与-Visibility（可见性）" class="headerlink" title="5、元素显示（Display(显示) 与 Visibility（可见性）"></a>5、元素显示（Display(显示) 与 Visibility（可见性）</h2><h3 id="1、display-的值"><a href="#1、display-的值" class="headerlink" title="1、display 的值"></a>1、display 的值</h3><pre class=" language-css"><code class="language-css"><span class="token property">display</span> <span class="token punctuation">:</span> 展示    <span class="token number">1.</span> <span class="token property">block</span> <span class="token punctuation">:</span> 块级 <span class="token punctuation">(</span>自动换行<span class="token punctuation">)</span>         总是独占一行，表现为另起一行开始，而且其后的元素也必须另起一行显示<span class="token punctuation">;</span>        宽度<span class="token punctuation">(</span>width<span class="token punctuation">)</span>、高度<span class="token punctuation">(</span>height<span class="token punctuation">)</span>、内边距<span class="token punctuation">(</span>padding<span class="token punctuation">)</span>和外边距<span class="token punctuation">(</span>margin<span class="token punctuation">)</span>都可控制    <span class="token number">2.</span> <span class="token property">inline</span> <span class="token punctuation">:</span> 本行 <span class="token punctuation">(</span>不会自动换行<span class="token punctuation">)</span>    和相邻的内联元素在同一行<span class="token punctuation">;</span>    宽度<span class="token punctuation">(</span>width<span class="token punctuation">)</span>、高度<span class="token punctuation">(</span>height<span class="token punctuation">)</span>、内边距的top/<span class="token function">bottom</span><span class="token punctuation">(</span>padding-top/padding-bottom<span class="token punctuation">)</span>和外边距的top/<span class="token function">bottom</span><span class="token punctuation">(</span>margin-top/margin-bottom<span class="token punctuation">)</span>都不可改变，就是里面文字或图片的大小<span class="token punctuation">;</span>    <span class="token number">3.</span> <span class="token property">none</span> <span class="token punctuation">:</span> 隐藏，不占位置    <span class="token number">4.</span> inline-block 行内块，表现为同行显示并可修改宽高内外边距等属性</code></pre><h3 id="2、常见标签的类别"><a href="#2、常见标签的类别" class="headerlink" title="2、常见标签的类别"></a>2、常见标签的类别</h3><pre class=" language-css"><code class="language-css">常见标签的类别：块级元素主要有： address , blockquote , center , dir , div , dl , fieldset , form , h<span class="token number">1</span> , h<span class="token number">2</span> , h<span class="token number">3</span> , h<span class="token number">4</span> , h<span class="token number">5</span> , h<span class="token number">6</span> , hr , isindex , menu , noframes , noscript , ol , p , pre , table , ul , li内联元素主要有：a , abbr , acronym , b , bdo , big , br , cite , code , dfn , em , font , i , img , input , kbd , label , q , s , samp , select , small , span , strike , strong , sub , sup ,textarea , tt , u , var可变元素<span class="token punctuation">(</span>根据上下文关系确定该元素是块元素还是内联元素<span class="token punctuation">)</span>：applet ,button ,del ,iframe , ins ,map ,object , script</code></pre><h3 id="3、visibility-hidden与display-none的区别"><a href="#3、visibility-hidden与display-none的区别" class="headerlink" title="3、visibility: hidden与display:none的区别"></a>3、<strong>visibility: hidden</strong>与<strong>display:none</strong>的区别</h3><pre class=" language-css"><code class="language-css"> <span class="token number">1</span>、<span class="token property">display</span><span class="token punctuation">:</span>none 元素不再占用空间。 <span class="token number">2</span>、<span class="token property">visibility</span><span class="token punctuation">:</span> hidden 使元素在网页上不可见，但仍占用空间。</code></pre><h2 id="6、盒子模型"><a href="#6、盒子模型" class="headerlink" title="6、盒子模型"></a>6、盒子模型</h2><h3 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h3><p><img src="https://www.runoob.com/images/box-model.gif"></p><pre class=" language-css"><code class="language-css"><span class="token selector">div </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span><span class="token punctuation">(</span>内容的宽度<span class="token punctuation">)</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span><span class="token punctuation">(</span>内容的高度<span class="token punctuation">)</span>    <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">25</span>px solid green<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">25</span>px<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">25</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token number">300</span>px <span class="token punctuation">(</span>宽<span class="token punctuation">)</span>+ <span class="token number">50</span>px <span class="token punctuation">(</span>左 + 右填充<span class="token punctuation">)</span>+ <span class="token number">50</span>px <span class="token punctuation">(</span>左 + 右边框<span class="token punctuation">)</span>+ <span class="token number">50</span>px <span class="token punctuation">(</span>左 + 右边距<span class="token punctuation">)</span>= <span class="token number">450</span>px 并非<span class="token number">300</span>px总元素的宽度=宽度+左填充+右填充+左边框+右边框+左边距+右边距总元素的高度=高度+顶部填充+底部填充+上边框+下边框+上边距+下边距</code></pre><p><img src="https://gitee.com/ergou15154/drawing-bed/raw/master/source/image-20210828115240179.png" alt="image-20210828115240179"></p><h3 id="2、padding和margin"><a href="#2、padding和margin" class="headerlink" title="2、padding和margin"></a>2、padding和margin</h3><p><img src="https://www.runoob.com/wp-content/uploads/2013/08/VlwVi.png"></p><pre class=" language-css"><code class="language-css"><span class="token property">margin-top</span><span class="token punctuation">:</span><span class="token number">100</span>px<span class="token punctuation">;</span><span class="token property">margin-bottom</span><span class="token punctuation">:</span><span class="token number">100</span>px<span class="token punctuation">;</span><span class="token property">margin-right</span><span class="token punctuation">:</span><span class="token number">50</span>px<span class="token punctuation">;</span><span class="token property">margin-left</span><span class="token punctuation">:</span><span class="token number">50</span>px<span class="token punctuation">;</span>顺时针<span class="token property">margin</span><span class="token punctuation">:</span><span class="token number">25</span>px <span class="token number">50</span>px <span class="token number">75</span>px <span class="token number">100</span>px<span class="token punctuation">;</span>上边距为<span class="token number">25</span>px右边距为<span class="token number">50</span>px下边距为<span class="token number">75</span>px左边距为<span class="token number">100</span>px<span class="token property">margin</span><span class="token punctuation">:</span><span class="token number">25</span>px <span class="token number">50</span>px <span class="token number">75</span>px<span class="token punctuation">;</span>上边距为<span class="token number">25</span>px左右边距为<span class="token number">50</span>px下边距为<span class="token number">75</span>px<span class="token property">margin</span><span class="token punctuation">:</span><span class="token number">25</span>px <span class="token number">50</span>px<span class="token punctuation">;</span>上下边距为<span class="token number">25</span>px左右边距为<span class="token number">50</span>px<span class="token property">margin</span><span class="token punctuation">:</span><span class="token number">25</span>px<span class="token punctuation">;</span>所有的<span class="token number">4</span>个边距都是<span class="token number">25</span>px</code></pre><p>值可以为：auto（padding不可用），length（使用像素，pt，em等），%（百分比）</p><h2 id="7、定位：Position"><a href="#7、定位：Position" class="headerlink" title="7、定位：Position"></a>7、定位：Position</h2><p>position 属性的五个值：</p><ul><li><a href="https://www.runoob.com/css/css-positioning.html#position-static">static</a></li><li><a href="https://www.runoob.com/css/css-positioning.html#position-relative">relative</a></li><li><a href="https://www.runoob.com/css/css-positioning.html#position-fixed">fixed</a></li><li><a href="https://www.runoob.com/css/css-positioning.html#position-absolute">absolute</a></li><li>sticky</li></ul><h3 id="1、static-定位"><a href="#1、static-定位" class="headerlink" title="1、static 定位"></a>1、static 定位</h3><p>HTML 元素的默认值，即没有定位，遵循正常的文档流对象。</p><p>静态定位的元素不会受到 top, bottom, left, right影响。</p><pre class=" language-css"><code class="language-css"><span class="token selector">元素也可以基于它们的类而被选择&lt;div class="fancy">div<span class="token class">.static</span> </span><span class="token punctuation">{</span>    <span class="token property">position</span><span class="token punctuation">:</span> static<span class="token punctuation">;</span>    <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">3</span>px solid <span class="token hexcode">#73AD21</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="2、fixed-定位"><a href="#2、fixed-定位" class="headerlink" title="2、fixed 定位"></a>2、fixed 定位</h3><p>元素的位置相对于浏览器窗口是固定位置。即使窗口是滚动的它也不会移动：</p><p>Fixed定位使元素的位置与文档流无关，因此不占据空间。</p><p>Fixed定位的元素和其他元素重叠。</p><pre class=" language-css"><code class="language-css"><span class="token selector">p<span class="token class">.pos_fixed</span></span><span class="token punctuation">{</span>    <span class="token property">position</span><span class="token punctuation">:</span>fixed<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span><span class="token number">30</span>px<span class="token punctuation">;</span>    <span class="token property">right</span><span class="token punctuation">:</span><span class="token number">5</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="3、relative（相对）-定位"><a href="#3、relative（相对）-定位" class="headerlink" title="3、relative（相对） 定位"></a>3、relative（相对） 定位</h3><p>相对定位元素的定位是相对其正常位置。</p><p>相对定位元素经常被用来作为绝对定位元素的容器块。</p><pre class=" language-css"><code class="language-css"><span class="token selector">h2<span class="token class">.pos_top</span></span><span class="token punctuation">{</span>    <span class="token property">position</span><span class="token punctuation">:</span>relative<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span>-<span class="token number">50</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="4、absolute（绝对）-定位"><a href="#4、absolute（绝对）-定位" class="headerlink" title="4、absolute（绝对） 定位"></a>4、absolute（绝对） 定位</h3><p>绝对定位的元素的位置相对于最近的已定位父元素（属性中有position的，不包含static），如果元素没有已定位的父元素，那么它的位置相对于  <strong>html</strong> :</p><p>absolute 定位使元素的位置与文档流无关，因此不占据空间。</p><p>absolute 定位的元素和其他元素重叠。</p><pre class=" language-css"><code class="language-css"><span class="token selector">h2</span><span class="token punctuation">{</span>    <span class="token property">position</span><span class="token punctuation">:</span>absolute<span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span><span class="token number">100</span>px<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span><span class="token number">150</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="5、sticky-定位"><a href="#5、sticky-定位" class="headerlink" title="5、sticky 定位"></a>5、sticky 定位</h3><p>粘性定位的元素是依赖于用户的滚动，在 <strong>position:relative</strong> 与 <strong>position:fixed</strong> 定位之间切换。</p><p>元素定位表现为在跨越特定阈值前为相对定位，之后为固定定位。</p><p>这个特定阈值指的是 top, right, bottom 或 left 之一，换言之，指定 top, right, bottom 或 left 四个阈值其中之一，才可使粘性定位生效。否则其行为与相对定位相同。</p><pre class=" language-css"><code class="language-css"><span class="token selector">div<span class="token class">.sticky</span> </span><span class="token punctuation">{</span>    <span class="token property">position</span><span class="token punctuation">:</span> -webkit-sticky<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* Safari */</span>    <span class="token property">position</span><span class="token punctuation">:</span> sticky<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>    <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">2</span>px solid <span class="token hexcode">#4CAF50</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>先后顺序问题：</strong>z-index</p><pre class=" language-css"><code class="language-css"><span class="token selector">img</span><span class="token punctuation">{</span>    <span class="token property">position</span><span class="token punctuation">:</span>absolute<span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span><span class="token number">0</span>px<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span><span class="token number">0</span>px<span class="token punctuation">;</span>    <span class="token property">z-index</span><span class="token punctuation">:</span>-<span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span>具有更高堆叠顺序的元素总是在较低的堆叠顺序元素的前面。给定 z-index 的值为层级的值。（不给默认为<span class="token number">0</span>）a<span class="token number">.</span> 层级为<span class="token number">0</span>的盒子，也比标准流和浮动高。b<span class="token number">.</span> 层级为负数的盒子，比标准流和浮动低。浮动或者标准流的盒子，后面的盒子比前面的层级高。</code></pre><pre><code>标准流盒子，低于浮动的盒子，浮动的盒子又低于定位的盒子。定位高于浮动，浮动高于标准流。（高低和占不占位置无关）</code></pre><h2 id="8、float浮动"><a href="#8、float浮动" class="headerlink" title="8、float浮动"></a>8、float浮动</h2><p>打破常规，让div也能变小（实际大小跟 宽和高）变成类似行内块元素。</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>zh-CN<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>09-浮动属性<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector">div</span><span class="token punctuation">{</span>            <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px red solid<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>            <span class="token property">float</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h2 id="9、伪类选择器"><a href="#9、伪类选择器" class="headerlink" title="9、伪类选择器"></a>9、伪类选择器</h2><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>zh-CN<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--       伪类选择器: 选中某种状态的标签       观察:           未点击:  蓝色  (link)           鼠标移上去:  蓝色 (hover : 悬浮)           点击:  红色 (active: 激活)           访问过后:  紫色 (visited: 访问过后)       修改   --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector">a<span class="token pseudo-class">:link</span></span><span class="token punctuation">{</span>            <span class="token property">color</span><span class="token punctuation">:</span>deeppink<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">a<span class="token pseudo-class">:hover</span></span><span class="token punctuation">{</span>            <span class="token property">color</span><span class="token punctuation">:</span>yellow<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">a<span class="token pseudo-class">:active</span></span><span class="token punctuation">{</span>            <span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">a<span class="token pseudo-class">:visited</span></span><span class="token punctuation">{</span>            <span class="token property">color</span><span class="token punctuation">:</span>grey<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">a</span><span class="token punctuation">{</span>            <span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>百度一下<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>百度一下<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>百度一下<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>百度一下<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>百度一下<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>百度一下<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git</title>
      <link href="/2020/03/15/Git/"/>
      <url>/2020/03/15/Git/</url>
      
        <content type="html"><![CDATA[<h1 id="1、Git"><a href="#1、Git" class="headerlink" title="1、Git"></a>1、Git</h1><h2 id="1、常用版本管理工具介绍"><a href="#1、常用版本管理工具介绍" class="headerlink" title="1、常用版本管理工具介绍"></a>1、常用版本管理工具介绍</h2><h3 id="1、SVN-集中式版本管理控制"><a href="#1、SVN-集中式版本管理控制" class="headerlink" title="1、SVN 集中式版本管理控制"></a>1、SVN 集中式版本管理控制</h3><p><img src="https://gitee.com/ergou15154/drawing-bed/raw/master/source/image-20210825204620076.png" alt="image-20210825204620076"></p><pre class=" language-java"><code class="language-java">数据都存储在中心服务器上，一旦宕机，后果很严重弊端：    <span class="token number">1</span><span class="token punctuation">.</span>因为远程中心仓库保存了所有的历史版本信息，当远程仓库异常宕机时，开发者就无法同步代码和获取最新变更的代码，使得开发工作基本处于停滞状态；最严重的是服务器硬盘损坏，这是致命的，也就意味着维护的项目丢失了所有的历史记录    <span class="token number">2</span><span class="token punctuation">.</span>使用svn无法随时随意提交代码；    一般使用svn开发时都是开发好一个完成的功能后，才可以提交，也就是说，提高到远程中心仓库的代码都是可使用，可交付状态的代码；</code></pre><h3 id="2、Git分布式版本管理控制"><a href="#2、Git分布式版本管理控制" class="headerlink" title="2、Git分布式版本管理控制"></a>2、Git分布式版本管理控制</h3><pre class=" language-java"><code class="language-java">优点：    <span class="token number">1</span><span class="token punctuation">.</span>每一个客户端都保存了完整的历史记录<span class="token punctuation">;</span>服务器的故障，都可以通过客户端的记录得以恢复<span class="token punctuation">;</span>    <span class="token number">2</span><span class="token punctuation">.</span>代码提交时机        代码可随时提交到本地仓库，维护提交记录，待功能晚上，然后提交到远程仓库（开发人员可以随时将代码提交到本地仓库）；        分布式和集中式的最大区别也就是分布式可以【本地提交代码】；        分布式的提交代码方式：先将代码提交到本地，然后再将代码从本地推送到远程服务器；</code></pre><h2 id="2、git操作入门"><a href="#2、git操作入门" class="headerlink" title="2、git操作入门"></a>2、git操作入门</h2><h3 id="1、理解-工作目录、暂存区和本地仓库"><a href="#1、理解-工作目录、暂存区和本地仓库" class="headerlink" title="1、理解**工作目录、暂存区和本地仓库**"></a>1、理解**<font color="red">工作目录、暂存区和本地仓库</font>**</h3><p><img src="https://gitee.com/ergou15154/drawing-bed/raw/master/source/image-20210825205304574.png" alt="image-20210825205304574"></p><pre class=" language-java"><code class="language-java"><span class="token number">1</span><span class="token punctuation">.</span>工作区：就是我们的工程代码所存放的磁盘目录（程序员敲代码的磁盘目录位置）；<span class="token number">2</span><span class="token punctuation">.</span>本地仓库：在工作区内有个隐藏的目录<span class="token punctuation">.</span>git<span class="token punctuation">,</span>它就是git的本地版本库（本地仓库维护了从工作区提交的所有的代码的操作流水）；<span class="token number">3</span><span class="token punctuation">.</span>暂存区：存放在本地版本仓库<span class="token punctuation">.</span>git目录的index文件中（<span class="token punctuation">.</span>git<span class="token operator">/</span>index）（保存临时提交代码的区域，此时提交的代码时可以撤销的）；</code></pre><p><img src="https://gitee.com/ergou15154/drawing-bed/raw/master/source/image-20210825205644607.png" alt="image-20210825205644607"></p><h3 id="2、git常用命令"><a href="#2、git常用命令" class="headerlink" title="2、git常用命令"></a>2、git常用命令</h3><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>git init</td><td>初始化，创建 git 仓库，会创建一个.git的目录</td></tr><tr><td>git status</td><td>查看 git 状态 （文件是否进行了添加、提交操作）</td></tr><tr><td>git add 文件名</td><td>添加，将指定文件添加到暂存区</td></tr><tr><td>git commit -m ‘提交信息’</td><td>提交，将暂存区文件提交到本地仓库，每提交一次，就会生成一个新的版本</td></tr><tr><td>git log</td><td>查看提交流水，可以获取某次提交下关联的信息：提交版本号、用户名、邮箱、提交日期、提交说明</td></tr><tr><td>git reflog</td><td>回滚之后的日志记录也能查到，可以查看所有分支的所有操作记录</td></tr><tr><td></td><td></td></tr><tr><td>git congfig –global user.name “your name”</td><td>设置姓名</td></tr><tr><td>git config –global user.email “your email”</td><td>设置邮箱</td></tr><tr><td>git config –list –global</td><td>查看全局配置</td></tr><tr><td>git rm –cached 文件名称</td><td>从暂存区撤销文件，就是git add的逆向操作；</td></tr></tbody></table><h3 id="3、配置用户名和邮箱"><a href="#3、配置用户名和邮箱" class="headerlink" title="3、配置用户名和邮箱"></a>3、配置用户名和邮箱</h3><h4 id="1、config的三个作用域"><a href="#1、config的三个作用域" class="headerlink" title="1、config的三个作用域"></a>1、config的三个作用域</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> config --local <span class="token comment" spellcheck="true"># 只对某个仓库有效；缺省时，等于local</span><span class="token function">git</span> config --global <span class="token comment" spellcheck="true"># 对当前用户所有仓库有效❤❤❤</span><span class="token function">git</span> config --system <span class="token comment" spellcheck="true"># 对系统所有登录的用户有效</span></code></pre><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 设置用户名和邮箱，实际开发中用户名一般是开发者真实姓名，邮箱则是公司为开发者分配的个人邮箱</span><span class="token function">git</span> congfig --global user.name <span class="token string">"your name"</span><span class="token function">git</span> config --global user.email <span class="token string">"your email"</span><span class="token comment" spellcheck="true"># 查看git全局配置</span><span class="token function">git</span> config --list --global</code></pre><h3 id="4、历史版本的切换"><a href="#4、历史版本的切换" class="headerlink" title="4、历史版本的切换"></a>4、历史版本的切换</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> reflog    可以查看所有分支的所有操作记录<span class="token function">git</span> reset --hard 版本唯一索引值     回滚到之前的版本</code></pre><p><strong>git reflog与git log的区别：回滚之后log命令查不到回滚后面的版本</strong></p><p><img src="https://gitee.com/ergou15154/drawing-bed/raw/master/source/image-20210825211029730.png" alt="image-20210825211029730"></p><p><img src="https://gitee.com/ergou15154/drawing-bed/raw/master/source/image-20210825211051519.png" alt="image-20210825211051519"></p><h2 id="3、分支介绍"><a href="#3、分支介绍" class="headerlink" title="3、分支介绍"></a>3、分支介绍</h2><p><img src="https://gitee.com/ergou15154/drawing-bed/raw/master/source/image-20210825211549665.png" alt="image-20210825211549665"></p><pre class=" language-bash"><code class="language-bash"> Master: git主分支，代码最终合并到该分支下；dev：开发分支</code></pre><p><img src="https://gitee.com/ergou15154/drawing-bed/raw/master/source/image-20210825213013168.png" alt="image-20210825213013168"></p><p><strong>分支常见命令</strong></p><table><thead><tr><th>分支名</th><th>作用</th></tr></thead><tbody><tr><td>git branch  分支名</td><td>创建分支</td></tr><tr><td>git checkout  分支名</td><td>切换分支</td></tr><tr><td>git merge  分支名</td><td>合并分支</td></tr><tr><td>git branch -d 分支名</td><td>删除分支</td></tr><tr><td>git branch</td><td>查看分支列表</td></tr></tbody></table><p><strong><font color="red">不同分支之间的关系是【平行的关系，不会相互影响】</font></strong></p><pre class=" language-bash"><code class="language-bash">合并命令:    <span class="token function">git</span> merge  分支名举例:        分支1如果想要合并分支2，那么先切换到分支1下，然后执行合并指令:    <span class="token function">git</span> checkout 分支1    <span class="token function">git</span> merge 分支2</code></pre><h2 id="4、远程仓库"><a href="#4、远程仓库" class="headerlink" title="4、远程仓库"></a>4、远程仓库</h2><p><img src="https://gitee.com/ergou15154/drawing-bed/raw/master/source/image-20210825213807549.png" alt="image-20210825213807549"></p><h3 id="1、ssh公钥配置"><a href="#1、ssh公钥配置" class="headerlink" title="1、ssh公钥配置"></a>1、ssh公钥配置</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 在本地配置开发者用户名和邮箱地址(理论将我们可以随便定义，实际应该配置个人真实姓名和开发中个人邮箱地址)</span><span class="token function">git</span> config user.name（查看git账户）<span class="token function">git</span> config user.email（查看git邮箱）<span class="token function">git</span> config --global user.name “账户名”（设置全局账户名）<span class="token function">git</span> config --global user.email “邮箱”（设置全局邮箱）<span class="token comment" spellcheck="true"># 检查本地用户是否生成过RAS公钥</span><span class="token function">cd</span> ~/.ssh（查看是否生成过SSH公钥）生成ssh公钥命令: ssh-keygen -t rsa -C <span class="token string">"你的邮箱"</span>  注意：这里需要【敲3次回车键】即可</code></pre><p>公钥存在你的用户目录的  .ssh  文件夹的id_rsa.pub中</p><pre class=" language-bash"><code class="language-bash">查看公钥命令:<span class="token function">cat</span> ~/.ssh/id-rsa.pub</code></pre><p>到gitee或github中设置公钥</p><p>测试公钥是否可用</p><pre class=" language-bash"><code class="language-bash">命令配置情况: <span class="token function">ssh</span> -T git@gitee.com</code></pre><h3 id="2、推送到远程仓库"><a href="#2、推送到远程仓库" class="headerlink" title="2、推送到远程仓库"></a>2、推送到远程仓库</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 为远程仓库地址取别名，简化书写，其中original变量名称理论上讲可随便定义；</span><span class="token function">git</span> remote add original 远程仓库地址<span class="token comment" spellcheck="true"># 推送本地仓库master分支代码到远程仓库</span><span class="token function">git</span> push -u original master<span class="token comment" spellcheck="true"># 说明：push指令后加了参数-u后，以后再推送代码，即可直接使用git push即可</span></code></pre><p><img src="https://gitee.com/ergou15154/drawing-bed/raw/master/source/image-20210825214341575.png" alt="image-20210825214341575"></p><h3 id="3、拉取远程仓库中代码"><a href="#3、拉取远程仓库中代码" class="headerlink" title="3、拉取远程仓库中代码"></a>3、拉取远程仓库中代码</h3><pre class=" language-bash"><code class="language-bash">1. 将远程仓库的代码，克隆到本地仓库   克隆命令：      <span class="token function">git</span> clone 仓库地址2. 创建新文件，添加并提交到本地仓库3. 推送至远程仓库4. 项目拉取更新   拉取命令：       <span class="token function">git</span> pull 远程仓库名 分支名</code></pre><h3 id="4、代码冲突问题"><a href="#4、代码冲突问题" class="headerlink" title="4、代码冲突问题"></a>4、代码冲突问题</h3><pre class=" language-bash"><code class="language-bash">1.两个程序员操作同一个文件,其中一个程序员在修改文件后,push到远程仓库,此时远程仓库提交记录发生改变<span class="token punctuation">;</span>此时，另一个程序员也修改了相同文件的代码，然后也push到远程仓库中，这样因为修改了相同行的代码，冲突也就出现了；2.如何解决呢？  实际开发中应该先通过pull命令拉去远程仓库中最新的代码到本地仓库，然后再开发新业务代码,之后再push到远程仓库；</code></pre><p><img src="https://gitee.com/ergou15154/drawing-bed/raw/master/source/image-20210825214718757.png" alt="image-20210825214718757"></p><p>当本地代码与远程代码存在冲突时，push提交会被拒绝，所以<font color="red">项目提交前要先pull解决冲突问题，然后在push</font>！</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 拉去远程代码</span><span class="token function">git</span> pull origin master<span class="token comment" spellcheck="true"># 拉去远程代码之前，先将暂存区代码提交到本地仓库，否则可能会需要二次合并</span></code></pre><p>pull之后会出现：出现也本地修改的内容，也出现了远程修改的内容</p><p><img src="https://gitee.com/ergou15154/drawing-bed/raw/master/source/image-20210825215047564.png" alt="image-20210825215047564"></p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;</span>和<span class="token operator">>></span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">></span>中间的内容,就是冲突部分1. 修改冲突行，保存，即可解决冲突。2. 重新add冲突文件并commit到本地仓库，重新push到远程</code></pre><h2 id="5、IDEA继承Git"><a href="#5、IDEA继承Git" class="headerlink" title="5、IDEA继承Git"></a>5、IDEA继承Git</h2><h3 id="1、设置idea"><a href="#1、设置idea" class="headerlink" title="1、设置idea"></a>1、设置idea</h3><p>file–》setting–》version Control–》Git</p><p><img src="https://gitee.com/ergou15154/drawing-bed/raw/master/source/image-20210825215344791.png" alt="image-20210825215344791"></p><p>找到git.exe路径点击Test  点apply 点OK</p><h3 id="2、创建本地库"><a href="#2、创建本地库" class="headerlink" title="2、创建本地库"></a>2、创建本地库</h3><h4 id="1-VCS-gt-Import-into-Version-Control-gt-Create-Git-Repository"><a href="#1-VCS-gt-Import-into-Version-Control-gt-Create-Git-Repository" class="headerlink" title="1.VCS->Import into Version Control->Create Git Repository"></a><strong>1.VCS-&gt;Import into Version Control-&gt;Create Git Repository</strong></h4><p><img src="https://gitee.com/ergou15154/drawing-bed/raw/master/source/image-20210825215608739.png" alt="image-20210825215608739"></p><p>如果没有VCS只有Git则：点git点第一个选项可以创建git仓库</p><h4 id="2、-gitignore忽略文件设置"><a href="#2、-gitignore忽略文件设置" class="headerlink" title="2、.gitignore忽略文件设置"></a>2、.gitignore忽略文件设置</h4><p>.gitignore文件在  .idea的目录下，拉出  .gitignore 到项目根目录下</p><p><img src="https://gitee.com/ergou15154/drawing-bed/raw/master/source/image-20210825220052466.png" alt="image-20210825220052466"></p><p>或者直接用下列方式：</p><p><img src="https://gitee.com/ergou15154/drawing-bed/raw/master/source/image-20210825220142715.png" alt="image-20210825220142715"></p><h4 id="3、代码提交到本地仓库"><a href="#3、代码提交到本地仓库" class="headerlink" title="3、代码提交到本地仓库"></a>3、代码提交到本地仓库</h4><h2 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h2><h3 id="1-git核心概念："><a href="#1-git核心概念：" class="headerlink" title="1.git核心概念："></a>1.git核心概念：</h3><pre class=" language-tex"><code class="language-tex">工作区：    说白了就是我们的代码存放的目录；暂存区：    将工作区的内存暂时保存的一个区域（这个区域在.git目录下有个一index文件）本地仓库：    保存提交代码的历史版本信息（信息包含：生成的每一次提交，都会被保存，包含：提交记录ID,作者信息、邮箱信息、提交时间，提交说明等）</code></pre><h3 id="2-git常用命令"><a href="#2-git常用命令" class="headerlink" title="2.git常用命令"></a>2.git常用命令</h3><table><thead><tr><th>命令名称</th><th>作用</th></tr></thead><tbody><tr><td></td><td></td></tr><tr><td>git init</td><td>初始化git仓库，会创建一个.git文件夹，内部保存了版本提交的所有信息</td></tr><tr><td>git add  文件名称/.</td><td>将修改或者创建的文件添加到暂存区</td></tr><tr><td>git rm –cached 文件名称</td><td>从暂存区撤销文件，就是git add的逆向操作；</td></tr><tr><td>git commit -m “提交信息”</td><td>将暂存区中的数据提交到本地仓库</td></tr><tr><td>git log</td><td>查看提交的日志流水</td></tr><tr><td>git reset –hard  版本ID</td><td>回滚到指定的id的版本下，注意：一般回滚后，那么通过git log获取不了回滚前的版本ID&lt;<br>回滚之后，对于之前的历史版本，在版本库中依旧保存；</td></tr><tr><td>git reflog</td><td>获取所有版本操作的流水，所以可以获取被回滚的版本ID</td></tr><tr><td>git status</td><td>查看当前工作目录下所有文件的装填</td></tr><tr><td>git branch 新的分支名称</td><td>创建新的分支</td></tr><tr><td>git branch</td><td>查看所有分支</td></tr><tr><td>git checkout 分支名称</td><td>切换到指定分支</td></tr><tr><td>git merge 其他分支名称</td><td>合并分支 步骤：A合并B，先切换到A分支，然后执行merge合并B的命令，</td></tr><tr><td>git branch -d 分支名称</td><td>删除分支</td></tr><tr><td>git config –global user.anme “用户名”<br>git config –global user.email “邮箱”</td><td>设置开发者的用户名和邮箱</td></tr><tr><td>git clone 远程仓库地址</td><td>从远程仓库中克隆一份最新的代码（全量的复制 ，一般在初次拉去工程代码）</td></tr><tr><td>git pull 远程仓库地址</td><td>从远程仓库更新代码到本地（增量复制，只获取修改的代码，一般在每天进行开发前，会使用这个额命令）</td></tr><tr><td>git push 远程仓库地址 master</td><td>将本地代码推送到远程服务器下，一般推送的是master分支下的代码；</td></tr></tbody></table><h3 id="3-开发场景"><a href="#3-开发场景" class="headerlink" title="3.开发场景"></a>3.开发场景</h3><pre class=" language-tex"><code class="language-tex">1.本地仓库有代码，但是远程仓库为空    场景发生在：项目新开始，然后架构师搭架子后，其他开发人员填充业务代码；    git add     git commit -m "xxxx"    git branch 分支名称    git checkout 分支名称    git merge 分支名称    git push ....2.本地仓库为空，但是远程仓库存在代码    场景发生在：新员工入职时    git clone     git add     git commit -m "xxxx"    git branch 分支名称    git checkout 分支名称    git merge 分支名称    git push ....</code></pre>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js高级</title>
      <link href="/2020/03/15/JS%E9%AB%98%E7%BA%A7/"/>
      <url>/2020/03/15/JS%E9%AB%98%E7%BA%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="1、JS高级"><a href="#1、JS高级" class="headerlink" title="1、JS高级"></a>1、JS高级</h1><h2 id="1、BOM对象"><a href="#1、BOM对象" class="headerlink" title="1、BOM对象"></a>1、BOM对象</h2><p><img src="https://gitee.com/ergou15154/drawing-bed/raw/master/source/image-20210828203133499.png"></p><h3 id="1、Windown对象"><a href="#1、Windown对象" class="headerlink" title="1、Windown对象"></a>1、Windown对象</h3><h4 id="1、三种弹框方式"><a href="#1、三种弹框方式" class="headerlink" title="1、三种弹框方式"></a>1、三种弹框方式</h4><pre class=" language-js"><code class="language-js">可以window<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">也可以alert</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">,</span>其他的也一样<span class="token number">1</span><span class="token punctuation">.</span> <span class="token function">alert</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>     警告框<span class="token punctuation">:</span> 通知用户某些信息 <span class="token number">2</span><span class="token punctuation">.</span> <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">confirm</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>     确认框<span class="token punctuation">:</span> 告知用户某些信息<span class="token punctuation">,</span>让用户做选择     <span class="token number">2.1</span> 确认 <span class="token punctuation">:</span> 返回<span class="token boolean">true</span>     <span class="token number">2.2</span> 取消 <span class="token punctuation">:</span> 返回<span class="token boolean">false</span> <span class="token number">3</span><span class="token punctuation">.</span> <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span>defaultValue<span class="token punctuation">)</span>     提示框<span class="token punctuation">:</span> 通过提问方式<span class="token punctuation">,</span>让用户填写内容     <span class="token number">3.1</span> defaultValue <span class="token punctuation">:</span> 填写内容的默认值     <span class="token number">3.2</span> result             用户点击确定 <span class="token punctuation">:</span> result 就是用户输入的值             用户点击取消 <span class="token punctuation">:</span> result 就是 <span class="token keyword">null</span></code></pre><h4 id="2、两种计时器"><a href="#2、两种计时器" class="headerlink" title="2、两种计时器"></a>2、两种计时器</h4><pre class=" language-js"><code class="language-js"> window两个定时器 <span class="token number">1</span><span class="token punctuation">.</span> <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span>函数调用<span class="token punctuation">,</span>时间<span class="token punctuation">)</span> <span class="token function">每隔一定的时间</span><span class="token punctuation">(</span>毫秒<span class="token punctuation">)</span>执行一次函数调用 <span class="token punctuation">(</span>无限循环<span class="token punctuation">)</span> 返回这个计时器自身 取消当前计时器<span class="token punctuation">:</span>     <span class="token function">clearInterval</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token number">2</span><span class="token punctuation">.</span> <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>函数调用<span class="token punctuation">,</span>时间<span class="token punctuation">)</span> <span class="token function">隔一定的时间</span><span class="token punctuation">(</span>毫秒<span class="token punctuation">)</span><span class="token function">执行一次函数调用</span><span class="token punctuation">(</span>就执行就一次<span class="token punctuation">)</span> 返回这个计时器自身 取消当前计时器<span class="token punctuation">:</span>     <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">method01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取当前时间的本地时间格式</span>    <span class="token keyword">var</span> time <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">let</span> timer<span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//设置一个定时器, 返回自身</span>    <span class="token comment" spellcheck="true">// timer =setInterval("method01()",1000)</span>    timer <span class="token operator">=</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token string">"method01()"</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">end2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//清除定时器</span>    <span class="token comment" spellcheck="true">// clearInterval(timer)</span>    <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="2、location对象"><a href="#2、location对象" class="headerlink" title="2、location对象"></a>2、location对象</h3><p>属性：href</p><p>方法：reload（）</p><pre class=" language-html"><code class="language-html">0. 指的是浏览器的地址栏1. 核心属性  href     指的是浏览器地址栏的地址2. 只要重置 href 属性的值,就会跳转3. 函数 reload() : 重新加载当前地址<span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>zh-CN<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>03-location对象<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>获取当前浏览器地址<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>addr()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jump()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 跳转页面(重点)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>refresh()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>刷新当前页面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--    a标签原理:        实际上就是一个按钮, 底层绑定了一个点击事件:            点击之后就修改location.href = a.href--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.baidu.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>百度一下<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">function</span> <span class="token function">addr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>href<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">jump</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//重置地址栏的地址</span>        location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">"http://www.baidu.com"</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        location<span class="token punctuation">.</span><span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">confirm</span><span class="token punctuation">(</span><span class="token string">"你满18岁了?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">{</span>        location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">"http://www.baidu.com"</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h2 id="2、DOM对象"><a href="#2、DOM对象" class="headerlink" title="2、DOM对象"></a>2、DOM对象</h2><p>作用：把所有页面标签抽象成为一个document对象，我们可以使用js动态修改标签及属性等内容。</p><p><img src="https://gitee.com/ergou15154/drawing-bed/raw/master/source/image-20210829113505797.png" alt="image-20210829113505797"></p><h3 id="2、1-DOM获取元素"><a href="#2、1-DOM获取元素" class="headerlink" title="2、1 DOM获取元素"></a>2、1 DOM获取元素</h3><pre class=" language-markdown"><code class="language-markdown"><span class="token list punctuation">*</span> 第一种：es6之前获取方式<span class="token code keyword">    1）获取一个</span><span class="token code keyword">        document.getElementById(id属性值)  -> 推荐</span><span class="token code keyword">    2）获取多个（了解）</span><span class="token code keyword">        document.getElementsByTagName(标签名)    根据标签名获取，返回数组对象</span><span class="token code keyword">        document.getElementsByClassName(class属性值)    根据class属性获取，返回数组对象</span><span class="token code keyword">        document.getElementsByName(name属性值)  根据name属性获取，返回数组对象</span><span class="token list punctuation">*</span> 第二种：es6可根据CSS选择器获取<span class="token code keyword">    1）获取一个</span><span class="token code keyword">        document.querySelector(id选择器)</span><span class="token code keyword">    2）获取多个</span><span class="token code keyword">        document.querySelectorAll(css选择器)   -> 推荐</span><span class="token code keyword">            标签</span><span class="token code keyword">            class</span><span class="token code keyword">            属性</span><span class="token code keyword">            多层级</span><span class="token code keyword">            并集</span><span class="token code keyword">            单层级</span><span class="token code keyword">            ....</span></code></pre><h3 id="2、2-Dom操作内容"><a href="#2、2-Dom操作内容" class="headerlink" title="2、2 Dom操作内容"></a>2、2 Dom操作内容</h3><pre class=" language-markdown"><code class="language-markdown"><span class="token list punctuation">1.</span> 获取或者修改元素（标签）的纯文本内容<span class="token code keyword">    语法：</span><span class="token code keyword">        js对象.innerText; </span><span class="token list punctuation">2.</span> 获取或者修改元素的html超文本内容<span class="token code keyword">    语法：</span><span class="token code keyword">        js对象.innerHTML; </span><span class="token code keyword">        </span><span class="token list punctuation">3.</span> 获取或者修改包含自身的html内容（了解）<span class="token code keyword">    语法：</span><span class="token code keyword">        js对象.outerHTML; </span></code></pre><h3 id="1-4-DOM操作属性"><a href="#1-4-DOM操作属性" class="headerlink" title="1.4 DOM操作属性"></a>1.4 DOM操作属性</h3><pre class=" language-js"><code class="language-js"><span class="token number">1</span><span class="token punctuation">.</span> <span class="token function">获取文本框的值</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">单选框或复选框的选中状态</span><span class="token punctuation">(</span>boolean<span class="token punctuation">)</span>    语法<span class="token punctuation">:</span>         js对象<span class="token punctuation">.</span>属性名 获取属性值        js对象<span class="token punctuation">.</span>属性名<span class="token operator">=</span><span class="token string">'新属性值'</span>                        <span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token comment" spellcheck="true">/*    *   标签属性    *   1. 文本属性    *    *   2. 状态属性    *       1). 在html中,状态属性基本都可以书写    *           eg. checked = "checked" 缩写成 checked    *       2). 在js中,状态属性值是用boolean来表示的    *           *       html 中的checked 相当于 js.checked  = true    *       html 不写checked 相当于 js.checked = false        * */</span>    <span class="token keyword">var</span> username <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>username<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//  德玛西亚</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>username<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// text</span>        <span class="token comment" spellcheck="true">//设置</span>    username<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">"张三"</span>    <span class="token keyword">var</span> smoke <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"smoke"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    smoke<span class="token punctuation">.</span>checked <span class="token operator">=</span> <span class="token boolean">true</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h3 id="1-5-DOM操作样式"><a href="#1-5-DOM操作样式" class="headerlink" title="1.5 DOM操作样式"></a>1.5 DOM操作样式</h3><pre class=" language-js"><code class="language-js"><span class="token number">1</span><span class="token punctuation">.</span> 设置一个css样式【会用】  行内样式<span class="token punctuation">,</span>优先级高    语法<span class="token punctuation">:</span>         js对象<span class="token punctuation">.</span>style<span class="token punctuation">.</span>样式名<span class="token operator">=</span><span class="token string">'样式值'</span>            特点：样式名按照驼峰式命名                css格式：font<span class="token operator">-</span>size                js格式：fontSize                <span class="token number">2</span><span class="token punctuation">.</span> 批量设置css样式（了解）  行内样式    语法<span class="token punctuation">:</span>         js对象<span class="token punctuation">.</span>style<span class="token punctuation">.</span>cssText<span class="token operator">=</span><span class="token string">'css样式字符串'</span>            缺点：让开发者痛苦，有耦合性            <span class="token number">3</span><span class="token punctuation">.</span> 通过<span class="token keyword">class</span>设置样式【重点】 内部样式<span class="token punctuation">,</span>外部样式<span class="token punctuation">,</span>优先级低    语法<span class="token punctuation">:</span>         js对象<span class="token punctuation">.</span>className<span class="token operator">=</span><span class="token string">'class选择器名'</span>            特点：解耦                                        <span class="token comment" spellcheck="true">// 1. 设置一个css样式</span>    p1<span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">"green"</span>    p1<span class="token punctuation">.</span>style<span class="token punctuation">.</span>fontSize <span class="token operator">=</span> <span class="token string">"50px"</span>    <span class="token comment" spellcheck="true">// 2. 批量设置css样式</span>    p2<span class="token punctuation">.</span>style<span class="token punctuation">.</span>cssText <span class="token operator">=</span> <span class="token string">"color:blue;font-size : 30px"</span>    <span class="token comment" spellcheck="true">// 3. 通过class设置样式</span>    p3<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">"mp"</span>    <span class="token comment" spellcheck="true">//4. 优先级</span>    p4<span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">"green"</span>    p4<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">"mp"</span>    注意优先级问题<span class="token punctuation">:</span> api尽量不要混用            行内 <span class="token operator">></span> 内部<span class="token operator">/</span>外部</code></pre><h2 id="3、正则表达式"><a href="#3、正则表达式" class="headerlink" title="3、正则表达式"></a>3、正则表达式</h2><pre class=" language-js"><code class="language-js">和jAVA中的有点不一样，java中的是string字符串<span class="token operator">*</span> 在js中使用正则表达式    <span class="token number">1</span><span class="token punctuation">.</span>创建方式        <span class="token number">1</span>）<span class="token keyword">let</span> regex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>“正则表达式字符串”<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token number">2</span>）<span class="token keyword">let</span> regex <span class="token operator">=</span> <span class="token regex">/正则表达式/</span><span class="token punctuation">;</span>            <span class="token number">2</span><span class="token punctuation">.</span>验证方法        正则对象<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>字符串<span class="token punctuation">)</span>            符合正则规则就返回<span class="token boolean">true</span>，否则<span class="token boolean">false</span>    <span class="token number">3</span><span class="token punctuation">.</span>在线正则表达式        https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>tool<span class="token punctuation">.</span>oschina<span class="token punctuation">.</span>net<span class="token operator">/</span>regex<span class="token operator">/</span>#</code></pre><pre class=" language-js"><code class="language-js">  正则表达式       <span class="token number">1</span><span class="token punctuation">.</span> 表达式 <span class="token punctuation">:</span> <span class="token function">用特定的符号来表示复杂内容</span><span class="token punctuation">(</span>作用<span class="token punctuation">:</span> 简化<span class="token punctuation">)</span>           <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span> lambda表达式                <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span>           <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span> xpath 路径表达式           <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span> 正则表达式           <span class="token operator">...</span>       <span class="token number">2</span><span class="token punctuation">.</span> 正则表达式<span class="token punctuation">:</span> regular <span class="token function">expression</span><span class="token punctuation">(</span>regex有规律的表达式<span class="token punctuation">)</span>           <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span> 符号               \r\n <span class="token punctuation">:</span> 回车换行               \t <span class="token punctuation">:</span> 制表符               <span class="token operator">+</span> <span class="token punctuation">:</span> 一个或多个               <span class="token punctuation">[</span>a<span class="token operator">-</span>z<span class="token punctuation">]</span> <span class="token punctuation">:</span> 表示a<span class="token operator">~</span>z其中一个               <span class="token punctuation">{</span>m<span class="token punctuation">,</span>n<span class="token punctuation">}</span> <span class="token punctuation">:</span> 至少m个<span class="token punctuation">,</span>至多n个               <span class="token punctuation">(</span>内容<span class="token punctuation">)</span> <span class="token punctuation">:</span> 括号中的内容为一个整体               \w <span class="token punctuation">:</span> 等价于<span class="token punctuation">[</span>a<span class="token operator">-</span>zA<span class="token operator">-</span>Z0<span class="token operator">-</span>9_<span class="token punctuation">]</span>               \d <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>           <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span> java中的正则               I<span class="token punctuation">.</span> 用string类表示               II<span class="token punctuation">.</span> 默认精准匹配               String regex <span class="token operator">=</span> <span class="token string">"[abc]"</span>               必须是abc中的一个<span class="token punctuation">,</span>而且必须只有一个           <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span> js中的正则表达式               I<span class="token punctuation">.</span> 用对象来表示               II<span class="token punctuation">.</span> 默认模糊匹配                <span class="token keyword">let</span> regex <span class="token operator">=</span> <span class="token regex">/[abc]/</span><span class="token punctuation">;</span>               只有包含有abc中的一个即可                   <span class="token comment" spellcheck="true">//规则:  包含有abc中的一个即可</span>     <span class="token keyword">let</span> regex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">"[abc]"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 完整写法</span>     <span class="token keyword">let</span> regex <span class="token operator">=</span> <span class="token operator">/</span><span class="token punctuation">[</span>abc<span class="token punctuation">]</span><span class="token operator">/</span> <span class="token comment" spellcheck="true">// 简略</span>    <span class="token comment" spellcheck="true">//规则:  必须以abc中的一个开头</span>     <span class="token keyword">let</span> regex <span class="token operator">=</span> <span class="token operator">/</span><span class="token operator">^</span><span class="token punctuation">[</span>abc<span class="token punctuation">]</span><span class="token operator">/</span> <span class="token comment" spellcheck="true">//  ^ 必须...开头</span>    <span class="token comment" spellcheck="true">//规则:  必须以abc中的一个结尾</span>     <span class="token keyword">let</span> regex <span class="token operator">=</span> <span class="token operator">/</span><span class="token punctuation">[</span>abc<span class="token punctuation">]</span>$<span class="token operator">/</span> <span class="token comment" spellcheck="true">// $ 必须...结尾</span>         <span class="token comment" spellcheck="true">//规则: 精准匹配：只有一个a</span>    <span class="token keyword">let</span> regex <span class="token operator">=</span> <span class="token regex">/^a$/</span></code></pre><pre class=" language-js"><code class="language-js">    <span class="token comment" spellcheck="true">// 以邮箱举例</span>    <span class="token keyword">let</span> emailReg <span class="token operator">=</span>  <span class="token regex">/^\w+@\w+(.[a-zA-Z]{2,3}){1,2}$/</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 以手机号举例</span>    <span class="token keyword">let</span> phoneReg <span class="token operator">=</span> <span class="token regex">/^1[34578]\d{9}$/</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS基础</title>
      <link href="/2020/03/15/JSjs%E5%9F%BA%E7%A1%80/"/>
      <url>/2020/03/15/JSjs%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="1、JS基础"><a href="#1、JS基础" class="headerlink" title="1、JS基础"></a>1、JS基础</h1><h2 id="1、js的组成"><a href="#1、js的组成" class="headerlink" title="1、js的组成"></a>1、js的组成</h2><table><thead><tr><th><strong>组成部分</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td><strong>ECMA Script</strong></td><td>构成了JS核心的语法基础(简称es)es6</td></tr><tr><td><strong>BOM</strong></td><td>Browser Object Model <font color="red">浏览器对象模型</font>，用来操作浏览器上的对象<br>window、navigator 、screen 、history 、location 、document、 event等；</td></tr><tr><td><strong>DOM</strong></td><td>Document Object Model <font color="red">文档对象模型</font>，用来操作网页中的元素（标签）</td></tr></tbody></table><p><img src="https://gitee.com/ergou15154/drawing-bed/raw/master/source/image-20210828203133499.png" alt="image-20210828203133499"></p><h2 id="2、js引入的2种方式"><a href="#2、js引入的2种方式" class="headerlink" title="2、js引入的2种方式"></a>2、js引入的2种方式</h2><pre class=" language-html"><code class="language-html">1. 内部引入-直接在当前页面中引入js代码    示例：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"js控制台"</span><span class="token punctuation">)</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>2. 外部引入-引入外部js文件    示例：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/hello.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>注意：一般css放在head里，js放在body后面（html是从上往下加载的）</p><h2 id="3、js的3种输出方式"><a href="#3、js的3种输出方式" class="headerlink" title="3、js的3种输出方式"></a>3、js的3种输出方式</h2><pre class=" language-js"><code class="language-js">三种输出方式<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">.</span> 在网页上输出 <span class="token punctuation">(</span>相当于网页上写内容<span class="token punctuation">)</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"网页上输入"</span><span class="token punctuation">)</span>    可以加载标签<span class="token number">2</span><span class="token punctuation">.</span> <span class="token function">控制台输出</span><span class="token punctuation">(</span>一般用户debug js代码<span class="token punctuation">)</span>❤❤❤❤        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"控制台打印日志"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//类似java中的sout</span>        快捷方式<span class="token punctuation">:</span> 内容<span class="token punctuation">.</span>log<span class="token number">3</span><span class="token punctuation">.</span> 弹框❤❤        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"弹框输出"</span><span class="token punctuation">)</span>        会遮罩当前网页<span class="token punctuation">;</span></code></pre><h2 id="4、js的变量和数据类型"><a href="#4、js的变量和数据类型" class="headerlink" title="4、js的变量和数据类型"></a>4、js的变量和数据类型</h2><pre class=" language-js"><code class="language-js">【<span class="token number">1</span>】原始类型    <span class="token number">1</span><span class="token punctuation">.</span> <span class="token function">number</span><span class="token punctuation">(</span>数值类型，无论是整数还是小数，都属于number类型<span class="token punctuation">)</span>    <span class="token number">2</span><span class="token punctuation">.</span> string <span class="token punctuation">(</span>字符串<span class="token punctuation">,</span>推荐使用单引好表示<span class="token punctuation">,</span>但是双引号也可<span class="token punctuation">)</span>    <span class="token number">3</span><span class="token punctuation">.</span> boolean <span class="token punctuation">(</span>布尔类型，<span class="token boolean">true</span><span class="token operator">/</span><span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token number">4</span><span class="token punctuation">.</span> undefined <span class="token punctuation">(</span>只声明变量<span class="token punctuation">,</span>不赋值<span class="token punctuation">,</span> 即为未定义<span class="token punctuation">)</span>    <span class="token keyword">null</span>（值） <span class="token punctuation">(</span>空<span class="token punctuation">,</span>对象为<span class="token keyword">null</span><span class="token punctuation">,</span>undifined派生自<span class="token keyword">null</span><span class="token punctuation">,</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> undefined<span class="token punctuation">)</span><span class="token operator">==</span><span class="token operator">></span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token function">【2】引用类型</span><span class="token punctuation">(</span>对象<span class="token punctuation">)</span>    所有对象都是继承object    如何获取一个变量的类型<span class="token operator">?</span>    <span class="token keyword">let</span> type <span class="token operator">=</span> <span class="token keyword">typeof</span> 变量名称<span class="token punctuation">;</span>js用<span class="token keyword">let</span>声明变量，用<span class="token keyword">var</span>会出现变量的溢出问题（超出作用域范围）。</code></pre><h2 id="5、基础语法"><a href="#5、基础语法" class="headerlink" title="5、基础语法"></a>5、基础语法</h2><p>基本和JAVA相同</p><h3 id="1、运算符"><a href="#1、运算符" class="headerlink" title="1、运算符"></a>1、运算符</h3><pre class=" language-html"><code class="language-html">js运算符跟java不同之处:1.+符号    1.1 任何类型+string结果都是string(此时的加号就是字符串拼接)    1.2 其余任何都能运算            boolean: true=1, false=0            null : 0            undefined : NaN (not a number)2.==(===恒等于)==  只比较字面值,不用管类型 (常用)=== 不仅比较字面值,还要比类型 (不常用)</code></pre><h3 id="2、流程控制"><a href="#2、流程控制" class="headerlink" title="2、流程控制"></a>2、流程控制</h3><p>关注if判断和分支与java的不同之处：❤❤❤</p><pre class=" language-js"><code class="language-js">js中的任何类型<span class="token punctuation">,</span>在判断条件中<span class="token punctuation">,</span>自动转换成boolean    <span class="token number">1</span><span class="token punctuation">.</span> <span class="token function">number</span><span class="token punctuation">(</span>非<span class="token number">0</span>为<span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token number">0</span>为<span class="token boolean">false</span><span class="token punctuation">)</span>     <span class="token number">2</span><span class="token punctuation">.</span> <span class="token function">string</span><span class="token punctuation">(</span>非空串为<span class="token boolean">true</span><span class="token punctuation">,</span> 空串为<span class="token boolean">false</span><span class="token punctuation">(</span>包括‘’空字符串和undified<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token number">3</span><span class="token punctuation">.</span> <span class="token keyword">null</span><span class="token punctuation">(</span>等价于<span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token number">4</span><span class="token punctuation">.</span> <span class="token function">undefined</span><span class="token punctuation">(</span>等价于<span class="token boolean">false</span><span class="token punctuation">)</span></code></pre><h3 id="3、循环控制"><a href="#3、循环控制" class="headerlink" title="3、循环控制"></a>3、循环控制</h3><pre class=" language-js"><code class="language-js"><span class="token number">2</span><span class="token punctuation">.</span> 增强<span class="token keyword">for</span>循环        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> element <span class="token keyword">of</span> array<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//element表示被遍历对象/集合的每个元素</span>            需要执行的代码<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token number">3</span><span class="token punctuation">.</span> 索引<span class="token keyword">for</span>循环        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token keyword">in</span> array<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//index表示 对象/数组的索引</span>            需要执行的代码<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">let</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//js数组符号是中括号,不是大括号</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> element <span class="token keyword">of</span> array<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//打印出来的是值</span><span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token keyword">in</span> array<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//打印出来的是索引</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// js对象</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    name <span class="token punctuation">:</span> <span class="token string">"张三"</span><span class="token punctuation">,</span>    age <span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>    married <span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// console.log(obj.name);</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token keyword">in</span> obj<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//打印出来的是对象的key</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//打印的是值</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//打印的是是值</span><span class="token punctuation">}</span></code></pre><h2 id="6、js函数"><a href="#6、js函数" class="headerlink" title="6、js函数"></a>6、js函数</h2><h3 id="1、普通函数"><a href="#1、普通函数" class="headerlink" title="1、普通函数"></a>1、普通函数</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span>  <span class="token function">函数名</span><span class="token punctuation">(</span>参数列表<span class="token punctuation">)</span><span class="token punctuation">{</span>    函数体<span class="token punctuation">;</span>    <span class="token punctuation">[</span><span class="token keyword">return</span> 返回值<span class="token punctuation">;</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 中括号意思表示内容可以省略....</span><span class="token punctuation">}</span></code></pre><p>注意：</p><pre class=" language-js"><code class="language-js"><span class="token number">1</span><span class="token punctuation">.</span> 如果有返回值<span class="token punctuation">,</span>直接<span class="token keyword">return</span><span class="token punctuation">;</span><span class="token number">2</span><span class="token punctuation">.</span> 参数之前不用加任何关键字<span class="token punctuation">;</span><span class="token number">3</span><span class="token punctuation">.</span> 调用函数时<span class="token punctuation">,</span> 实参个数不必跟形参个数一致<span class="token punctuation">;</span><span class="token number">4</span><span class="token punctuation">.</span> 函数内部有一个隐式变量 <span class="token function">arguments</span><span class="token punctuation">(</span>arguments是数组<span class="token punctuation">,</span> 会接收所有传入的参数<span class="token punctuation">)</span><span class="token number">5</span><span class="token punctuation">.</span> js函数没有重载机制<span class="token punctuation">;</span> </code></pre><p>例子：</p><pre class=" language-js"><code class="language-js"> <span class="token keyword">function</span> <span class="token function">methord2</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span> <span class="token punctuation">{</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"name-age:"</span><span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">//内置的对象：arguments,可以获取出入函数的所有值</span>     <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> data <span class="token keyword">of</span> arguments<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">//获取动态出入的所有参数</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//name-age: zhagnsan 18</span> <span class="token comment" spellcheck="true">//methord2("zhagnsan",18);</span> <span class="token function">methord2</span><span class="token punctuation">(</span><span class="token string">"lisi"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token string">"北京"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="2、匿名函数"><a href="#2、匿名函数" class="headerlink" title="2、匿名函数"></a>2、匿名函数</h3><p>匿名函数通常与事件结合使用</p><pre class=" language-js"><code class="language-js">  <span class="token number">1</span><span class="token punctuation">.</span> 命名函数      <span class="token keyword">function</span> <span class="token function">函数名</span><span class="token punctuation">(</span>参数列表<span class="token punctuation">)</span><span class="token punctuation">{</span>          函数体      <span class="token punctuation">}</span>  <span class="token number">2</span><span class="token punctuation">.</span> 匿名函数      变量 <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>参数列表<span class="token punctuation">)</span><span class="token punctuation">{</span>          函数体      <span class="token punctuation">}</span>  匿名函数注意点<span class="token punctuation">:</span>      <span class="token number">1</span><span class="token punctuation">.</span> 在js中<span class="token punctuation">,</span>函数也是一种特殊的变量类型      <span class="token number">2</span><span class="token punctuation">.</span> 匿名函数必须给变量    匿名函数的运用场景<span class="token punctuation">:</span>      <span class="token number">1</span><span class="token punctuation">.</span> 对象定义      <span class="token number">2</span><span class="token punctuation">.</span> 事件注册</code></pre><pre class=" language-js"><code class="language-js">    <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>        name <span class="token punctuation">:</span> <span class="token string">"张三"</span><span class="token punctuation">,</span>        age <span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>        speak <span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 匿名函数写法</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"说"</span> <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 命名写法</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"正在吃饭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    obj<span class="token punctuation">.</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token string">'今天天气真好'</span><span class="token punctuation">)</span>    obj<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> method02 <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"匿名函数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">method02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 通过变量名调用</span></code></pre><h2 id="7、js事件"><a href="#7、js事件" class="headerlink" title="7、js事件"></a>7、js事件</h2><pre class=" language-js"><code class="language-js"><span class="token number">1</span><span class="token punctuation">.</span> 点击事件：        <span class="token number">1</span><span class="token punctuation">.</span> onclick：单击事件        <span class="token number">2</span><span class="token punctuation">.</span> ondblclick：双击事件 <span class="token punctuation">(</span>double<span class="token punctuation">:</span> 时间间隔很短两次单击<span class="token punctuation">)</span>        <span class="token number">2</span><span class="token punctuation">.</span> 焦点事件        <span class="token number">1</span><span class="token punctuation">.</span> <span class="token function">onblur：失去焦点</span><span class="token punctuation">(</span>绑定鼠标离焦事件<span class="token punctuation">)</span>        <span class="token number">2</span><span class="token punctuation">.</span> onfocus<span class="token punctuation">:</span><span class="token function">元素获得焦点。</span><span class="token punctuation">(</span>绑定鼠标聚焦事件<span class="token punctuation">)</span><span class="token number">3</span><span class="token punctuation">.</span> 加载事件：        <span class="token number">1</span><span class="token punctuation">.</span> onload：页面加载完成后立即发生。<span class="token number">4</span><span class="token punctuation">.</span> 鼠标事件：        <span class="token number">1</span><span class="token punctuation">.</span> onmousedown    鼠标按钮被按下。        <span class="token number">2</span><span class="token punctuation">.</span> onmouseup    鼠标按键被松开。        <span class="token number">3</span><span class="token punctuation">.</span> onmousemove    鼠标被移动。        <span class="token number">4</span><span class="token punctuation">.</span> onmouseover    鼠标移到某元素之上。        <span class="token number">5</span><span class="token punctuation">.</span> onmouseout    鼠标从某元素移开。        <span class="token number">5</span><span class="token punctuation">.</span> 键盘事件：        <span class="token number">1</span><span class="token punctuation">.</span> onkeydown    某个键盘按键被按下。            <span class="token number">2</span><span class="token punctuation">.</span> onkeyup        某个键盘按键被松开。        <span class="token number">3</span><span class="token punctuation">.</span> onkeypress    某个键盘按键被按下并松开。<span class="token number">6</span><span class="token punctuation">.</span> 改变事件        <span class="token number">1</span><span class="token punctuation">.</span> onchange    域的内容被改变。<span class="token number">7</span><span class="token punctuation">.</span> 表单事件：        <span class="token number">1</span><span class="token punctuation">.</span> onsubmit    提交按钮被点击。</code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 使用</span><span class="token number">1</span><span class="token punctuation">.</span> 命名函数绑定    <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span> 定义一个命名函数<span class="token punctuation">;</span>    <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span> 给标签添加属性<span class="token punctuation">:</span>on事件名 <span class="token operator">=</span> <span class="token string">"函数调用"</span><span class="token punctuation">;</span>    效果<span class="token punctuation">:</span> 事件被触发的时候<span class="token punctuation">,</span>函数就会被调用<span class="token number">2</span><span class="token punctuation">.</span> 匿名函数绑定❤❤❤    <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span> 用js代码找到标签对象<span class="token punctuation">;</span>    <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span> 标签对象<span class="token punctuation">.</span>on事件名 <span class="token operator">=</span> 匿名函数<span class="token punctuation">;</span>    效果<span class="token punctuation">:</span> 事件被触发的时候<span class="token punctuation">,</span>函数就会被调用    匿名函数更加常用<span class="token punctuation">,</span>更加解耦     <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"button"</span> value<span class="token operator">=</span><span class="token string">"普通函数"</span> onclick<span class="token operator">=</span><span class="token string">"method01('hehe')"</span><span class="token operator">></span> <span class="token operator">&lt;</span>br<span class="token operator">></span>    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"button"</span> value<span class="token operator">=</span><span class="token string">"匿名函数"</span> id<span class="token operator">=</span><span class="token string">"btn"</span><span class="token operator">></span> <span class="token operator">&lt;</span>br<span class="token operator">></span>                <span class="token keyword">function</span> <span class="token function">method01</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//DOM: 这个方法可以看成id选择器</span>        <span class="token comment" spellcheck="true">// btn表示 id选择器 定位到的 标签对象</span>    <span class="token keyword">let</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"btn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    btn<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"xixi"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 出现的问题</span>问题<span class="token punctuation">:</span> btn是空的<span class="token punctuation">,</span>就意味着找不到id<span class="token operator">=</span>btn的标签            做的事件<span class="token punctuation">:</span>                script标签移动body标签之前             原因<span class="token punctuation">:</span>                浏览器加载网页从上至下<span class="token punctuation">,</span> 执行<span class="token keyword">get</span>函数的时候<span class="token punctuation">,</span>body标签还没加载             解决方案<span class="token punctuation">:</span>                等页面加载完毕了<span class="token punctuation">,</span>再执行<span class="token keyword">get</span>函数就行了                <span class="token operator">-</span><span class="token operator">></span> 第二个事件<span class="token punctuation">:</span> 唯一不需要用户触发的事件<span class="token punctuation">,</span>是浏览器加载网页结束时触发                    window<span class="token punctuation">.</span>onload</code></pre><h2 id="8、内置对象"><a href="#8、内置对象" class="headerlink" title="8、内置对象"></a>8、内置对象</h2><h3 id="1、String"><a href="#1、String" class="headerlink" title="1、String"></a>1、String</h3><pre class=" language-text"><code class="language-text">1. 构造字符串可以使用    a. 双引号    b. 单引号    c. 反引号(重音符) 键盘左上角 esc下面 (es6模板字符串)       优势:在字符串拼接时，可直接使用${变量}引入外部变量值    2. 字符串常用方法    substring(startIndex,endIndex) 提取字符串中两个指定的索引号之间的字符(包头不包尾)    toLowerCase() 把字符串转换为小写。    toUpperCase() 把字符串转换为大写。    split("指定字符切割") 把字符串分割为字符串数组。    trim() 去掉首尾空格</code></pre><h3 id="2、Array数组对象"><a href="#2、Array数组对象" class="headerlink" title="2、Array数组对象"></a>2、Array数组对象</h3><pre class=" language-js"><code class="language-js"><span class="token number">1</span><span class="token punctuation">.</span> <span class="token keyword">let</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">)</span><span class="token number">2</span><span class="token punctuation">.</span> <span class="token keyword">let</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">// 推荐, 中括号</span>注意事项：    a<span class="token punctuation">.</span>数组中的元素可以不是同一种类型    b<span class="token punctuation">.</span>数组可以动态扩容</code></pre><h3 id="3、Date日期对象"><a href="#3、Date日期对象" class="headerlink" title="3、Date日期对象"></a>3、Date日期对象</h3><pre class=" language-js"><code class="language-js"><span class="token number">1</span><span class="token punctuation">.</span> 创建对象   <span class="token keyword">let</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 获取当前时间时间 <span class="token comment" spellcheck="true">//Sun May 24 2020 14:38:34 GMT+0800 (中国标准时间:东八区)</span><span class="token number">2</span><span class="token punctuation">.</span> 常用方法    <span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 转换为本地日期格式的字符串  <span class="token comment" spellcheck="true">//2021/8/28下午9:00:06</span>    <span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 获取日期中的year <span class="token comment" spellcheck="true">// 2021</span>    <span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   获取日期中的month <span class="token comment" spellcheck="true">// 值：0-11</span>    <span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    获取日期中的号 <span class="token comment" spellcheck="true">// 24</span>    <span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token function">获取时间毫秒值</span><span class="token punctuation">(</span>时间原点<span class="token punctuation">:</span> <span class="token number">1970</span>年<span class="token number">1</span>月<span class="token number">1</span>号<span class="token number">0</span>时分秒<span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token comment" spellcheck="true">//// 1970年~今毫秒值</span></code></pre><h3 id="4、Math数学对象"><a href="#4、Math数学对象" class="headerlink" title="4、Math数学对象"></a>4、Math数学对象</h3><pre class=" language-js"><code class="language-js"><span class="token number">1</span><span class="token punctuation">.</span> 四舍五入 <span class="token function">round</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">2</span><span class="token punctuation">.</span> 向下取整 <span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  地板<span class="token number">3</span><span class="token punctuation">.</span> 向上取整 <span class="token function">ceil</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  天花板<span class="token number">4</span><span class="token punctuation">.</span> 产生随机数 <span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> ：返回 <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">之间的随机数</span><span class="token punctuation">(</span>包含<span class="token number">0</span>不包含<span class="token number">1</span><span class="token punctuation">)</span></code></pre><h3 id="5、js全局函数"><a href="#5、js全局函数" class="headerlink" title="5、js全局函数"></a>5、js全局函数</h3><pre class=" language-js"><code class="language-js">js全局函数不需要通过任何对象间接调用，可直接调用<span class="token punctuation">;</span>常见的全局函数如下：<span class="token function">parseInt</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>：输入数据转int类型<span class="token function">parseFloat</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>：输入数据转小数类型<span class="token function">encodeURI</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span>：编码字符串<span class="token function">decodeURI</span><span class="token punctuation">(</span>result2<span class="token punctuation">)</span>：解码字符串</code></pre>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PicGo+GitHub 图床搭建</title>
      <link href="/2020/03/15/PicGo-GitHub/"/>
      <url>/2020/03/15/PicGo-GitHub/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>用GitHub搭建图床，在很久之前我就有了解，但由于市面上有挺多免费的图床，比如我之前一直在用的 路过图床，所以一直懒得动手搭建GitHub图床。一直到前两天我在完善博客的相册时，发现 路过图床 免费版的有这么多限制，比如：每小时限制上传50张图片，每天限制上传100张图片，而且免费版用户的存储容量貌似不过300M，这才意识到有一个自己的GitHub图床是多么重要。</p><h3 id="0x001-PicGO-介绍"><a href="#0x001-PicGO-介绍" class="headerlink" title="0x001 PicGO 介绍"></a>0x001 PicGO 介绍</h3><p>PicGo是一款图片上传工具，目前支持 SM.MS图床、腾讯云COS、GitHub图床、七牛图床、Imgur图床、阿里云OSS、又拍云图床，未来将支持更多图床。</p><p>在支持的这些图床中，SM.MS和Imgur有免费版和收费版，免费版的肯定有很多的使用限制，比如每小时限制上传次数，限制用户的上传容量等等；腾讯云COS、阿里云、有拍云都是要收费使用的；七牛云貌似前期使用免费，后期又要收费才能使用，就剩下的GitHub才是免费且最可靠的。</p><p>PicGo源项目GitHub地址已给出，但是去GitHub下载速度非常慢，这里额外提供一个蓝奏云的快速下载地址。</p><ul><li>GitHub地址：<a href="https://github.com/Molunerfinn/PicGo">https://github.com/Molunerfinn/PicGo</a></li><li>蓝奏云地址：<a href="https://luckyzmj.lanzous.com/id3e0id">https://luckyzmj.lanzous.com/id3e0id</a></li></ul><h3 id="0x002-GitHub-图床"><a href="#0x002-GitHub-图床" class="headerlink" title="0x002 GitHub 图床"></a>0x002 GitHub 图床</h3><h4 id="1-创建GitHub图床仓库"><a href="#1-创建GitHub图床仓库" class="headerlink" title="1. 创建GitHub图床仓库"></a>1. 创建GitHub图床仓库</h4><p>首先需要有一个登录GitHub的账号，没有的话去<a href="https://github.com/">GitHub官网</a>注册一个</p><p>创建一个新的图床仓库，点击右上角的New repository</p><p><img src="https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/posts/20200529155833.png"></p><p>填写如下配置信息，然后Create创建仓库</p><p><img src="https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/posts/20200529160010.png"></p><h4 id="2-获取GitHub-token值"><a href="#2-获取GitHub-token值" class="headerlink" title="2. 获取GitHub token值"></a>2. 获取GitHub token值</h4><p>点击右上的头像，选择设置Setting</p><p><img src="https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/posts/20200529160727.png"></p><p>点击选择Developer settings </p><p><img src="https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/posts/20200529160939.png"></p><p>点击 Generate New token</p><p><img src="https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/posts/20200529161241.png"></p><p>填写如下配置信息，只要勾选repo选项即可，然后页面拉到底部点击Generate token 即可</p><p><img src="https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/posts/20200529161716.png"></p><p>此时会跳转到带有token的页面，将token值复制记录下来，之后用PicGo绑定GitHub图床时会利用到</p><p><img src="https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/posts/20200529162127.png"></p><h3 id="0x003-PicGo-配置"><a href="#0x003-PicGo-配置" class="headerlink" title="0x003 PicGo 配置"></a>0x003 PicGo 配置</h3><h4 id="1-绑定GitHub图床"><a href="#1-绑定GitHub图床" class="headerlink" title="1. 绑定GitHub图床"></a>1. 绑定GitHub图床</h4><p>首先下载安装好PicGo软件，然后在右列表找到GitHub图床配置</p><p><img src="https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/posts/20200529163130.png"></p><p><strong>1. 设定仓库名(必填)：</strong> </p><p>按照“GitHub账户名/仓库名的格式填写”，比如我的是：Luckyzmj/imgbed</p><p><strong>2. 设定分支名(必填)：</strong> </p><p>仓库分支名填写”master”或者”main”，视情况而定。因为GitHub 官方表示,从2020年10月1日起,在该平台上创建的所有新的源代码仓库将默认被命名为”main”,而不是原先的”master”。</p><p><strong>3. 设定Token(必填)：</strong> </p><p>将之前步骤的Token值复制粘贴到这里</p><p><strong>4. 指定存储路径：</strong> </p><p>这个选项可以为空，如果想将图片上传到仓库的指定目录下，可以填写目录名加/，比如我的imgbed仓库下有个posts文件夹，需设置为 posts/</p><p><strong>5. 设定自定义域名：</strong> </p><p>这里统一用jsdelivr的CDN加速域名，在上传图片后成功后，PicGo会将“自定义域名+上传的图片名”生成的访问链接</p><pre><code>自定义域名格式：https://cdn.jsdelivr.net/gh/GitHub账户名/仓库名以我的格式为例：https://cdn.jsdelivr.net/gh/Luckyzmj/imgbed</code></pre><p>配置完全部信息后，点击 设为默认图床，最后点击确定即可</p><h4 id="2-上传图片到图床"><a href="#2-上传图片到图床" class="headerlink" title="2. 上传图片到图床"></a>2. 上传图片到图床</h4><p>在上传区上传图片，可支持本地图片上传(可多选图片)、剪贴板上传、URL上传等三种方式。上传图片成功后，选择你想要生成的图片链接格式</p><p><img src="https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/posts/20200529170555.png"></p><p>在图片区，可以看到成功上传的图片，选择相应的图片进行操作即可</p><p><img src="https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/posts/20200529170831.png"></p><h4 id="3-PicGo-注意事项"><a href="#3-PicGo-注意事项" class="headerlink" title="3. PicGo 注意事项"></a>3. PicGo 注意事项</h4><p>如果配置完PicGo后却上传图片失败，可以参考以下方法：</p><ol><li>检查自定义域名是否正确</li><li>仓库名不要有空格</li><li>图片名字不要带有特殊符号，如：%、+、*、空格等</li><li>建议开启时间戳重命名，防止图片名字重复</li><li>上传图片间歇太短，需在PicGo设置中关闭Server选项</li><li>PicGo应用不稳定因素，需重启应用</li></ol><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ul><li><a href="https://blog.csdn.net/sunhwee/article/details/100109956">https://blog.csdn.net/sunhwee/article/details/100109956</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 博客篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PicGo </tag>
            
            <tag> GitHub图床 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven</title>
      <link href="/2020/03/15/Maven/"/>
      <url>/2020/03/15/Maven/</url>
      
        <content type="html"><![CDATA[<h1 id="1、Maven"><a href="#1、Maven" class="headerlink" title="1、Maven"></a>1、Maven</h1><h2 id="1、安装过程"><a href="#1、安装过程" class="headerlink" title="1、安装过程"></a>1、安装过程</h2><blockquote><p>1.下载maven解压。</p><p>2.配置JAVA_HOME路径</p><p>3.配置MAVEN_HOME</p><p>4.添加java和maven的bin到path中</p><p>5.测试 mvn  -v</p></blockquote><h2 id="2、maven仓库配置"><a href="#2、maven仓库配置" class="headerlink" title="2、maven仓库配置"></a>2、maven仓库配置</h2><p>maven的仓库可以分为3种：</p><table><thead><tr><th>仓库名称</th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>本地仓库</td><td>相当于缓存，工程第一次会从远程仓库（互联网）去下载jar 包，将jar包存在本地仓库（在程序员的电脑上）。第二次不需要从远程仓库去下载。先从本地仓库找，如果找不到才会去远程仓库找。</td></tr><tr><td>中央仓库</td><td>是远程仓库，仓库中jar由专业团队（maven团队）统一维护。中央仓库的地址：<a href="http://repo1.maven.org/maven2">http://repo1.maven.org/maven2</a></td></tr><tr><td>私服</td><td>是远程仓库, 一般是在公司内部架设一台私人服务器对外公开。开发中经常使用的国内私服：阿里云 <a href="http://maven.aliyun.com/nexus/content/groups/public">http://maven.aliyun.com/nexus/content/groups/public</a></td></tr></tbody></table><p><strong>配置本地仓库：</strong></p><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> </span><span class="token code keyword">    1.本地仓库的位置是通过maven的核心配置文件（settings.xml）来配置的。settings.xml文件位于maven安装目录：..\apache-maven-3.5.2\conf\settings.xml 。</span>    </code></pre><ol><li> 在你的电脑上创建一个空文件夹，每个人的本地仓库是自己慢慢生长起来的。</li></ol><pre><code>e:\repository</code></pre><ol start="2"><li> 配置本地仓库，修改maven的安装目录中conf/settings.xml文件，在53行配置本地仓库为上面的目录。默认是注释掉的。</li></ol><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>localRepository</span><span class="token punctuation">></span></span>e:\repository<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>localRepository</span><span class="token punctuation">></span></span></code></pre><ol start="3"><li> 私服配置，修改settings.xml文件，159行指定中央仓库的镜像。这里使用的是阿里云的中央仓库，速度比官方的快很多。注：要保留mirrors (s)</li></ol><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>nexus-aliyun<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>Nexus aliyun<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://maven.aliyun.com/nexus/content/groups/public<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span></code></pre><ol start="4"><li>修改maven使用JDK的版本，200行。如果不配置就需要在idea中配置。maven默认使用的是JDK1.5的版本，这里使用1.8的版本。</li></ol><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>jdk-1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activation</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activeByDefault</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activeByDefault</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jdk</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>jdk</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activation</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.compilerVersion</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.compilerVersion</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">></span></span></code></pre><p>5). 私服说明</p><p>【阿里云私服】–连外网时使用</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>nexus-aliyun<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>Nexus aliyun<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://maven.aliyun.com/nexus/content/groups/public<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span></code></pre><p><strong>注:  千万注意, 只可配置一个(另一个要注释!)   不然两个可能发生冲突 ,导致jar包下不下来 !!!!!!!</strong></p><h2 id="3、maven项目构建的生命周期"><a href="#3、maven项目构建的生命周期" class="headerlink" title="3、maven项目构建的生命周期"></a>3、maven项目构建的生命周期</h2><h3 id="1、maven的三套生命周期："><a href="#1、maven的三套生命周期：" class="headerlink" title="1、maven的三套生命周期："></a>1、<strong>maven的三套生命周期：</strong></h3><p>（1）clean：清理工作</p><blockquote><p>pre-clean：执行一些在clean之前的工作</p><p>clean：移除上一次构建产生的所有文件</p><p>post-clean：执行一些在clean之后立刻完成的工作</p></blockquote><p>（2）default：核心工作，例如编译，测试，打包，部署等</p><blockquote><p>这里面的事件非常的多，如下图</p><p><img src="https://i.loli.net/2021/09/11/nrZs2INEfJjqQ1B.png"> </p></blockquote><p><strong>对于default生命周期，每个事件在执行之前都会将之前的所有事件依次执行一遍</strong></p><p>（3）site：产生报告，发布站点等</p><blockquote><p>pre-site：执行一些在生成站点文档之前的工作</p><p>site：生成项目的站点文档</p><p>post-site：执行一些在生成站点文档之后完成的工作，为部署做准备</p><p>site-deploy：将生成的站点文档部署到特定的服务器上</p></blockquote><h3 id="2、maven生命周期相关命令"><a href="#2、maven生命周期相关命令" class="headerlink" title="2、maven生命周期相关命令"></a>2、maven生命周期相关命令</h3><pre class=" language-markdown"><code class="language-markdown">mvn clean：调用clean生命周期的clean阶段，清理上一次构建项目生成的文件；mvn compile ：编译src/main/java中的java代码；mvn test ：编译并运行了test中内容 ；mvn package：将项目打包成可发布的文件，如jar或者war包； mvn install ：发布项目到本地仓库 ；</code></pre><p>maven编译后的文件放在target目录中</p><p><strong>mvn package：</strong></p><p>​    package命令是将项目打包成可以发布的包。maven项目常见的打包方式有两种，maven的java project会打成jar包。maven的web project会打成war包。打包完成后将生成的文件存放在target目录中。</p><p><strong>mvn install：</strong></p><p>​    install命令是将当前的项目打包并发布到本地仓库中，供本地的其他maven项目使用。项目发布的路径：<strong>本地仓库路径/groupId/artifactId/</strong> </p><h2 id="4、maven应用详解"><a href="#4、maven应用详解" class="headerlink" title="4、maven应用详解"></a>4、maven应用详解</h2><h3 id="1、pom配置文件"><a href="#1、pom配置文件" class="headerlink" title="1、pom配置文件"></a>1、pom配置文件</h3><p>pom.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.heima.maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-web2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>war<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre><p><strong>【pom文件详解】</strong> </p><pre class=" language-xml"><code class="language-xml">1. <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span><span class="token punctuation">></span></span> ：pom文件的根节点；2. <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>： 声明项目描述符遵循哪一个POM模型版本。模型本身的版本很少改变，虽然如此，但它仍然是必不可少的，目前POM模型版本是4.0.0；3. <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span> ：maven项目组织id标识符，一般是公司域名倒过来写；4. <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>：项目的标识符--项目名。5. <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>：项目的版本号；6. <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>：maven项目的打包方式一般配置jar或者war；</code></pre><h3 id="2、依赖管理"><a href="#2、依赖管理" class="headerlink" title="2、依赖管理"></a>2、依赖管理</h3><h4 id="1、Maven坐标"><a href="#1、Maven坐标" class="headerlink" title="1、Maven坐标"></a>1、Maven坐标</h4><ol><li>groupId：定义当前项目（jar包）隶属的实际项目组。</li><li>artifactId：定义当前项目（jar包）的名称；</li><li>version：定义当前项目（jar包）的版本号；</li></ol><p>通过上面三个参数我们就能够确定一个唯一版本号的jar包。</p><pre class=" language-markdown"><code class="language-markdown"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span><span class="token code keyword">        &lt;dependency></span><span class="token code keyword">            &lt;groupId>javax.servlet&lt;/groupId></span><span class="token code keyword">            &lt;artifactId>javax.servlet-api&lt;/artifactId></span><span class="token code keyword">            &lt;version>3.0.1&lt;/version></span><span class="token code keyword">            &lt;scope>provided&lt;/scope></span><span class="token code keyword">        &lt;/dependency></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><h4 id="2、依赖范围"><a href="#2、依赖范围" class="headerlink" title="2、依赖范围"></a>2、依赖范围</h4><p>依赖的jar默认情况可以在任何地方可用，可以通过<code>scope</code>标签设定其作用范围</p><p>这里的范围主要是指以下三种范围</p><p>（1）主程序范围有效（src/main目录范围内）</p><p>（2）测试程序范围内有效（src/test目录范围内）</p><p>（3）是否参与打包（package指令范围内）</p><p>此外：<code>scope</code>标签的取值有四种：<code>compile,test,provided,runtime</code></p><p>这四种取值与范围的对应情况如下：</p><p><img src="https://i.loli.net/2021/09/11/zyjZs2m8JCkSWg1.png">  </p><pre class=" language-markdown"><code class="language-markdown"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.3.9.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!--compile是默认的依赖范围，可以不用写出来--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token code keyword">     &lt;groupId>javax.servlet&lt;/groupId></span><span class="token code keyword">     &lt;artifactId>javax.servlet-api&lt;/artifactId></span><span class="token code keyword">     &lt;version>3.1.0&lt;/version></span><span class="token code keyword">     &lt;scope>provided&lt;/scope></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.0.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h4 id="3、依赖版本维护"><a href="#3、依赖版本维护" class="headerlink" title="3、依赖版本维护"></a>3、依赖版本维护</h4><p>第一步 ：在pom.xml中使用<propeties>属性定义jar包的版本 </propeties></p><pre class=" language-markdown"><code class="language-markdown"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span><span class="token code keyword">        &lt;junit.version>4.13&lt;/junit.version></span><span class="token code keyword">        &lt;mybatis.version>3.4.5&lt;/mybatis.version></span><span class="token code keyword">    &lt;/properties></span></code></pre><p>第二步 ：在依赖的<version>中使用${}引入前面定义好的版本</version></p><pre class=" language-markdown"><code class="language-markdown"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span><span class="token code keyword">     &lt;dependency></span><span class="token code keyword">         &lt;groupId>junit&lt;/groupId></span><span class="token code keyword">         &lt;artifactId>junit&lt;/artifactId></span><span class="token code keyword">         &lt;version>${junit.version}&lt;/version></span><span class="token code keyword">         &lt;scope>test&lt;/scope></span><span class="token code keyword">     &lt;/dependency></span><span class="token code keyword">     </span><span class="token code keyword">     &lt;dependency></span><span class="token code keyword">         &lt;groupId>org.mybatis&lt;/groupId></span><span class="token code keyword">         &lt;artifactId>mybatis&lt;/artifactId></span><span class="token code keyword">         &lt;version>${mybatis.version}&lt;/version></span><span class="token code keyword">         &lt;scope>compile&lt;/scope></span><span class="token code keyword">     &lt;/dependency></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><p>好处：方便对项目中使用的jar包版本的统一管理。</p><h4 id="4、maven插件"><a href="#4、maven插件" class="headerlink" title="4、maven插件"></a>4、maven插件</h4><pre class=" language-markdown"><code class="language-markdown"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span><span class="token code keyword">        &lt;plugins></span><span class="token code keyword">            </span><span class="token comment" spellcheck="true">&lt;!--JDK编译插件--></span><span class="token code keyword">            &lt;plugin></span><span class="token code keyword">                &lt;groupId>org.apache.maven.plugins&lt;/groupId></span><span class="token code keyword">                &lt;artifactId>maven-compiler-plugin&lt;/artifactId></span><span class="token code keyword">                &lt;version>3.2&lt;/version></span><span class="token code keyword">                &lt;configuration></span><span class="token code keyword">                    &lt;source>1.8&lt;/source></span><span class="token code keyword">                    &lt;target>1.8&lt;/target></span><span class="token code keyword">                    &lt;encoding>UTF-8&lt;/encoding></span><span class="token code keyword">                &lt;/configuration></span><span class="token code keyword">            &lt;/plugin></span><span class="token code keyword">            </span><span class="token comment" spellcheck="true">&lt;!--test插件--></span><span class="token code keyword">            &lt;plugin></span><span class="token code keyword">                &lt;groupId>org.apache.maven.plugins&lt;/groupId></span><span class="token code keyword">                &lt;artifactId>maven-surefire-plugin&lt;/artifactId></span><span class="token code keyword">                &lt;version>2.16&lt;/version></span><span class="token code keyword">                &lt;configuration></span><span class="token code keyword">                    &lt;forkMode>once&lt;/forkMode></span><span class="token code keyword">                    &lt;argLine>-Dfile.encoding=UTF-8&lt;/argLine></span><span class="token code keyword">                &lt;/configuration></span><span class="token code keyword">            &lt;/plugin></span><span class="token code keyword">            </span><span class="token comment" spellcheck="true">&lt;!-- tomcat7插件 --></span><span class="token code keyword">            &lt;plugin></span><span class="token code keyword">              &lt;groupId>org.apache.tomcat.maven&lt;/groupId></span><span class="token code keyword">              &lt;artifactId>tomcat7-maven-plugin&lt;/artifactId></span><span class="token code keyword">              &lt;version>2.2&lt;/version></span><span class="token code keyword">              &lt;configuration></span><span class="token code keyword">                &lt;port>80&lt;/port></span><span class="token code keyword">                &lt;path>/&lt;/path></span><span class="token code keyword">              &lt;/configuration></span><span class="token code keyword">            &lt;/plugin></span><span class="token code keyword">        &lt;/plugins></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>异常体系</title>
      <link href="/2020/03/15/%E5%BC%82%E5%B8%B8%E4%BD%93%E7%B3%BB/"/>
      <url>/2020/03/15/%E5%BC%82%E5%B8%B8%E4%BD%93%E7%B3%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="1、异常体系"><a href="#1、异常体系" class="headerlink" title="1、异常体系"></a>1、异常体系</h2><p><img src="https://gitee.com/ergou15154/drawing-bed/raw/master/source/image-20210717194616847.png" alt="image-20210717194616847"></p><p>异常体系结构：</p><p>java.lang.Throwable</p><ol><li>​    java.lang.Error:一般不编写针对性的代码进行处理。</li><li>   java.lang.Exception:可以进行异常的处理</li><li>编译时异常(checked)<ul><li>IOException<ul><li>FileNotFoundException</li></ul></li><li>ClassNotFoundException</li></ul></li><li>运行时异常(unchecked RuntimeException)<ul><li>NullPointerException</li><li>ArrayIndexOutOfBoundsException</li><li>ClassCastException</li><li>NumberFormatException</li><li>InputMismatchException</li><li>ArithmeticException</li></ul></li></ol><h2 id="2、两种异常处理机制"><a href="#2、两种异常处理机制" class="headerlink" title="2、两种异常处理机制"></a>2、两种异常处理机制</h2><h3 id="2、1-try—catch—finally"><a href="#2、1-try—catch—finally" class="headerlink" title="2、1  try—catch—finally"></a>2、1  try—catch—finally</h3><p>一、异常的处理：抓抛模型</p><p>过程一：”抛”：程序在正常执行的过程中，一旦出现异常，就会在异常代码处生成一个对应异常类的对象。</p><p>并将此对象抛出。一旦抛出对象以后，其后的代码就不再执行。</p><p>关于异常对象的产生：① 系统自动生成的异常对象</p><p>② 手动的生成一个异常对象，并抛出（throw）</p><p>过程二：”抓”：可以理解为异常的处理方式：① try-catch-finally  ② throws</p><p>try-catch-finally的使用：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//可能出现异常的代码</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>异常类型<span class="token number">1</span> 变量名<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//处理异常的方式1</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>异常类型<span class="token number">2</span> 变量名<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//处理异常的方式2</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>异常类型<span class="token number">3</span> 变量名<span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//处理异常的方式3</span><span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//一定会执行的代码</span><span class="token punctuation">}</span><span class="token operator">*</span> <span class="token number">1</span><span class="token punctuation">.</span> <span class="token keyword">finally</span>是可选的。 <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">.</span> 使用<span class="token keyword">try</span>将可能出现异常代码包装起来，在执行过程中，一旦出现异常，就会生成一个对应异常类的对象，根据此对象 <span class="token operator">*</span>    的类型，去<span class="token keyword">catch</span>中进行匹配 <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">.</span> 一旦<span class="token keyword">try</span>中的异常对象匹配到某一个<span class="token keyword">catch</span>时，就进入<span class="token keyword">catch</span>中进行异常的处理。一旦处理完成，就跳出当前的 <span class="token operator">*</span>    <span class="token keyword">try</span><span class="token operator">-</span><span class="token keyword">catch</span>结构（在没有写<span class="token keyword">finally</span>的情况）。继续执行其后的代码 <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">.</span> <span class="token keyword">catch</span>中的异常类型如果没有子父类关系，则谁声明在上，谁声明在下无所谓。 <span class="token operator">*</span>    <span class="token keyword">catch</span>中的异常类型如果满足子父类关系，则要求子类一定声明在父类的上面。否则，报错 <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">.</span> 常用的异常对象处理的方式： ① String  <span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    ② <span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">6</span><span class="token punctuation">.</span> 在<span class="token keyword">try</span>结构中声明的变量，再出了<span class="token keyword">try</span>结构以后，就不能再被调用 <span class="token operator">*</span> <span class="token number">7</span><span class="token punctuation">.</span> <span class="token keyword">try</span><span class="token operator">-</span><span class="token keyword">catch</span><span class="token operator">-</span><span class="token keyword">finally</span>结构可以嵌套 <span class="token operator">*</span>  <span class="token operator">*</span> 体会<span class="token number">1</span>：使用<span class="token keyword">try</span><span class="token operator">-</span><span class="token keyword">catch</span><span class="token operator">-</span><span class="token keyword">finally</span>处理编译时异常，是得程序在编译时就不再报错，但是运行时仍可能报错。 <span class="token operator">*</span>     相当于我们使用<span class="token keyword">try</span><span class="token operator">-</span><span class="token keyword">catch</span><span class="token operator">-</span><span class="token keyword">finally</span>将一个编译时可能出现的异常，延迟到运行时出现。 <span class="token operator">*</span>      <span class="token operator">*</span> 体会<span class="token number">2</span>：开发中，由于运行时异常比较常见，所以我们通常就不针对运行时异常编写<span class="token keyword">try</span><span class="token operator">-</span><span class="token keyword">catch</span><span class="token operator">-</span><span class="token keyword">finally</span>了。 <span class="token operator">*</span>      针对于编译时异常，我们说一定要考虑异常的处理。</code></pre><p>try-catch-finally中finally的使用：</p><ul><li>finally是可选的</li><li>finally中声明的是一定会被执行的代码。即使catch中又出现异常了，try中有return语句，catch中有return语句等情况，运行在return之前。</li><li>像数据库连接、输入输出流、网络编程Socket等资源，JVM是不能自动的回收的，我们需要自己手动的进行资源的释放。此时的资源释放，就需要声明在finally中。</li></ul><h3 id="2、2-throws-异常类型"><a href="#2、2-throws-异常类型" class="headerlink" title="2、2  throws  +  异常类型"></a>2、2  throws  +  异常类型</h3><p>格式：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">regist</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>id <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">MyException</span><span class="token punctuation">(</span><span class="token string">"不能输入负数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">}</span></code></pre><p>一旦方法执行时出现异常会产生一个异常类型的对象，此对象若满足throws后的异常类型，则抛出。异常后续代码不再执行。</p><p>抛出的异常总会有人处理的，谁调用谁处理，处理不了继续往上抛。try–catch–finally才是真正解决异常的方式。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentTest</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Student s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            s<span class="token punctuation">.</span><span class="token function">regist</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1001</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//            e.printStackTrace();</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">regist</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>id <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//            System.out.println("您输入的数据非法！");</span>            <span class="token comment" spellcheck="true">//手动抛出异常对象</span><span class="token comment" spellcheck="true">//            throw new RuntimeException("您输入的数据非法！");</span><span class="token comment" spellcheck="true">//            throw new Exception("您输入的数据非法！");</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">MyException</span><span class="token punctuation">(</span><span class="token string">"不能输入负数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//错误的</span><span class="token comment" spellcheck="true">//            throw new String("不能输入负数");</span>        <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Student [id="</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2、3-其他注意点"><a href="#2、3-其他注意点" class="headerlink" title="2、3 其他注意点"></a>2、3 其他注意点</h3><ol><li><strong>如果父类中被重写的方法没有throws方式处理异常，则子类重写的方法也不能使用throws，意味着如果子类重写的方法中有异常，必须使用try-catch-finally方式处理。</strong></li><li>执行的方法a中，先后又调用了另外的几个方法，这几个方法是递进关系执行的。我们建议这几个方法使用throws的方式进行处理。而执行的方法a可以考虑使用try-catch-finally方式进行处理。(这几个方法递进执行，需要保证每个方法return出来的数据是有用的，如果在方法内就把异常处理了，出来的数据不一定准确，所以不如直接报异常，终止方法执行，直接让外部方法获取异常，在去处理。)</li></ol><h2 id="3、手动抛出异常"><a href="#3、手动抛出异常" class="headerlink" title="3、手动抛出异常"></a>3、手动抛出异常</h2><p>关于异常对象的产生：</p><ol><li>系统自动生成异常对象</li><li>手动的生成异常对象，并抛出(throw)；</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentTest</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Student s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            s<span class="token punctuation">.</span><span class="token function">regist</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1001</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//            e.printStackTrace();</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">regist</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//抛出的异常传给方法</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>id <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//手动抛出异常对象</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"您输入的数据非法！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//错误的</span><span class="token comment" spellcheck="true">//            throw new String("不能输入负数");</span>        <span class="token punctuation">}</span>            <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Student [id="</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token punctuation">}</span></code></pre><p>在throw异常前会执行finally代码块里的代码。</p><h2 id="4、用户自定义异常"><a href="#4、用户自定义异常" class="headerlink" title="4、用户自定义异常"></a>4、用户自定义异常</h2><ul><li>如何自定义异常类？</li><li><ol><li>继承于现有的异常结构：RuntimeException 、Exception</li></ol></li><li><ol start="2"><li>提供全局常量：serialVersionUID(代表着类的标识)</li></ol></li><li><ol start="3"><li>提供重载的构造器</li></ol></li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/* * 如何自定义异常类？ * 1. 继承于现有的异常结构：RuntimeException 、Exception * 2. 提供全局常量：serialVersionUID * 3. 提供重载的构造器 *  */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyException</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token operator">-</span>7034897193246939L<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">MyException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token function">MyException</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentTest</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Student s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            s<span class="token punctuation">.</span><span class="token function">regist</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1001</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//            e.printStackTrace();</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">regist</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>id <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//            System.out.println("您输入的数据非法！");</span>            <span class="token comment" spellcheck="true">//手动抛出异常对象</span><span class="token comment" spellcheck="true">//            throw new RuntimeException("您输入的数据非法！");</span><span class="token comment" spellcheck="true">//            throw new Exception("您输入的数据非法！");</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">MyException</span><span class="token punctuation">(</span><span class="token string">"不能输入负数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//错误的</span><span class="token comment" spellcheck="true">//            throw new String("不能输入负数");</span>        <span class="token punctuation">}</span>            <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Student [id="</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JAVA基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DDL_DML_DQL</title>
      <link href="/2020/03/15/%E6%95%B0%E6%8D%AE%E5%BA%93DDL-DML-DQL/"/>
      <url>/2020/03/15/%E6%95%B0%E6%8D%AE%E5%BA%93DDL-DML-DQL/</url>
      
        <content type="html"><![CDATA[<h1 id="1、数据库"><a href="#1、数据库" class="headerlink" title="1、数据库"></a>1、数据库</h1><h2 id="1、安装注意事项"><a href="#1、安装注意事项" class="headerlink" title="1、安装注意事项"></a>1、安装注意事项</h2><h3 id="1、1-数据库远程登录问题？"><a href="#1、1-数据库远程登录问题？" class="headerlink" title="1、1.数据库远程登录问题？"></a>1、1.数据库远程登录问题？</h3><pre class=" language-mysql"><code class="language-mysql">linux下安装的mysql为安全起见，不支持远程登录mysql，所以需要设置开启，并且刷新权限缓存；    # 授权root用户在root密码下远程登录    grant all privileges on *.* to 'root'@'%' identified by 'root';    # 刷新权限    flush privileges;    # 注意：如果刷新依旧失效，则重启mysql服务即可；</code></pre><h3 id="2-防火墙问题"><a href="#2-防火墙问题" class="headerlink" title="2-防火墙问题"></a>2-防火墙问题</h3><pre class=" language-mysql"><code class="language-mysql">因为要远程连接linux系统，系统为数据库3306端口，开启访问权限；方式1：关闭防火墙；方式2：释放3306端口；关闭防火墙指令：    systemctrl stop firewalld.service    或者释放端口（推荐）：#开放的端口永久保存到防火墙(linux命令)/sbin/iptables -I INPUT -p tcp --dport 3306 -j ACCEPT# 允许3306访问firewall-cmd --zone=public --add-port=3306/tcp --permanent</code></pre><h3 id="3、数据库编码问题"><a href="#3、数据库编码问题" class="headerlink" title="3、数据库编码问题"></a>3、数据库编码问题</h3><pre class=" language-mysql"><code class="language-mysql">mysql在windows下默认编码格式是UTF8，但是在linux下默认编码格式为lant1,有时会导致乱码问题，我们可以统一设置mysql默认的编码格式为UTF8：[root@localhost ~]# vi /etc/my.cnf在mysqld下添加服务编码格式：character_set_server = utf8# 设置完毕后，重启mysql服务[root@localhost ~]# systemctl restart mysqld</code></pre><h3 id="4、远程root用户授权问题"><a href="#4、远程root用户授权问题" class="headerlink" title="4、远程root用户授权问题"></a>4、远程root用户授权问题</h3><pre class=" language-mysql"><code class="language-mysql">修改mysql库user表的权限</code></pre><h2 id="2、登录使用数据库"><a href="#2、登录使用数据库" class="headerlink" title="2、登录使用数据库"></a>2、登录使用数据库</h2><pre class=" language-mysql"><code class="language-mysql"># 方式1：# -h :表示远程mysql服务器的ip地址/域名 -P:port，指定数据库端口号 -u:user，用户名 -p:password 密码[root@localhost ~]# mysql -h 192.168.188.130 -P 3306 -uroot -proot# 方式2：推荐# 如果连接的是本地数据库服务器，且端口号时3306 那么-h 和-P可以不写[root@localhost ~]# mysql -h 192.168.188.130 -P 3306 -uroot -p# 连接本地测试[root@localhost ~]# mysql -uroot -p</code></pre><pre class=" language-mysql"><code class="language-mysql"># 定义数据库create database day01;# 定义表create table st1(id int,name varchar(10));# 向表中插入数据insert into st1 values(1,'zhangsan');# 查询数据select * from st1;</code></pre><h2 id="3、DDL语言"><a href="#3、DDL语言" class="headerlink" title="3、DDL语言"></a>3、DDL语言</h2><h3 id="1、定义数据库信息"><a href="#1、定义数据库信息" class="headerlink" title="1、定义数据库信息"></a>1、定义数据库信息</h3><pre class=" language-mysql"><code class="language-mysql"># 1.创建库# create:定义关键子，可以定义库、表# database：数据库关键字create database db1;# 2.判断db2是否存在，如果存在，不报错，不存在则创建# 说明：if not exists：判断，如果不存在则创建，存在不创建，也不报错create database if not exists db2;# 3.定义数据库，并设置字符集# 说明：character set用于定义库或者表的字符集，同时注意mysql中万国码：utf8create database db3 character set gbk;</code></pre><h3 id="2、查看数据库信息"><a href="#2、查看数据库信息" class="headerlink" title="2、查看数据库信息"></a>2、查看数据库信息</h3><pre class=" language-mysql"><code class="language-mysql"># 1.查询所有数据库,列表显示所有的数据库的名称信息show databases;# 2.查看数据库的详细信息show create database db1;</code></pre><h3 id="3-数据库修改删除操作"><a href="#3-数据库修改删除操作" class="headerlink" title="3. 数据库修改删除操作"></a>3. 数据库修改删除操作</h3><pre class=" language-mysql"><code class="language-mysql"># 1.修改数据库字符集# alter：ddl修改关键字alter database db3 character set utf8; # 2.删库（慎重）# drop:ddl删除操作，可以删除库或者表drop database db2;# 3.切换数据库use db3;# 4.查看当前正在使用哪个数据库select database();</code></pre><h3 id="4、表的定义"><a href="#4、表的定义" class="headerlink" title="4、表的定义"></a>4、表的定义</h3><h4 id="1-定义表的常用数据类型"><a href="#1-定义表的常用数据类型" class="headerlink" title="1.定义表的常用数据类型"></a>1.定义表的常用数据类型</h4><table><thead><tr><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>整数</td><td>常用：int或者bigint(int对应java中int,bigint对应java中long)</td></tr><tr><td>小数类型</td><td>常用：double、float、decimal (数据库中decimal 对应java中BigDecimal类型，可以精准运算)</td></tr><tr><td>日期</td><td>常用：date(年月日)、datetime(年月日时分秒)，对应java中的Date类型</td></tr><tr><td>字符串</td><td>常用：char(n)==&gt;定义长字符，举例：name   char(5):意思是姓名长度必须是5，如果输入长度小于5，则以空格填充补齐，如果长度超过5，则截取。应用场景：身份证号、手机号等<br>varchar(n)—-&gt;边长字符串，举例：name  varchar(5):输入什么字符串，就保存什么字符串，但是要求：长度不要唱过指定的n长度(超过时，不报错，但是自动给截取：“12345678”–》“12345”)</td></tr></tbody></table><h4 id="2-创建表"><a href="#2-创建表" class="headerlink" title="2.创建表"></a>2.创建表</h4><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true"># 创建表</span><span class="token comment" spellcheck="true"># create:创建表关键字</span><span class="token comment" spellcheck="true"># table:表关键字</span><span class="token keyword">create</span> <span class="token keyword">table</span> student<span class="token punctuation">(</span>    id <span class="token keyword">int</span><span class="token punctuation">,</span>    name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    birthday <span class="token keyword">date</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="3-表的查看与删除操作"><a href="#3-表的查看与删除操作" class="headerlink" title="3.表的查看与删除操作"></a>3.表的查看与删除操作</h4><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true"># 1.查看当前库下的所有表</span><span class="token keyword">show</span> <span class="token keyword">tables</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 2.查看表的字段信息：名称和类型</span><span class="token keyword">desc</span> student<span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 3.查看创建表的信息</span><span class="token comment" spellcheck="true">#CREATE TABLE `student` (</span><span class="token comment" spellcheck="true">#  `id` int(11) DEFAULT NULL,</span><span class="token comment" spellcheck="true">#  `name` varchar(10) DEFAULT NULL,</span><span class="token comment" spellcheck="true">#  `birthday` date DEFAULT NULL</span><span class="token comment" spellcheck="true">#) ENGINE=InnoDB DEFAULT CHARSET=utf8</span><span class="token keyword">show</span> <span class="token keyword">create</span> <span class="token keyword">table</span> student<span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 4.删表 </span><span class="token comment" spellcheck="true"># if exists:存在则删除，不存在也不报错</span><span class="token keyword">drop</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token keyword">exists</span> student<span class="token punctuation">;</span></code></pre><h4 id="4-对表的字段的修改"><a href="#4-对表的字段的修改" class="headerlink" title="4.对表的字段的修改"></a>4.对表的字段的修改</h4><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true"># 1.为表添加字段</span><span class="token comment" spellcheck="true"># add:关键字，表示添加字段信息</span><span class="token keyword">alter</span> <span class="token keyword">table</span> student <span class="token keyword">add</span> remark <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 2.修改字段类型</span><span class="token comment" spellcheck="true"># modify:关键字，表示对字段类型修改</span><span class="token keyword">alter</span> <span class="token keyword">table</span> student <span class="token keyword">modify</span> remark <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 3.修改字段的名称和类型</span><span class="token comment" spellcheck="true"># change:关键字，表示修改字段名称与类型</span><span class="token keyword">alter</span> <span class="token keyword">table</span> student change remark intro <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 4.删除字段（列）</span><span class="token comment" spellcheck="true"># drop:关键字，删除，不仅可以删除库和表，也可以删除表中的字段</span><span class="token keyword">alter</span> <span class="token keyword">table</span> student <span class="token keyword">drop</span> intro<span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 1.修改表名</span><span class="token comment" spellcheck="true"># 语法结构：rename xxx to ：修改表名称</span><span class="token keyword">rename</span> <span class="token keyword">table</span> student <span class="token keyword">to</span> st2<span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 2.修改表的字符集</span><span class="token keyword">alter</span> <span class="token keyword">table</span> st2 <span class="token keyword">character set</span> gbk<span class="token punctuation">;</span></code></pre><h2 id="4、-DML"><a href="#4、-DML" class="headerlink" title="4、 DML"></a>4、 DML</h2><h3 id="1-更新表操作"><a href="#1-更新表操作" class="headerlink" title="1.更新表操作"></a>1.更新表操作</h3><pre class=" language-mysql"><code class="language-mysql"># 1.全表更新性别为女 (开发慎用)# 说明：数据修改关键字：update  set,如果不加更新条件，默认全表更新，等价于删表操作update student set sex='女',address='铁岭';# 2.更新id=2 性别为男# 开发推荐，使用条件关键字：where,只更新满足条件的数据update student set sex='男' where id=2;</code></pre><h3 id="2-删除表中数据"><a href="#2-删除表中数据" class="headerlink" title="2.删除表中数据"></a>2.删除表中数据</h3><pre class=" language-mysql"><code class="language-mysql"># 1.删除id=3的学生信息# 特点：仅仅删除满足条件的数据delete from student where id=3;# 2.全表删除（开发慎用）# 删除操作，如果不设置删除条件，则全表删除delete from student;</code></pre><p><strong>两种清空表的方式：</strong></p><pre class=" language-mysql"><code class="language-mysql"># truncate是DDL语句，特点：先将整张表删除（包含表的结构和数据），然后再# 创建一张一模一样的表，而delete语句仅仅删除表中的数据，对表结构没有影响# 从删除效率看，如果数据量比较大，truncate删除的效率更高truncate table student;# 等价于：drop table student;create table student(xx);</code></pre><h3 id="3-DML小节"><a href="#3-DML小节" class="headerlink" title="3 DML小节"></a>3 DML小节</h3><pre class=" language-mysql"><code class="language-mysql">插入：insert into更新：update  set删除：delete from</code></pre><h2 id="5、DQL数据查询"><a href="#5、DQL数据查询" class="headerlink" title="5、DQL数据查询"></a>5、DQL数据查询</h2><h3 id="1-无条件查询"><a href="#1-无条件查询" class="headerlink" title="1.无条件查询"></a>1.无条件查询</h3><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true"># 1.查询所有的学生信息（无条件全表查询）</span><span class="token comment" spellcheck="true"># 说明：DQL查询关键字：select 字段名称  from 表</span><span class="token keyword">select</span> id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>sex<span class="token punctuation">,</span>address<span class="token punctuation">,</span>math<span class="token punctuation">,</span>english <span class="token keyword">from</span> student3<span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 全字段查询时，可使用*匹配当前表下的所有列</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student3<span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 只查询id和姓名</span><span class="token keyword">select</span> id<span class="token punctuation">,</span>name <span class="token keyword">from</span> student3<span class="token punctuation">;</span></code></pre><h4 id="查询结果参与运算"><a href="#查询结果参与运算" class="headerlink" title="查询结果参与运算"></a>查询结果参与运算</h4><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true"># 字段与字段运算</span><span class="token keyword">select</span> 字段<span class="token number">1</span><span class="token punctuation">[</span><span class="token operator">+</span>、<span class="token operator">-</span>、<span class="token operator">*</span>、<span class="token operator">/</span>、<span class="token operator">%</span><span class="token punctuation">]</span>字段<span class="token number">2</span> <span class="token keyword">from</span> tab<span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 字段与常量值运算</span><span class="token keyword">select</span> 字段<span class="token number">1</span><span class="token punctuation">[</span><span class="token operator">+</span>、<span class="token operator">-</span>、<span class="token operator">*</span>、<span class="token operator">/</span>、<span class="token operator">%</span><span class="token punctuation">]</span>固定值 <span class="token keyword">from</span> tab<span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 需求1:查询姓名、年龄，将每个人的数学增加10分</span><span class="token keyword">select</span> name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>math<span class="token operator">+</span><span class="token number">10</span> <span class="token keyword">as</span> math <span class="token keyword">from</span> student<span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 查询所有列与math + english的和并使用别名”总成绩”</span>若是其中一个为<span class="token boolean">null</span>，则运算出阿来的结果也为<span class="token boolean">null</span>。<span class="token keyword">select</span> <span class="token operator">*</span><span class="token punctuation">,</span>math<span class="token operator">+</span>english <span class="token keyword">as</span> 总成绩 <span class="token keyword">from</span> student<span class="token punctuation">;</span></code></pre><h3 id="2-去重查询操作"><a href="#2-去重查询操作" class="headerlink" title="2.去重查询操作"></a>2.去重查询操作</h3><p>distant</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> distant address <span class="token keyword">from</span> student<span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 去重时，如果是多个字段，那么只有多个字段名的值都相同才会去重，distant后面的字段越少越好。</span><span class="token keyword">select</span> distant sex<span class="token punctuation">,</span> address <span class="token keyword">from</span> student<span class="token punctuation">;</span></code></pre><h3 id="3-蠕虫复制"><a href="#3-蠕虫复制" class="headerlink" title="3.蠕虫复制"></a>3.蠕虫复制</h3><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true"># 要求：通过蠕虫复制快速将student3表中的id，name,age信息复制到student表下</span><span class="token keyword">insert</span> <span class="token keyword">into</span> student<span class="token punctuation">(</span>id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span> <span class="token keyword">select</span> id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>age <span class="token keyword">from</span> student3<span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 快速创建一张与student3结构一样的表</span><span class="token comment" spellcheck="true"># 创建了一张空表，字段信息与student3一致</span><span class="token keyword">create</span> <span class="token keyword">table</span> student2 <span class="token operator">like</span> student3<span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> student2 <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student3<span class="token punctuation">;</span></code></pre><h3 id="4-比较运算符"><a href="#4-比较运算符" class="headerlink" title="4.比较运算符"></a>4.比较运算符</h3><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true"># 1.查询数学称呼大于80</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student3 <span class="token keyword">where</span> math <span class="token operator">></span> <span class="token number">80</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 2.查询英语成绩小于或者等于80的学生信息</span><span class="token comment" spellcheck="true"># 说明：在数据库中null表示不存在，无法与存在的值进行比较，所以直接丢弃不显示</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student3 <span class="token keyword">where</span> english <span class="token operator">&lt;=</span><span class="token number">80</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 3.查询年龄等于20</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student3 <span class="token keyword">where</span> age<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 3.查询年龄不等于20</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student3 <span class="token keyword">where</span> age<span class="token operator">!=</span><span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student3 <span class="token keyword">where</span> age<span class="token operator">&lt;></span><span class="token number">20</span><span class="token punctuation">;</span></code></pre><h3 id="5-逻辑运算符"><a href="#5-逻辑运算符" class="headerlink" title="5.逻辑运算符"></a>5.逻辑运算符</h3><p>逻辑运算符用于多条件之间的关联关系；</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true"># 2.查询age>35 且sex='男'</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student3 <span class="token keyword">where</span> age <span class="token operator">></span> <span class="token number">35</span> <span class="token operator">and</span> sex<span class="token operator">=</span><span class="token string">'男'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 2.查询age>35 或者sex='男'</span><span class="token comment" spellcheck="true"># or左右条件满足其一就显示</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student3 <span class="token keyword">where</span> age <span class="token operator">></span> <span class="token number">35</span> <span class="token operator">or</span> sex<span class="token operator">=</span><span class="token string">'男'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 3.查询id等于1 或者3 或者5 或者7</span><span class="token comment" spellcheck="true"># 连续使用or，造成sql关键字冗余，维护性差【不推荐】</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student3 <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">1</span> <span class="token operator">or</span> id<span class="token operator">=</span><span class="token number">3</span> <span class="token operator">or</span> id<span class="token operator">=</span><span class="token number">5</span> <span class="token operator">or</span> id<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">;</span></code></pre><h3 id="6-范围查询-in，-between-and"><a href="#6-范围查询-in，-between-and" class="headerlink" title="6.范围查询  in， between and"></a>6.范围查询  in， between and</h3><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true"># 3.查询id等于1 或者3 或者5 或者7</span><span class="token comment" spellcheck="true"># 连续使用or，造成sql关键字冗余，维护性差【不推荐】</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student3 <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">1</span> <span class="token operator">or</span> id<span class="token operator">=</span><span class="token number">3</span> <span class="token operator">or</span> id<span class="token operator">=</span><span class="token number">5</span> <span class="token operator">or</span> id<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 推荐使用in关键字查询</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student3 <span class="token keyword">where</span> id <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 查询id不是1,3,5,7的学生</span><span class="token comment" spellcheck="true"># not in： 反向查询，不在指定的枚举的值内</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student3 <span class="token keyword">where</span> id <span class="token operator">not</span> <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 查询英语成绩大于等于75，小于等于90</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student3 <span class="token keyword">where</span> english <span class="token operator">>=</span><span class="token number">75</span> <span class="token operator">and</span> english <span class="token operator">&lt;=</span><span class="token number">90</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student3 <span class="token keyword">where</span> english <span class="token operator">between</span> <span class="token number">75</span> <span class="token operator">and</span> <span class="token number">90</span><span class="token punctuation">;</span></code></pre><h3 id="7-like模糊搜索"><a href="#7-like模糊搜索" class="headerlink" title="7.like模糊搜索"></a>7.like模糊搜索</h3><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true"># 1.查询姓马的学生</span><span class="token comment" spellcheck="true"># 姓名必须以马开头</span><span class="token comment" spellcheck="true"># 说明：like:像，表示模糊搜索关键字 %：匹配任意多个字符，包含0个</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student3 <span class="token keyword">where</span> name <span class="token operator">like</span> <span class="token string">'马%'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 2.姓名包含德</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student3 <span class="token keyword">where</span> name <span class="token operator">like</span> <span class="token string">'%德%'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 3.姓马且名字长度为3</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student3 <span class="token keyword">where</span> name <span class="token operator">like</span> <span class="token string">'马__'</span><span class="token punctuation">;</span></code></pre><h3 id="8-排序查询"><a href="#8-排序查询" class="headerlink" title="8.排序查询"></a>8.排序查询</h3><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true"># 1.根据age降序排序</span><span class="token comment" spellcheck="true"># 如果不指定排序规则，默认升序ASC</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student3 <span class="token keyword">order</span> <span class="token keyword">by</span> age <span class="token keyword">desc</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 2.根据age 降序排序和math 升序排序综合排序</span><span class="token comment" spellcheck="true"># sql规则：先根据age进行排序，如果age中有相同的值，然后根据math进行排序</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student3 <span class="token keyword">order</span> <span class="token keyword">by</span> age <span class="token keyword">desc</span><span class="token punctuation">,</span>math <span class="token keyword">asc</span><span class="token punctuation">;</span></code></pre><h3 id="9、limit"><a href="#9、limit" class="headerlink" title="9、limit"></a>9、limit</h3><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> 表名 <span class="token keyword">limit</span>  <span class="token keyword">offset</span><span class="token punctuation">,</span> row_count<span class="token punctuation">;</span>mysql中<span class="token keyword">limit</span>的用法：返回前几条或者中间某几行数据<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> 表名 <span class="token keyword">limit</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span>。<span class="token number">1</span>表示索引，注意这里的索引从<span class="token number">0</span>开始。对应表中第一行数据<span class="token number">4</span>表示查询记录数。上述就表示从第<span class="token number">2</span>条记录开始查询，一共查询<span class="token number">4</span>条，即到第<span class="token number">5</span>条。</code></pre><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><pre class=" language-sq"><code class="language-sq">1.DDL:数据定义语言，核心定义库 表 表中字段信息    1.1.库相关：        create database 数据库名称；        show create database 数据库名称；        show databases;        drop database 数据库名称        alter database 数据库名称 character set 新的字符集    1.2 表        create table 表名(字段名称  字段类型,.....);        常用数据类型：            整数：int bitint-->long            日期：date  datetime time            小数：double float decimal(m,n)---》m数字总长度，n表示小数位数，整数位=m-n            字符串：char(n)-->定长，如果不足，则空格填充                   varchar(n)->变长       show tables;       show create table 表名；       desc 表名；（查询表中列的信息）       drop table 表名；       alter table 表名 character set 新的字符集；       rename table 旧名称 to 新名称；       alter table 表名 add 字段名称 字段类型；       alter table 表名 modify 字段名称 字段类型；       alter table 表名 change 旧字段名称 新字段名称 新字段类型；       alter table 表名 drop 字段名称；2.DML:对表中的数据进行增删改操作；     增：insert into 表名（字段名称1，字段名称2，...） values(v1,v2,...),(v1,v2,...);     更新：         无条件：全表更新，等价于删表操作慎重         update 表名 set 字段1=v1,字段2=v2,...;        有条件：开发常用        update 表名 set 字段1=v1,字段2=v2,... where 条件;     删除：         delete from 表名；===》全表删除  与truncate有啥区别？         delete from 表名 where 条件；开发最常用3.DQL:数据查询语言，主要用户对表中的数据进行select查询操作；      1.无条件 select 字段1，... from 表名；===》全表查询          字段参与运算：          select 字段1[+、-、*、/、%]字段2/常量值  from 表名          表名查询：              关键字as,可以省略不写              select 字段1 as 别名 from 别名；      2.有条件查询          2.1 比较运算符 < <= > >= != <> =          2.2 逻辑运算符：作用关联多个条件                   and:and左右的条件，都满足，才显示                or：or满足其一就显示；                not：反向查询        模糊搜索：            关键字：like  基本语法：select * from 表名 where 字段 like '通配符字符串';            2种通配符：                %：匹配任意多个字符包含0个                _:匹配一个        排序：            关键字：order by 基本语法：select * from 表名 order by 字段1 [asc|desc]，字段2 [asc|desc];            联合排序的规则：先根据第一个字段进行排序，如果第一个字段中有相同的值，则按照第二个字段排序，一次类推；            潜台词：如果第一个字段，都不一样，其他字段不参与排序运算；        范围查询：            in:查询等于枚举的值的数据信息 语法：select * from 表名 where 字段 in (v1，v2,...);            只要字段等于括号内的任意值，都显示；            between  and:范围查询关键字 语法：select * from 表名 where 字段 between v1 and v2;            注意事项：1.v1值必须小于v2 2.查询包含边界值                          </code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVAEE面试题目</title>
      <link href="/2020/03/15/JAVAEE%E9%9D%A2%E8%AF%95/"/>
      <url>/2020/03/15/JAVAEE%E9%9D%A2%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h2 id="1、面向对象的三个基本特征，说说自己的理解？"><a href="#1、面向对象的三个基本特征，说说自己的理解？" class="headerlink" title="1、面向对象的三个基本特征，说说自己的理解？"></a>1、面向对象的三个基本特征，说说自己的理解？</h2><pre class=" language-markdown"><code class="language-markdown">1，封装 继承 多态2，理解和以下大同小异即可，主要看表达能力(1)封装(Encapsulation)所谓封装，也就是把客观事物封装成抽象的类，并且类可以把自己的数据和方法只让可信的类或者对象操作，对不可信的进行信息隐藏。简单的说，一个类就是一个封装了数据以及操作这些数据的代码的逻辑实体。在一个对象内部，某些代码或某些数据可以是私有的，不能被外界访问。(2)继承(Inheritance)继承是指这样一种能力：它可以使用现有类的所有功能，并在无需重新编写原来的类的情况下对这些功能进行扩展。通过继承创建的新类称为“子类”或“派生类”，被继承的类称为“基类”、“父类”或“超类”。继承的过程，就是从一般到特殊的过程。(3)多态(Polymorphism)所谓多态就是指一个类实例的相同方法在不同情形有不同表现形式。多态机制使具有不同内部结构的对象可以共享相同的外部接口。这意味着，虽然针对不同对象的具体操作不同，但通过一个公共的类，它们（那些操作）可以通过相同的方式予以调用。最常见的多态就是将子类传入父类参数中，运行时调用父类方法时通过传入的子类决定具体的内部结构或行为。</code></pre><h2 id="2、八种基本数据类型，以及他们的封装类？"><a href="#2、八种基本数据类型，以及他们的封装类？" class="headerlink" title="2、八种基本数据类型，以及他们的封装类？"></a>2、八种基本数据类型，以及他们的封装类？</h2><pre class=" language-markdown"><code class="language-markdown">回答要点：八种基本数据类型：int、short、float、double、long、boolean、byte、char。封装类分别是：Integer、Short、Float、Double、Long、Boolean、Byte、Character。</code></pre><h2 id="3、接口和抽象类有什么区别？"><a href="#3、接口和抽象类有什么区别？" class="headerlink" title="3、接口和抽象类有什么区别？"></a>3、接口和抽象类有什么区别？</h2><pre class=" language-markdown"><code class="language-markdown">区别：1，实现：抽象类的子类使用 extends 来继承；接口必须使用 implements 来实现接口。2，实现数量：类可以实现很多个接口；但是只能继承一个抽象类。3，构造方法：抽象类可以有构造方法；接口不能有。4，main 方法：抽象类可以有 main 方法，并且我们能运行它；接口不能有 main 方法。5，方法修饰符：接口中的方法默认使用 public 修饰；抽象类中的方法可以是任意访问修饰符。</code></pre><h2 id="4、final、finally、finalize的区别？"><a href="#4、final、finally、finalize的区别？" class="headerlink" title="4、final、finally、finalize的区别？"></a>4、final、finally、finalize的区别？</h2><pre class=" language-markdown"><code class="language-markdown">区别：1、final<span class="token entity" title="&nbsp;">&amp;nbsp;</span>在java中，final可以用来修饰类不能被继承，方法不能被重写和变量变成常量（成员变量或局部变量）；2、finallyfinally作为异常处理的一部分，它只能用在try/catch语句中，并且附带一个语句块，表示这段语句最终一定会被执行（不管有没有抛出异常），经常被用在需要释放资源的情况下；3、finalize　　垃圾回收机制　　finalize()是在java.lang.Object里定义的，也就是说每一个对象都有这么个方法。　　这个方法在gc启动，该对象被回收的时候被调用。　　其实gc可以回收大部分的对象（凡是new出来的对象，gc都能搞定，一般情况下我们又不会用new以外的方式去创建对象）　　，所以一般是不需要程序员去实现finalize的。<span class="token entity" title="&nbsp;">&amp;nbsp;</span>特殊情况下，需要程序员实现finalize，当对象被回收的时候释放一些资源，比如：一个socket链接，在对象初始化时创建，整个生命周期内有效，那么就需要实现finalize，关闭这个链接。</code></pre><h2 id="5、重写（也叫覆盖）和重载的区别？"><a href="#5、重写（也叫覆盖）和重载的区别？" class="headerlink" title="5、重写（也叫覆盖）和重载的区别？"></a>5、重写（也叫覆盖）和重载的区别？</h2><pre class=" language-markdown"><code class="language-markdown">1、概念：1.1、重写(Override)：子类继承了父类原有的方法，但有时子类并不想原封不动的继承父类中的某个方法，所以在方法名，参数列表，返回类型(除过子类中方法的返回值是父类中方法返回值的子类时)都相同的情况下， 对方法体进行修改或覆盖，这就是重写；1.2、重载(Overload)：在一个类中，同名的方法如果有不同的参数列表（参数类型不同、参数个数不同甚至是参数顺序不同）则视为重载。同时，重载对返回类型没有要求，可以相同也可以不同，但不能通过返回类型是否相同来判断重载。2、总结：2.1、重载：发生在父类与子类之间；方法名、参数列表、返回值类型（子类方法中的返回值类型可以是父类方法中返回值类型的子类）必须相同；子类方法的权限修饰符的限制一定要大于或等于被重写方法的权限修饰符（public>protected>default>private)；重写方法一定不能抛出新的检查异常或者比被重写方法申明更加宽泛的检查型异常；父类中私有方法不能被重写。2.2、重载是一个类中多态性的一种表现；重载要求同名方法的参数列表不同(参数类型，参数个数甚至是参数顺序)；重载的时候，返回值类型可以相同也可以不相同。无法以返回型别作为重载函数的区分标准。3、区别：3.1、重载发生在一个类中，同名的方法如果有不同的参数列表则视为重载；3.2、重写发生在子类与父类之间，重写要求子类被重写方法与父类被重写方法有相同的参数列表，有兼容的返回类型，比父类被重写方法更好访问，不能比父类被重写方法声明更多的异常。</code></pre><h2 id="6、-和-equals-的区别是什么？-两个对象的-hashCode-相同，则-equals-也一定为-true，对吗？"><a href="#6、-和-equals-的区别是什么？-两个对象的-hashCode-相同，则-equals-也一定为-true，对吗？" class="headerlink" title="6、 == 和 equals 的区别是什么？ 两个对象的 hashCode()相同，则 equals()也一定为 true，对吗？"></a>6、 == 和 equals 的区别是什么？ 两个对象的 hashCode()相同，则 equals()也一定为 true，对吗？</h2><pre class=" language-markdown"><code class="language-markdown">要点：1，==比较 的是变量（栈区）内存中存放的对象的（堆区）内存地址，用来判断两个对象地址是否相同，即是否指向相同一个对象。比较的是真正意义上的指针操作。比较的是操作符两端的操作数是否是同一个对象；2，equals用来比较的是两个对象的内容是否相等，由于所有的类都是继承自java.lang.object类，所以适用与所有对象，如果没有对该方法进行覆盖，Object中的equals方法等同==3，不一定相同，两个对象equals相等，我们常规定hashcode返回值要相等，两个对象的equals()不相等，那么对这两个对象中的任一对象上调用 hashCode 方法不要求一定生成不同的整数结果。</code></pre><h2 id="7、Java-中操作String的都有哪些类？它们之间有什么区别？"><a href="#7、Java-中操作String的都有哪些类？它们之间有什么区别？" class="headerlink" title="7、Java 中操作String的都有哪些类？它们之间有什么区别？"></a>7、Java 中操作String的都有哪些类？它们之间有什么区别？</h2><pre class=" language-markdown"><code class="language-markdown">要点：1，String StringBuffer StringBuilder；2，String是不可变的对象，对每次String类型的改变都会生成一个新的对象；3，StringBufer和StringBuilder是可以改变对象的；4，操作效率StringBuilder > Stringbuffer > String；5，线程安全：StringBuffer是线程安全，用于多线程，Stringbuilder是非线程安全，用于单线程；</code></pre><h2 id="8、BIO、NIO、AIO-有什么区别？"><a href="#8、BIO、NIO、AIO-有什么区别？" class="headerlink" title="8、BIO、NIO、AIO 有什么区别？"></a>8、BIO、NIO、AIO 有什么区别？</h2><pre class=" language-markdown"><code class="language-markdown">要点：BIO：Block IO同步阻塞式IO，传统IO，模式简单，并发处理能力低NIO：New IO同步非阻塞IO，是传统IO的升级，客户端和服务器端通过Channel通道通讯，实现了多路复用AIO：Asynchronous IO,NIO的升级，也叫NIO2，实现了异步非堵塞IO，异步IO的操作基于事件和回调机制</code></pre><h2 id="9、冒泡排序，选择排序，快速排序知道吗？"><a href="#9、冒泡排序，选择排序，快速排序知道吗？" class="headerlink" title="9、冒泡排序，选择排序，快速排序知道吗？"></a>9、冒泡排序，选择排序，快速排序知道吗？</h2><pre class=" language-markdown"><code class="language-markdown">要点：（参考以下描述，大同小异即可）一，冒泡排序（Bubble Sort）： 对要进行排序的数据中相邻的数据进行两两比较，将较大的数据放在后面，依次对所有的数据进行操作，直至所有数据按要求完成排序。双重循环时间 O(n^2)算法描述：<span class="token list punctuation">1.</span> 比较相邻两个数据如果。第一个比第二个大，就交换两个数<span class="token list punctuation">2.</span> 对每一个相邻的数做同样1的工作，这样从开始一队到结尾一队在最后的数就是最大的数。<span class="token list punctuation">3.</span> 针对所有元素上面的操作，除了最后一个。<span class="token list punctuation">4.</span> 重复1~3步骤，直到顺序完成。二，选择排序：选中数组的某个元素,其后面的元素依次和选中的元素进行两两比较，将较大的数据放在后面，依次从前到后选中每个元素，直至所有数据按要求完成排序。如果有n个数据进行排序，总共需要比较n-1次，每一次比较完毕，下一次的比较就会少一个数据参与算法描述：<span class="token list punctuation">1.</span> 在一个长度为 N 的无序数组中，第一次遍历 n-1 个数找到最小的和第一个数交换。<span class="token list punctuation">2.</span> 第二次从下一个数开始遍历 n-2 个数，找到最小的数和第二个数交换。<span class="token list punctuation">3.</span> 重复以上操作直到第 n-1 次遍历最小的数和第 n-1 个数交换，排序完成。三，快速排序：快速排序采用了分治法，在数据序列中选择一个元素作为基准值，每趟从数据序列的两端开始交替进行，将小于基准值的元素交换到序列前端，将大于基准值的元素交换到序列后端，介于两者之间的位置则成为了基准值的最终位置。同时，序列被划分成两个子序列，再分别对两个子序列进行快速排序，直到子序列的长度为1，则完成排序。算法描述：<span class="token list punctuation">1.</span> 从数列中挑出一个元素作为基准。<span class="token list punctuation">2.</span> 重新排列数列，把所有的比基准小的放在基准前面，反之放在后面（一样大可任意一边）完成后基准处在分区的中间位置。<span class="token list punctuation">3.</span> 通过递归调用把小于基准元素和大于基准元素的子序列进行排序。</code></pre><h2 id="10、List、Set、Map-之间的区别是什么？"><a href="#10、List、Set、Map-之间的区别是什么？" class="headerlink" title="10、List、Set、Map 之间的区别是什么？"></a>10、List、Set、Map 之间的区别是什么？</h2><pre class=" language-markdown"><code class="language-markdown">要点：LIST和set继承自collection，Map是一个接口List：可以允许重复的对象可以插入多个null元素List是一个有序容器，保持了每个元素的插入顺序，输出的顺序就是插入的顺序常用的实现类有ArrayList，linkedList、vector，其中ArrayList最为流行，它提供了使用索引的随意访问，LinkedList则对于经常需要从list中添加删除的场合更为合适Set：不允许重复只可以插入一个null元素是一个无序容器，无法保证每个元素的存储顺序，Treeset通过Comparator或者Comparable维护了一个排序顺序Set接口最流行的几个实现类是HashSet，linkedHashSet、TreeSet。最为流行的是基于HashMap实现的HashSet，TreeSet还实现了SortedSet接口，因此TreeSet是一个根据compare（）和compareTo（）的定义进行排序的有序容器Map：Map不是collection的子接口或者实现类，Map是一个接口Map的每个Entry都持有两个对象，也就是一个键一个值，Map可能会持有相同的值对象但键对象必须是唯一的TreeMap也通过Comparator或者Comparable维护一个排序顺序Map里你可以随意拥有多个null值但是只能有一个null键Map流行的几个实现类HashMap、LinkedHashMap、HashTable和TreeMap</code></pre><h2 id="11、-哪些集合类是线程安全的？"><a href="#11、-哪些集合类是线程安全的？" class="headerlink" title="11、 哪些集合类是线程安全的？"></a>11、 哪些集合类是线程安全的？</h2><pre class=" language-markdown"><code class="language-markdown">要点：Vector：就比Arraylist多了个同步化机制（线程安全）。Hashtable：就比Hashmap多了个线程安全。ConcurrentHashMap:是一种高效但是线程安全的集合。Stack：栈，也是线程安全的，继承于Vector</code></pre><h2 id="12、线程和进程的区别？"><a href="#12、线程和进程的区别？" class="headerlink" title="12、线程和进程的区别？"></a>12、线程和进程的区别？</h2><pre class=" language-markdown"><code class="language-markdown">要点：进程：是并发执行的程序在执行过程中分配和管理资源的基本单位，是一个动态概念，竞争计算机系统资源的基本单位。线程：是进程的一个执行单元，是进程内科调度实体。比进程更小的独立运行的基本单位。线程也被称为轻量级进程。</code></pre><h2 id="13、说一下Runnable接口和Callable接口有什么相同点和不同点？"><a href="#13、说一下Runnable接口和Callable接口有什么相同点和不同点？" class="headerlink" title="13、说一下Runnable接口和Callable接口有什么相同点和不同点？"></a>13、说一下Runnable接口和Callable接口有什么相同点和不同点？</h2><pre class=" language-markdown"><code class="language-markdown">要点：1，相同点：两者都是接口，都需要调用Thread.start()2，不同：实现callable接口的任务线程能返回执行结果，而实现Runnable接口的任务线程不能返回结果3，callable接口的call（）方法允许抛出异常，而runnable（）接口的run()方法的异常只能在内部消化，不能继续上抛；</code></pre><h2 id="14、在-Java-程序中怎么保证多线程的运行安全？"><a href="#14、在-Java-程序中怎么保证多线程的运行安全？" class="headerlink" title="14、在 Java 程序中怎么保证多线程的运行安全？"></a>14、在 Java 程序中怎么保证多线程的运行安全？</h2><pre class=" language-markdown"><code class="language-markdown">要点：1、使用synchronied关键字，可以用于代码块，方法（静态方法，同步锁是当前字节码对象；实例方法，同步锁是实例对象）2、使用volatile 关键字，防止指令重排，被volatile修饰的变量的值，将不会被本地线程缓存，所有对该变量的读写都是直接操作共享内存，从而确保多个线程能正确的处理该变量3、lock锁机制4、使用线程安全的类，比如Vector、HashTable、StringBuffer</code></pre><h2 id="15、Synchronized-和-Lock-有什么区别？"><a href="#15、Synchronized-和-Lock-有什么区别？" class="headerlink" title="15、Synchronized 和 Lock 有什么区别？"></a>15、Synchronized 和 Lock 有什么区别？</h2><pre class=" language-markdown"><code class="language-markdown">要点：1，首先synchronized是java内置关键字；2，在jvm层面，Lock是个java类；3，synchronized无法判断是否获取锁的状态，Lock可以判断是否获取到锁；4，synchronized会自动释放锁(a 线程执行完同步代码会释放锁 ；b 线程执行过程中发生异常会释放锁)，Lock需在finally中手工释放锁（unlock()方法释放锁），否则容易造成线程死锁；5，用synchronized关键字的两个线程1和线程2，如果当前线程1获得锁，线程2线程等待。如果线程1阻塞，线程2则会一直等待下去，而Lock锁就不一定会等待下去，如果尝试获取不到锁，线程可以不用一直等待就结束了；6，synchronized的锁可重入、不可中断、非公平，而Lock锁可重入、可判断、可公平（两者皆可）；7，Lock锁适合大量同步的代码的同步问题，synchronized锁适合代码少量的同步问题</code></pre><h2 id="16、什么是反射？能提供哪些功能？"><a href="#16、什么是反射？能提供哪些功能？" class="headerlink" title="16、什么是反射？能提供哪些功能？"></a>16、什么是反射？能提供哪些功能？</h2><pre class=" language-markdown"><code class="language-markdown">要点：1，在java运行环境中，对于任意一个类，能否知道这个类有哪些属性和方法，对于任意一个对象，能否调用任意的方法2，java反射机制主要提供以下功能：<span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span> 在运行时判断任意一个对象所属的类<span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span> 在运行时构造任意一个类的对象<span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span> 在运行时判断任意一个类所具有的成员变量和方法<span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span> 在运行时调用任意一个对象的方法</code></pre><h2 id="17、什么是Java序列化？什么情况下需要序列化？"><a href="#17、什么是Java序列化？什么情况下需要序列化？" class="headerlink" title="17、什么是Java序列化？什么情况下需要序列化？"></a>17、什么是Java序列化？什么情况下需要序列化？</h2><pre class=" language-markdown"><code class="language-markdown">要点：1，java序列化，就是把java对象变为二进制对象，便于存储和在网络上传输2，什么情况下需要：当你想把你内存中的对象状态保存到一个文件中或者数据库中的时候当你想用套接字在网络上传送对象的时候当你想通过RMI传输对象的时候</code></pre><h2 id="18、什么是动态代理？说说你知道的动态代理方式？"><a href="#18、什么是动态代理？说说你知道的动态代理方式？" class="headerlink" title="18、什么是动态代理？说说你知道的动态代理方式？"></a>18、什么是动态代理？说说你知道的动态代理方式？</h2><pre class=" language-markdown"><code class="language-markdown">要点：1，代理类在程序运行时创建的代理对象被称为动态代理，代理类并不是在Java代码中定义的，而是在运行时根据我们在Java代码中的“指示”动态生成的。动态代理可以对被代理对象的方法进行增强，可以在不修改方法源码的情况下，增强被代理对象方法的功能，在方法执行前后做任何你想做的事情。2，动态代理有两类，一是基于接口的JDK动态代理，另外一种是基于类的CGLib代理：JDK动态代理 （使用Proxy类，InvocationHandler接口）代理对象不用实现接口，是利用JDK的API生成的，动态在内存中构建代理对象（需要我们指定）代理类所在包：java.lang.reflect.Proxy 用于构建代理对象，newProxyInstance方法创建代理类实例，实现InvocationHandler接口的invoke方法3，目标对象就是一个对象，没有实现任何接口，就不能使用JDK动态代理。那这时候可以使用CGLib代理。CGLibb代理也叫子类代理，它是在内存中构建一个子类对象，从而实现对目标对象功能的扩展。使用Enhancer类设置目标类作为父类，动态生成子类，MethodInterceptor接口的intercept方法作为代理方法逻辑</code></pre><h2 id="19、Collection-和-Collections-有什么区别？"><a href="#19、Collection-和-Collections-有什么区别？" class="headerlink" title="19、Collection 和 Collections 有什么区别？"></a>19、Collection 和 Collections 有什么区别？</h2><pre class=" language-markdown"><code class="language-markdown">要点：1，java.util.Collection 是一个集合接口（集合类的一个顶级接口）。它提供了对集合对象进行基本操作的通用接口方法。2，Collection接口在Java 类库中有很多具体的实现。3，Collection接口的意义是为各种具体的集合提供了最大化的统一操作方式，其直接继承接口有List与Set。4，Collections则是集合类的一个工具类/帮助类，其中提供了一系列静态方法，用于对集合中元素进行排序、搜索以及线程安全等各种操作。<span class="token code keyword">        例如binarySearch（）sort（）synchronizedList（）</span></code></pre><h2 id="20、死锁的四个必要条件？怎样防止死锁？"><a href="#20、死锁的四个必要条件？怎样防止死锁？" class="headerlink" title="20、死锁的四个必要条件？怎样防止死锁？"></a>20、死锁的四个必要条件？怎样防止死锁？</h2><pre class=" language-markdown"><code class="language-markdown">要点：1,互斥条件：进程对所分配到的资源不允许其他进程进行访问，若其他进程访问该资源，只能等待，直至占有该资源的进程使用完成后释放该资源；2,请求和保持条件：进程获得一定的资源之后，又对其他资源发出请求，但是该资源可能被其他进程占有，此时请求阻塞，但又对自己获得的资源保持不放；3,不可剥夺条件：是指进程已获得的资源，在未完成使用之前，不可被剥夺，只能在使用完后自己释放；4,环路等待条件：是指进程发生死锁后，若干进程之间形成一种头尾相接的循环等待资源关系；这四个条件是死锁的必要条件，只要系统发生死锁，这些条件必然成立，而只要上述条件之一不满足，就不会发生死锁。理解了死锁的原因，尤其是产生死锁的四个必要条件，就可以最大可能地避免、预防和 解除死锁。所以，在系统设计、进程调度等方面注意如何不让这四个必要条件成立，如何确 定资源的合理分配算法，避免进程永久占据系统资源。此外，也要防止进程在处于等待状态的情况下占用资源。因此，对资源的分配要给予合理的规划。</code></pre>]]></content>
      
      
      <categories>
          
          <category> JAVA基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>06Mybatis入门</title>
      <link href="/2020/03/15/MyBatis%E5%85%A5%E9%97%A8/"/>
      <url>/2020/03/15/MyBatis%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Mybatis"><a href="#1-Mybatis" class="headerlink" title="1.Mybatis"></a>1.Mybatis</h1><h2 id="1-什么叫orm"><a href="#1-什么叫orm" class="headerlink" title="1.什么叫orm"></a>1.什么叫orm</h2><p>o:object（对象）</p><p>r:relationship(关系)</p><p>m:mapping（映射）</p><p>对象关系映射，说白了将数据库表中的数据映射成java的实体类对象；</p><p>实体类：封装数据的，不写复杂的逻辑处理，一般类中的方法仅仅包含setter和getter</p><h2 id="2-Mybatis开发配置"><a href="#2-Mybatis开发配置" class="headerlink" title="2.Mybatis开发配置"></a>2.Mybatis开发配置</h2><p>一个核心配置xml文件，多个xml映射文件，log4j配置文件，jdbc配置文件</p><h3 id="1-配置核心配置文件（-mybatis-config-xml）"><a href="#1-配置核心配置文件（-mybatis-config-xml）" class="headerlink" title="1.配置核心配置文件（  mybatis-config.xml）"></a>1.配置核心配置文件（  mybatis-config.xml）</h3><p>​       核心干了2件事：</p><pre class=" language-tex"><code class="language-tex">1.配置数据源2.关联xml映射文件</code></pre><p>​      在src下建立mybatis-config.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE configuration        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-config.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc.properties<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mapUnderscoreToCamelCase<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.domain<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token comment" spellcheck="true">&lt;!--配置数据源--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.driver}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.url}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.username}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.password}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--关联加载xml映射文件--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.dao<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre><p>在src根路径下创建log4j.properties</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">### 设置Logger输出级别和输出目的地 ###</span><span class="token attr-name">log4j.rootLogger</span><span class="token punctuation">=</span><span class="token attr-value">debug, stdout</span><span class="token comment" spellcheck="true">### 把日志信息输出到控制台 ###</span><span class="token attr-name">log4j.appender.stdout</span><span class="token punctuation">=</span><span class="token attr-value">org.apache.log4j.ConsoleAppender</span><span class="token attr-name">log4j.appender.stdout.Target</span><span class="token punctuation">=</span><span class="token attr-value">System.out</span><span class="token attr-name">log4j.appender.stdout.layout</span><span class="token punctuation">=</span><span class="token attr-value">org.apache.log4j.SimpleLayout</span></code></pre><p>在src下建立jdbc.properties</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">jdbc.driver</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.jdbc.Driver</span><span class="token attr-name">jdbc.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost:3306/class111</span><span class="token attr-name">jdbc.username</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">jdbc.password</span><span class="token punctuation">=</span><span class="token attr-value">root</span></code></pre><h3 id="1-定义接口"><a href="#1-定义接口" class="headerlink" title="1. 定义接口"></a>1. 定义接口</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>mapper<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>User<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author by itheima * @Date 2021/8/20 * @Description 定义操纵user表的接口 *  接口与xml映射文件绑定： *   1.接口的全限定名称要与xml映射文件中namespace（全局id）要保证一致 *   2.接口中的方法名称要与xml映射文件的增删改查标签的属性id一致 *      mybatis底层通过解析xml映射文件，就可以通过反射获取接口的信息，然后mybatis体层会为接口生成代理对象， *      每个方法都关联一个SQL *       以findUserById为例： *          代理方法的实现： *              获取去查询的sql:select * from user where id=? *              调用jdbc预编译对象发送sql模板 *              调用接口方法时，传入值，底层预编译对象调用setxxx(参数索引，接口传入的值) *              执行查询 *              获取ResultSet结果 *              ORM映射，将结果集封装到User对象； */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 根据id查询用户信息     * @param id     * @return     */</span>    User <span class="token function">findUserById</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="2-配置xml映射文件，关联接口"><a href="#2-配置xml映射文件，关联接口" class="headerlink" title="2.配置xml映射文件，关联接口"></a>2.配置xml映射文件，关联接口</h3><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE mapper        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token comment" spellcheck="true">&lt;!--    基于动态代理的模式：        namespace：命名空间，说白了就是当前这个配置文件的【唯一】表示            命名空间名称跟接口的全限定名称（包名.类型）一致           xml映射文件在实际开发中非常多，且mybatis已启动，就被加载到内存，如何表示内存中的映射文件的信息呢？               method对象===>获取method对象的全限定名称===》类的全限定名称.方法名称--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.mapper.UserMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--接收参数使用#{},sql预编译处理--></span>    <span class="token comment" spellcheck="true">&lt;!--        此时也不能乱写，跟接口中的方法名称一致    --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findUserById<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from user where id = #{id}      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre><h3 id="3-调用Mybatis-API获取接口的代理对象"><a href="#3-调用Mybatis-API获取接口的代理对象" class="headerlink" title="3.调用Mybatis API获取接口的代理对象"></a>3.调用Mybatis API获取接口的代理对象</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>test<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span>UserMapper<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>User<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Resources<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span>SqlSession<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span>SqlSessionFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span>SqlSessionFactoryBuilder<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStream<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author by itheima * @Date 2021/8/20 * @Description */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MybatisTest2</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 开发中推荐使用基于接口动态代理的方式     * @param args     * @throws IOException     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.将核心配置文件转换成文件流对象</span>        <span class="token comment" spellcheck="true">//说明：Resources是mybatis给我们提供的加载配置文件的工具类：org.apache.ibatis.io.Resources</span>        InputStream in <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"mybatis-config.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.构建会话工厂</span>        SqlSessionFactory sessionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.从会话工厂获取会话对象</span>        <span class="token comment" spellcheck="true">//说明：会话对象就是操纵sql进行增删改查的核心对象 底层对Connection封装</span>        SqlSession session <span class="token operator">=</span> sessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4.获取接口的代理对象</span>        <span class="token comment" spellcheck="true">//说明：传入接口的字节码对象，获取接口的动态代理对象</span>        UserMapper mapper <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//5.调用接口方法，完成功能</span>        User user <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">findUserById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//5.关闭资源，释放连接</span>        session<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>主要使用类</p></blockquote><pre class=" language-java"><code class="language-java">记忆窍门：SqlSessionFactoryBuilder<span class="token operator">:</span>构建会话工厂的工具类，调用buid方法构建会话工厂SqlSessionFactory：会话工厂类，通过openSession方法获取会话SqlSession：会话对象，通过该对象完成crud操作；</code></pre><h2 id="3、核心配置文件"><a href="#3、核心配置文件" class="headerlink" title="3、核心配置文件"></a>3、核心配置文件</h2><p><img src="https://i.loli.net/2021/09/06/G3YLwcyxUXpoBjJ.png" alt="image-20210906194434148"></p><h3 id="1-properties标签"><a href="#1-properties标签" class="headerlink" title="1.properties标签"></a>1.properties标签</h3><p>作用：定义全局的变量</p><p>​            变量定义完毕，全局共享（各个xml都可以使用）</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org/mybatis/example/config.properties<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dev_user<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>F2Fa3!33TYyg<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span></code></pre><p><img src="https://i.loli.net/2021/09/02/SLJUQ2fb7WKxXIk.png" alt="image-20210820114435795"></p><p><img src="https://i.loli.net/2021/09/02/z12yREL5MwhrKpN.png" alt="image-20210820114602382"></p><p>1.通过properties子标签定义全局变量</p><p><img src="https://i.loli.net/2021/09/02/IkB8SMjhe4EHJDp.png" alt="image-20210820114850293"></p><p>2.通过加载外部的properties文件定义全局共享变量</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">jdbc.user</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">jdbc.password</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">jdbc.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://192.168.188.130:3306/day06_1</span><span class="token attr-name">jdbc.driver</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.jdbc.Driver</span></code></pre><p><img src="https://i.loli.net/2021/09/02/mY1GxUQ4MIPhbDL.png" alt="image-20210820115532537"></p><h3 id="2、settings设置（懒加载，驼峰映射等）"><a href="#2、settings设置（懒加载，驼峰映射等）" class="headerlink" title="2、settings设置（懒加载，驼峰映射等）"></a>2、settings设置（懒加载，驼峰映射等）</h3><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cacheEnabled<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lazyLoadingEnabled<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>multipleResultSetsEnabled<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>useColumnLabel<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>useGeneratedKeys<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>autoMappingBehavior<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>PARTIAL<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>autoMappingUnknownColumnBehavior<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>WARNING<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>defaultExecutorType<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>SIMPLE<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>defaultStatementTimeout<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>25<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>defaultFetchSize<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>safeRowBoundsEnabled<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mapUnderscoreToCamelCase<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>localCacheScope<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>SESSION<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbcTypeForNull<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>OTHER<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lazyLoadTriggerMethods<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>equals,clone,hashCode,toString<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span></code></pre><h3 id="3-别名设置（typeAlias）"><a href="#3-别名设置（typeAlias）" class="headerlink" title="3.别名设置（typeAlias）"></a>3.别名设置（typeAlias）</h3><p>​    解决代码冗余问题；</p><h4 id="【1】方式2"><a href="#【1】方式2" class="headerlink" title="【1】方式2"></a>【1】方式2</h4><p>​        核心配置文件中：</p><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--        typeAliases:给类的全限定名称取短的名称（别名）    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--方式1：            type:指定需要被取别名的类全限定名称            alias:指定别名            弊端：有多个实体类，就需要配置多少次，维护性差            好处：别名随便定义        --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAlias</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.pojo.User<span class="token punctuation">"</span></span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myUser<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span></code></pre><p>在xml映射文件中：</p><pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findUserById<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myUser<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from user where id = #{id} <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><h4 id="【2】方式2：开发推荐"><a href="#【2】方式2：开发推荐" class="headerlink" title="【2】方式2：开发推荐"></a>【2】方式2：开发推荐</h4><p>​      核心配置文件：</p><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--方式2：基于扫描包，给指定包下的所有的实体类取别名【开发推荐】        特点：别名就是类型或者类名首字母小写        优点：可以批量给实体类取别名，维护性比较好        弊端：别名不能随便定义    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.pojo<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span></code></pre><p>​        xml映射文件中：</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--        别名就是扫包提供的别名    --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findUserById<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from user where id = #{id}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><h4 id="【3】内置别名"><a href="#【3】内置别名" class="headerlink" title="【3】内置别名"></a>【3】内置别名</h4><pre class=" language-tex"><code class="language-tex">mybatis内置别名规律：基本类型别名：_类型名称包装类：类名首字母小写作为别名</code></pre><h3 id="4-配置数据源"><a href="#4-配置数据源" class="headerlink" title="4.配置数据源"></a>4.配置数据源</h3><p>在核心配置文件中：</p><p>方式1；切换数据源（通过environments下的属性default指定数据源）</p><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--       environments:可以进行多数据源配置，            属性： default 指定默认使用的数据源环境    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--            environment：具体配置数据源环境标签                    属性：id===>指定当前配置的数据源的唯一表示        --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dev<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--               transactionManager：事务管理器，                   type="jdbc":表示事务交给jdbc去管理            --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token comment" spellcheck="true">&lt;!--                datasource:配置数据源                    type="pooled":使用mybatis内置的连接池                --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token comment" spellcheck="true">&lt;!--四个参数：指定连接数据库的四大核心参数--></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.driver}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.url}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.user}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.password}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--设置数据库测试环境--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.driver}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc:mysql://192.168.188.130:3306/day06_2<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.user}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.password}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span></code></pre><p>方式2：通过代码指定</p><p>通过代码指定数据源，优先级更高</p><p><img src="https://i.loli.net/2021/09/02/n7vEIZGsfQoykux.png" alt="image-20210820153626303"></p><h3 id="5-mappers映射器"><a href="#5-mappers映射器" class="headerlink" title="5.mappers映射器"></a>5.mappers映射器</h3><p>方式1：理解</p><pre class=" language-xml"><code class="language-xml">        <span class="token comment" spellcheck="true">&lt;!--            方式1：通过mapper子标签下的resource属性加载类路径下的xml映射文件（src内）                  好处：xml映射文件存储的路径和名称随便定义                  弊端：有多少个xml映射文件，就要配置多少次，维护性差        --></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UserMapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><p>方式2：了解</p><pre class=" language-xml"><code class="language-xml"> <span class="token comment" spellcheck="true">&lt;!--方式2：通过绝对路径加载，此时文件可以不放在类路径下[了解]                弊端：使用绝对路径加载。路径不够灵活，需要面临频繁的改动，维护性差        --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file:///D:\mycode\t3_mysql\day06_1_code\src\UserMapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><p>方式3：了解</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--方式3：通过接口的间接加载xml映射文件 【了解】--></span>        <span class="token comment" spellcheck="true">&lt;!--           org.apache.ibatis.binding.BindingException: Invalid bound statement (not found):            可能的情况：                1.接口找不到需要绑定的xml映射文件                2.接口中的方法找不到对应sql                3.接口中的入参与sql中的入参不一致；        --></span>        <span class="token comment" spellcheck="true">&lt;!--            前提要求：               xml映射文件存储的路径和名称不能随便定义                1.xml的存储路径与接口的路径要一致                2.xml的文件名称要与接口的名称要一致            弊端：1. 前提约定比较繁杂：必须同名同路径                 2. 有多少个接口，就需要配置多少次，维护性差        --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.mapper.UserMapper<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><p>方式4：开发主流</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--         方式4：基于扫描mapper接口的包，批量加载 【企业开发主流】         前提要求：                xml映射文件存储的路径和名称不能随便定义                1.xml的存储路径与接口的路径要一致                2.xml的文件名称要与接口的名称要一致        --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.mapper<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><h2 id="4-工具类封装"><a href="#4-工具类封装" class="headerlink" title="4.工具类封装"></a>4.工具类封装</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>utils<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Resources<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span>SqlSession<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span>SqlSessionFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span>SqlSessionFactoryBuilder<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStream<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author by itheima * @Date 2021/8/20 * @Description 定义mybatis的工具类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MybatisUtil</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//定义全局的会话工厂属性</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> SqlSessionFactory factory<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 通过静态代码块，使得核心配置文件只加载一次，     * 避免了io开销     */</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.获取核心配置文件的流对象</span>        InputStream in <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            in <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"mybatis-config.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 封装获取会话对象的方法     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> SqlSession <span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> factory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取代理对象的方法     * @param mapperClass     * @param &lt;T>     * @return ThreadLocal     */</span><span class="token comment" spellcheck="true">//    public static &lt;T> T getMapper(Class&lt;T> mapperClass){</span><span class="token comment" spellcheck="true">//       return getSession().getMapper(mapperClass);</span><span class="token comment" spellcheck="true">//    }</span><span class="token punctuation">}</span></code></pre><h2 id="5、xml映射文件标签"><a href="#5、xml映射文件标签" class="headerlink" title="5、xml映射文件标签"></a>5、xml映射文件标签</h2><h3 id="1-select标签"><a href="#1-select标签" class="headerlink" title="1.select标签"></a>1.select标签</h3><p>使用流程：</p><p>定义接口方法：</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * 根据用户id查询生日     * @param id     * @return     */</span>    Date <span class="token function">findBirthdayById</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 获取所有的用户信息     * @return     */</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>接口方法绑定xml映射文件：</p><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--       parameterType:表示入参的类型，【一般缺省不写 】       resultType：查询结果的类型，必须要写            注意事项：在mybatis内置别名中date是java.until.Date类的别名       在sql中如果入参是基本类型，且是单个，那么可以使用任意参数取接收    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findBirthdayById<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.sql.Date<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select birthday from user where id=#{id}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--        如果接口获取的是list类型，那么resutlType指定的应该是集合的泛型；        怎么思考这个事？            因为java的泛型是伪泛型，代码一旦编译，泛型擦除，那么mybatis就不知道集合的类型了，所以            通过resutlType提示mybatis底层进行orm映射的时候，使用集合对应的泛型类型进行映射    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findAll<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from user    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><h3 id="2-insert"><a href="#2-insert" class="headerlink" title="2.insert"></a>2.insert</h3><p>定义接口方法：</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * 插入用户信息     * @param user     * @return 获取受影响的行数     */</span>    Integer <span class="token function">insertUser</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>xml映射文件绑定方法：</p><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--        insert标签：表示插入操作的标签            属性id:必须填写，返回值受影响的行数，在接口中直接声明即可        sql中获取来自pojo对象属性的参数注意事项：            #{name与实体类中属性名称一致}    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>insertUser<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        insert into user values(null,#{username},#{birthday},#{sex},#{address})    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span></code></pre><p>在mybatis中进行增删改时，事务默认手动提交；</p><p>​    如何设置自动提交呢？</p><pre class=" language-java"><code class="language-java">SqlSessioin session<span class="token operator">=</span>factory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>如何手动提交事务</p><pre class=" language-java"><code class="language-java">session<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>session<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="3-update标签"><a href="#3-update标签" class="headerlink" title="3.update标签"></a>3.update标签</h3><p>1.定义接口方法</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * 更新用户信息     * @param user     * @return 返回受影响行数     */</span>    Integer <span class="token function">updateUser</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>2.xml映射文件绑定方法：</p><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>updateUser<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        update user set user_name=#{username},birthday=#{birthday},sex=#{sex},address=#{address}        where id=#{id}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span></code></pre><h3 id="4-delete标签"><a href="#4-delete标签" class="headerlink" title="4.delete标签"></a>4.delete标签</h3><p>1.定义接口方法：</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * 根据用户id删除用户信息     * @param id     */</span>    <span class="token keyword">void</span> <span class="token function">deleteById</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>2.绑定xml：</p><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deleteById<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        delete from user where id=#{id}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">></span></span></code></pre><h2 id="回顾："><a href="#回顾：" class="headerlink" title="回顾："></a>回顾：</h2><h3 id="1-基于动态代理的开发流程？"><a href="#1-基于动态代理的开发流程？" class="headerlink" title="1.基于动态代理的开发流程？"></a>1.基于动态代理的开发流程？</h3><pre class=" language-tex"><code class="language-tex">1.创建工程，导入jar包：mybatis.jar mysql.jar2.定义实体类对象（细节：实体类中属性名称与表的列名成一致）3.定义核心配置文件    3.1 配置数据源    3.2 关联xml映射文件4.定义接口5.接口绑定xml映射文件    开发主流的方式：扫淼接口所在的包路径    5.1 xml与接口名称一致    5.2 xml与接口的存储路径要一致6.加载核心配置文件，完成crud操作    6.1 加载核心配置文件，转换成文件流对象       InputStream in=  Resources.getResourceAsStream(核心配置文件的路径);      SqlSesssionFactory fac= new SqlSesssionFactoryBuilder().build(in);      SqlSession se= fac.openSession(true/false);      代理对象：  se.getMapper(接口.classs);      se.close;</code></pre><h3 id="2-核心配置文件标签"><a href="#2-核心配置文件标签" class="headerlink" title="2.核心配置文件标签"></a>2.核心配置文件标签</h3><p>使用注意事项：标签的顺序不能随便写，严格按照官网指定的顺序开发，否则，xml报错；</p><pre class=" language-tex"><code class="language-tex">1.properties标签：作用：定义全局的共享变量；    配置变量的2种方式：        1.通过子标签定义变量[了解]             eg: <properties> <property name="key" value="值"/> </properties>        2.通过properties属性resource加载外部的properties文件❤❤❤❤            eg:<propeties resource="xxxx.properties"/>    如何获取共享的变量？        ${key},key可以是配置文件中定义的key，也可以是子标签<property>指定的key2.settings标签：作用：改变mybatis的运行时的行为（是否开启缓存，是否懒加载，是否开启驼峰映射）    配置方式：        <settings>            <setting name="mapUnderscoreToCamelCase" value="true/false"/>        </settings>    什么叫做驼峰映射？        表：aa_bb_cc===>类：aaBbCc(不使用as关键字，就可以完成映射)3.typeAliases标签：作用：给繁杂的全限定名称取别名，减少冗余代码      2种配置方式：      方式1：          <typeAliases><typeAlias type="类的全限定名称" alias="别名"/></typeAliases>      方式2：基于扫包批量取别名 ❤❤❤❤      <typeAliases>          <package name="pojo类所在的包名路径"/>      </typeAliases>      规则：在指定包下的所有的类的别名是类名或者类名首字母小写4.envoronments标签：多环境配置标签    要求：使用该标签会修改数据源就可以了    <environments default="dev">      <environment id="dev">        <transactionManager type="JDBC">          <property name="..." value="..."/>        </transactionManager>        <dataSource type="POOLED">         <!--要会修改--> ❤❤❤❤          <property name="driver" value="${driver}"/>          <property name="url" value="${url}"/>          <property name="username" value="${username}"/>          <property name="password" value="${password}"/>        </dataSource>      </environment>    </environments>5.mappers标签：配置xml映射文件的加载方式    有两类：        1.直接加载xml映射文件            <mappers>                <mapper resource="xml映射文件的路径"/>            </mappers>            好处：文件名称和路径随便定义            弊端：有多少个xml映射文件，就配置多少次，维护性差；        2.先加载接口，然后间接加载xml映射文件 ❤❤❤❤            前提要求：                接口与xml映射文件必须同名且同路径            <mappers>                <package="接口的包路径"/>            </mappers></code></pre><h3 id="3-xml映射文件"><a href="#3-xml映射文件" class="headerlink" title="3.xml映射文件"></a>3.xml映射文件</h3><pre class=" language-tex"><code class="language-tex">1.select    属性：        id:必须填写，且唯一  paramperType:指定入参的类型，一般不写  resultType/resultMap：必须填写，指定返回值的类型    注意事项：如果返回值是list集合，那么resultType指定的类型是list中的泛型；2.insert标签    作用：插入 属性：id 必须填写  可以获取操作影响的行数，直接在接口中返回值声明即可；    注意事项：插入操作传入的是pojo对象，那么在sql中如何获取pojo对象中的属性值？        #{名称为实体对象中属性名称}   ❤❤❤❤3.update标签：    作用：更新，使用方式同上insert标签；4.delete标签：    作用：删除    </code></pre>]]></content>
      
      
      <categories>
          
          <category> Mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html基础标签</title>
      <link href="/2020/03/15/html%E5%9F%BA%E7%A1%80/"/>
      <url>/2020/03/15/html%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="1、html（超文本标记语言）基础"><a href="#1、html（超文本标记语言）基础" class="headerlink" title="1、html（超文本标记语言）基础"></a>1、html（超文本标记语言）基础</h1><h2 id="1、html的基本结构"><a href="#1、html的基本结构" class="headerlink" title="1、html的基本结构"></a>1、html的基本结构</h2><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!doctype html></span><span class="token comment" spellcheck="true">&lt;!--指定当前的文件为html文件格式--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--html根标签，所有的内容都写在这个标签下--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--标签内的内容不用于显示，作用：用于定义当前页面的一些元数据信息和引入第三方的css js 等文件--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--定义当前文件的编码格式--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xxx.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--明天会学：引入外部的css资源--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xx.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--明天会学：引入外外部的js资源--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>我的网页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!-- 标题--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--body中的内容用于浏览器显示的--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>标签1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>标签1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>标签1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h2 id="2、标签的分类"><a href="#2、标签的分类" class="headerlink" title="2、标签的分类"></a>2、标签的分类</h2><h3 id="1、根据标签的书写方式"><a href="#1、根据标签的书写方式" class="headerlink" title="1、根据标签的书写方式:"></a>1、根据标签的<font color="cornflowerblue">书写方式</font>:</h3><pre class=" language-html"><code class="language-html">1.单标签: eg:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">/></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>2.双标签: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></code></pre><h3 id="2、根据展示效果"><a href="#2、根据展示效果" class="headerlink" title="2、根据展示效果:"></a>2、根据<font color="cornflowerblue">展示效果</font>:</h3><pre class=" language-html"><code class="language-html">1.行内标签    使用时不自动换行    eg:   早已习惯不曾习惯的习惯~          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token punctuation">></span></span>百度1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token punctuation">></span></span>百度2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>2.行级标签:    标签独占一行,使用时自动换行        eg:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>你好<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>你好<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span> </code></pre><h2 id="3、标签和属性"><a href="#3、标签和属性" class="headerlink" title="3、标签和属性"></a>3、标签和属性</h2><h3 id="3-1-字体相关标签"><a href="#3-1-字体相关标签" class="headerlink" title="3.1 字体相关标签"></a><font color="red">3.1 字体相关标签</font></h3><table><thead><tr><th>标签名</th><th>常用属性</th><th>使用方法</th><th>说明</th></tr></thead><tbody><tr><td>h</td><td>align：水平对齐方式</td><td><code>公司简介</code></td><td>水平居中的一级标题。标题标签取值：h1~h6</td></tr><tr><td>hr</td><td>size：粗细 color：颜色 noshade:取消阴影</td><td>``</td><td>在页面上创建一条size=”2”橘黄色的水平线</td></tr><tr><td>font</td><td>color：颜色，size：大小，face：字体</td><td><code>传智播客</code></td><td>修饰文字的颜色，字号和字体</td></tr><tr><td>b</td><td>无</td><td><code>传智播客</code></td><td>将文字加粗</td></tr><tr><td>i</td><td>无</td><td><code>黑马程序员</code></td><td>文字倾斜</td></tr><tr><td>p</td><td>无</td><td><code>传智播客，黑马程序员</code></td><td>将文字划分段落</td></tr><tr><td>br</td><td>无</td><td><code>传智播客 黑马程序员</code></td><td>手动换行</td></tr></tbody></table><h4 id="3-1-1-常见标签-h-标题"><a href="#3-1-1-常见标签-h-标题" class="headerlink" title="3.1.1 常见标签  h 标题"></a>3.1.1 常见标签  h 标题</h4><pre class=" language-html"><code class="language-html">   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!--</span>      <span class="token attr-name"><span class="token namespace">标题标签:</span></span>         <span class="token attr-name"><span class="token namespace">标签格式:</span>&lt;hx</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>hx</span><span class="token punctuation">></span></span>            x:代表从1到6 字体大小依次递减         特征:           1.行级标签;           2.从1到6依次递减;           3.行与行之间有留白;       属性:         align:对齐设置            center:居中对齐            right:居右对齐            left:居左对齐(默认)    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>我是标题1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是标题2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>我是标题3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是标题4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h5</span><span class="token punctuation">></span></span>我是标题5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h5</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h6</span><span class="token punctuation">></span></span>我是标题6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h6</span><span class="token punctuation">></span></span></code></pre><h4 id="3-1-2-常见标签-hr-水平线"><a href="#3-1-2-常见标签-hr-水平线" class="headerlink" title="3.1.2 常见标签  hr  水平线"></a>3.1.2 常见标签  hr  水平线</h4><pre class=" language-html"><code class="language-html">核心属性为size,width,align,color等,其中数值和颜色各种2中定义方式    <span class="token comment" spellcheck="true">&lt;!--         标签格式:             &lt;hr/>           特征:              1.单标签;              2.行级标签;          属性:            size:水平线的厚度;            width:宽度            align:对齐                center:居中对齐(默认)                right:居右对齐                left:居左对齐                     --------宽度取值方式---------            有2种:              1.像素取值;              2.百分比取值         -------颜色设置2中方式-------              1.英文取值;red green等              2.rgb取值                  格式:#00ff99   xxxxxx代表16进制书写方式                    解释:00:表示红色的占比,值越大,占比越高                        ff:表示绿色                        99:表示蓝色的占比    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10px<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>50%<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10px<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>50%<span class="token punctuation">"</span></span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10px<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>50%<span class="token punctuation">"</span></span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#ff0000<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10px<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>50%<span class="token punctuation">"</span></span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#00ff00<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10px<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>50%<span class="token punctuation">"</span></span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#0000ff<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10px<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>50%<span class="token punctuation">"</span></span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#3F434C<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><h4 id="3-1-3-字体标签-font"><a href="#3-1-3-字体标签-font" class="headerlink" title="3.1.3 字体标签:font"></a>3.1.3 字体标签:font</h4><p>字体核心属性color,size,face等</p><pre class=" language-html"><code class="language-html">    <span class="token comment" spellcheck="true">&lt;!--         字体标签:            &lt;font>&lt;/font> :双标签          作用:对文字样式进行修饰          属性:            color:颜色            size:字体大小 从1到7 依次递增,大于7之后默认是7            face:书写格式,楷体,宋体等   --></span>  早已<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>blue<span class="token punctuation">"</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span> <span class="token attr-name">face</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>微软雅黑<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>习惯<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span>不曾习惯的习惯 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span></code></pre><h4 id="3-1-4-字体加粗-倾斜"><a href="#3-1-4-字体加粗-倾斜" class="headerlink" title="3.1.4 字体加粗/倾斜"></a>3.1.4 字体加粗/倾斜</h4><p>说明:加粗常用&lt;b&gt;和&lt;strong&gt;标签,斜体字体使用&lt;i&gt;标签;</p><pre class=" language-html"><code class="language-html">   早已<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span>习惯不<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span>曾习惯的习惯~<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!--不建议这么写,代码可读性非常差--></span>   早已<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span>习惯不<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span>曾习惯的习惯~<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>   早已<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span>习惯不<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span>曾习惯的习惯~<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>   早已<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span><span class="token punctuation">></span></span>习惯不<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>曾习惯的习惯~<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span></code></pre><h4 id="3-1-5-段落标签-lt-P-gt-和换行-lt-br-gt"><a href="#3-1-5-段落标签-lt-P-gt-和换行-lt-br-gt" class="headerlink" title="3.1.5 段落标签<P>和换行<br/>"></a>3.1.5 段落标签&lt;P&gt;和换行&lt;br/&gt;</h4><p>说明:p标签常用属性为align;</p><pre class=" language-html"><code class="language-html">     <span class="token comment" spellcheck="true">&lt;!--        段落标签:           &lt;p>&lt;/p>           特征:              1.行级标签,自动换行;              2.双标签;           属性:             style: 设置css样式             align:对齐方式                center:居中对齐                right:居右对齐                left:居左对齐(默认)     --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">text-indent</span><span class="token punctuation">:</span> <span class="token number">2</span>em<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>中关村黑马程序员训练营不仅着重培养学员的基础理论知识，更注重培养项目实施管理能力，并密切关注技术革新，不断引入先进的技术，</code></pre><h4 id="3-1-7-特殊字符"><a href="#3-1-7-特殊字符" class="headerlink" title="3.1.7 特殊字符"></a>3.1.7 特殊字符</h4><p><img src="https://gitee.com/ergou15154/drawing-bed/raw/master/source/image-20210826211038733.png" alt="image-20210826211038733"></p><pre class=" language-html"><code class="language-html">  <span class="token comment" spellcheck="true">&lt;!--窗前    明月     光,疑似       地上    霜     --></span>  <span class="token comment" spellcheck="true">&lt;!--说明:html对多空格的文字都转换成一个--></span>   窗前<span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span>明月 <span class="token entity" title="&nbsp;">&amp;nbsp;</span>    光,疑似 <span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span>      地上<span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span> 霜;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>  <span class="token entity" title="&spades;">&amp;spades;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></code></pre><h3 id="3-2-图片标签-img"><a href="#3-2-图片标签-img" class="headerlink" title="3.2 图片标签  img"></a>3.2 图片标签  img</h3><p>说明:图片标签核心属性:src,alt,title,width,heigh等;</p><pre class=" language-html"><code class="language-html">    <span class="token comment" spellcheck="true">&lt;!--      图片标签格式:         &lt;img/>        特征:           1.单标签;           2.行内标签;        属性:           src:引入外部图片资源;           alt:外部资源加载不到的提示信息;           title:当鼠标悬停到图片上时的提示信息;           width:宽           height:高      --------src引入外部图片资源的方式----------           1.使用相对路径:                 ./    同级目录                 ../  上级目录           2.绝对路径:                  url=file:///E://xx/xx.jpg    --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./imgs/1.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>图片飞走了~~<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>美女<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>300px<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>300px<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../2.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>图片飞走了~~<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>美女<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>300px<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>300px<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file:///E:\myAllTmp\html-demo-studay\3-图片\imgs\3.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>图片飞走了~~<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>美女<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>300px<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>300px<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><h3 id="3-3列表（有序ol，无序ul）"><a href="#3-3列表（有序ol，无序ul）" class="headerlink" title="3.3列表（有序ol，无序ul）"></a>3.3列表（有序ol，无序ul）</h3><p>说明:有序ol核心属性:type(1 a A i I) start等;</p><p>​         无需ul核心属性:type(circle,disc,square)等;</p><pre class=" language-html"><code class="language-html">    <span class="token comment" spellcheck="true">&lt;!--      有序和无序都是行级标签        有序:&lt;ol>&lt;/ol>  :order  list           属性:             type: 排序的方式                1 默认 阿拉伯数字                a  小写英文字母                A  大写英文字母                i  小写罗马数字                I   大写罗马数字              start: 从排序数字的第几个开始展示        无序:&lt;ul>&lt;/ul>   :un order list           属性:             type: circle(空心圆),disc(实心圆 默认的),square(方格)          共同的字标签:              &lt;li>&lt;/li>    --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>A<span class="token punctuation">"</span></span> <span class="token attr-name">start</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>111<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>112<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>113<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>114<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>115<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span></code></pre><h3 id="3-4超链接"><a href="#3-4超链接" class="headerlink" title="3.4超链接"></a>3.4超链接</h3><p>1.&lt;a&gt;标签核心属性:href,target等,作用:</p><p>​    <strong>1.超链接：链接到外部的网络资源;</strong></p><p>​    <strong>2.空链接：阻止超链接;3.锚点定位：</strong></p><pre class=" language-html"><code class="language-html">    <span class="token comment" spellcheck="true">&lt;!--      超链接:         &lt;a>&lt;/a>         作用:1.资源跳转 2.完成类似页面刷新的效果 空连接 3.锚点         特征:            1.行内标签,不换行;       属性:         href:引入外部访问的资源url         target:页面跳转时对当前页面的行为            _self:覆盖旧的页面,打开新的页面 (默认)            _blank:重新打开一个页面窗口    --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.baidu.com<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_self<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>百度一下,你就知道了<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.baidu.com<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>百度一下2,你就知道了<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--完成类似刷新的操作--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_self<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>百度一下3,你就知道了<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javaScript:void(0)<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_self<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>百度一下3,你就知道了<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--锚点定位 href属性值为“ #加ID ”--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#a<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_self<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>图片A<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#b<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_self<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>图片B<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../3-图片/imgs/2.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../3-图片/imgs/4.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>b<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><h2 id="4、颜色与大小"><a href="#4、颜色与大小" class="headerlink" title="4、颜色与大小"></a>4、颜色与大小</h2><pre class=" language-html"><code class="language-html">颜色取值:    英文单词取值法    RGB取值法: red green blue        格式: 以#开头,后面跟6个十六进制的数字            eg: #0011ff        #01f            注意: 如果三种颜色上的值一致,可以简写 #01f        前2位: 代表红色所占的比重        中2位: 代表绿色所占的比重        后2位: 代表蓝颜色所占比重大小取值:    像素: px (px单位可以省去不写)    百分百: 宽度可以使用百分百,高度不建议使用百分百        100% 50%    厘米 : cm(在html中不好使,在css中可以使用)</code></pre><h2 id="5、表格"><a href="#5、表格" class="headerlink" title="5、表格"></a>5、<font color="red">表格</font></h2><pre class=" language-html"><code class="language-html">     <span class="token comment" spellcheck="true">&lt;!--        表格根标签:            &lt;table>&lt;/table>           属性:             border:添加边框             width:宽             align:                 center                 right                 left 默认             bgcolor: 背景颜色             cellpadding:内填充,表示单元格中内容距离单元格框的距离             cellspacing:外填充,表示单元格之间的距离       ------------------------------------------------              行标签: tr                属性:                   bgcolor: 设置背景颜色                   align:单元格文字对齐            -----------------------------------                  小格子标签:                     td或者th 唯一区别:th可实现文字的加粗                   属性:                      bgcolor:                      width:                      align: 对齐方式                         center                         right                         left                      rowspan: 行级合并  在上方写属性,同时合并的下方单元格删除                      colspan: 行级单元格合并,在左边的元素写合并属性,同时删除右边的单元格               属性的设置遵循就近原则;     --></span></code></pre><pre class=" language-html"><code class="language-html">     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2px<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>200px<span class="token punctuation">"</span></span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span> <span class="token attr-name">bgcolor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#6495ed<span class="token punctuation">"</span></span>            <span class="token attr-name">cellpadding</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10px<span class="token punctuation">"</span></span> <span class="token attr-name">cellspacing</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10px<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token comment" spellcheck="true">&lt;!--就近原则,td中的背景颜色设置距离tr最近,所以显示tr的颜色属性--></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">bgcolor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span> <span class="token attr-name">bgcolor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#8b008b<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100px<span class="token punctuation">"</span></span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>ID<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>姓名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>年龄<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span> <span class="token attr-name">colspan</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>001/宋小宝<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>             <span class="token comment" spellcheck="true">&lt;!--&lt;td>宋小宝&lt;/td>--></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">rowspan</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>40/38<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>002<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>王宝强<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>             <span class="token comment" spellcheck="true">&lt;!--&lt;td rowspan="2">38&lt;/td>--></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span></code></pre><h2 id="6、表单"><a href="#6、表单" class="headerlink" title="6、表单"></a>6、<font color="red">表单</font></h2><p>作用：收集用户填写的数据信息,将收集到的数据提交给指定的服务器进行保存</p><h3 id="6-1-form属性"><a href="#6-1-form属性" class="headerlink" title="6.1 form属性"></a>6.1 form属性</h3><h4 id="form的常用属性"><a href="#form的常用属性" class="headerlink" title="form的常用属性"></a>form的常用属性</h4><table><thead><tr><th><strong>常用属性</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td><strong>action</strong></td><td>将数据指定给服务器的地址</td></tr><tr><td><strong>method</strong></td><td>提交数据的方式，有两种方式：GET或POST</td></tr></tbody></table><h4 id="get和post的区别"><a href="#get和post的区别" class="headerlink" title="get和post的区别"></a>get和post的区别</h4><table><thead><tr><th><strong>提交方法</strong></th><th><strong>特点</strong></th></tr></thead><tbody><tr><td><strong>GET</strong></td><td>默认是get方法提交，表单提交的所有的数据显示在<font color="red">地址栏</font>上  地址与参数之间使用?分隔，多个参数之间使用<font color="red">&amp;</font>分隔</td></tr><tr><td><strong>POST</strong></td><td>数据提交更加安全，不会显示在地址栏上</td></tr></tbody></table><pre class=" language-html"><code class="language-html">form 标签是表单标签    action 属性设置提交的服务器地址     method 属性设置提交的方式 GET(默认值)或 POST 表单提交的时候，数据没有发送给服务器的三种情况：         1、表单项没有 name 属性值         2、单选、复选（下拉列表中的 option 标签）都需要添加 value 属性，以便发送给服务器         3、表单项不在提交的 form 标签中 GET 请求的特点是：     1、浏览器地址栏中的地址是：action 属性[+?+请求参数]         请求参数的格式是：name=value&amp;name=value    2、不安全     3、它有数据长度的限制 POST 请求的特点是：     1、浏览器地址栏中只有 action 属性值     2、相对于 GET 请求要安全     3、理论上没有数据长度的限制</code></pre><h3 id="6-2-表单控件"><a href="#6-2-表单控件" class="headerlink" title="6.2 表单控件"></a>6.2 表单控件</h3><h4 id="常用表单控件"><a href="#常用表单控件" class="headerlink" title="常用表单控件"></a>常用表单控件</h4><table><thead><tr><th><strong>表单项</strong></th><th><strong>控件代码</strong></th><th>属性</th><th>备注</th></tr></thead><tbody><tr><td><strong>文本框</strong></td><td><input type="text" name="名字"></td><td>type：输入控件的类型  <br>name: 提交参数给服务器时使用的名字<br>  value: 文本框中的默认值  <br>readonly: 内容是只读的，不能修改  <br>disabled: 不可用，灰色显示，数据不能提交给服务器  <br>placeholder: 输入前数据前的提示信息</td><td>如果没有指定type类型，默认是text</td></tr><tr><td><strong>密码框</strong></td><td><input type="password"></td><td>属性同上</td><td>输入的字符不可见</td></tr><tr><td><strong>单选框</strong></td><td><input type="radio" name="gender" value="男" checked="checked"></td><td>checked：默认选中这项  value: 选中这一项的值，如果没有指定，默认值是on</td><td>名字相同的单选框是同一组，一组中只能选中一个。</td></tr><tr><td><strong>复选框</strong></td><td><input type="checkbox" name="hobby" value="游泳"></td><td>checked：默认选中这项  value: 选中这一项的值，如果没有指定，默认值是on</td><td></td></tr><tr><td><strong>下拉列表</strong></td><td><select> 容器  默认是单选        多选</select></td><td>name: 给服务器使用的名字  multiple：多选  size: 多选时显示几项</td><td></td></tr><tr><td>&lt;option&gt; 代表其中一项</td><td>value: 选中这一项的值，如果没指定，值为外面的文本  selected: 默认选中这项</td><td></td><td></td></tr><tr><td><strong>隐藏表单域</strong></td><td><input type="hidden" name="id" value="值"></td><td>name: 给服务器使用的名字  value: 隐藏域的值</td><td>表单上不可见，可以将数据提交给服务器。一般用于一些不需要用户看到的数据。</td></tr><tr><td><strong>文件域</strong></td><td><input type="file" name="photo" accept="image/*"></td><td>accept: 指定选择的文件类型  如：image/*</td><td></td></tr><tr><td><strong>多行文本域</strong></td><td><textarea name="intro" cols="50" rows="5"></textarea></td><td>rows:显示的行数  cols:显示的列数</td><td>注：没有value值，主体部分就是它的值</td></tr><tr><td><strong>提交按钮</strong></td><td>&lt;input type=”submit”  value=”注册”/&gt;  <button>按钮文字</button></td><td>value: 按钮上出现的文字  button也可以指定type类型，默认是提交按钮</td><td>将整个表单提交给服务器</td></tr><tr><td><strong>重置按钮</strong></td><td><input type="reset" value="重置"></td><td></td><td>还原到没有输入数据前的状态</td></tr><tr><td><strong>普通按钮</strong></td><td><input type="button" value="按钮"></td><td></td><td>在表单中没有具体的功能，主要用于后期程序开发</td></tr><tr><td><strong>图片按钮</strong></td><td><input type="image" src="img/regbtn.jpg"></td><td>x,y: 鼠标点击在图片上的坐标</td><td>具有与submit相同的功能</td></tr></tbody></table><h4 id="1、input"><a href="#1、input" class="headerlink" title="1、input"></a>1、input</h4><pre class=" language-html"><code class="language-html">    <span class="token comment" spellcheck="true">&lt;!--      input输入框格式: 行内标签,表单中的输入框只有将name属性赋值,才可以被浏览器收集数据进行提交         &lt;input />        type: 输入框的类型           text:文本输入框           password:密码输入框           radio:单选框               属性:添加默认值 checked表示选中              说明:1.需要通过设置相同的name来进行分组,一个组中只能选中一个;2.需要给input输入框value属性赋值           checkbox:多选框               属性:添加默认值 checked表示选中           hidden:隐藏输入框           file:文件输入框           ---------其他属性-------           readonly:只读属性,用户只能读,不能修改,同时form提交时,可以获取输入框中的数据;           disable:禁用属性,同时表单提交时,不能获取框中数据    --></span></code></pre><h4 id="2、select-opption"><a href="#2、select-opption" class="headerlink" title="2、select-opption"></a>2、select-opption</h4><pre class=" language-html"><code class="language-html">    <span class="token comment" spellcheck="true">&lt;!--       下拉选标签格式:            &lt;select>&lt;/select>          字标签:             &lt;option>&lt;/option>                属性:                  value:设置value值                   selected:默认选中的选项    --></span>     籍贯:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>province<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>江苏<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>山东<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>浙江<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>4<span class="token punctuation">"</span></span> <span class="token attr-name">selected</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selected<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>四川<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>内蒙<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>6<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>河南<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>省</code></pre><h4 id="3-文本域"><a href="#3-文本域" class="headerlink" title="3.文本域"></a>3.文本域</h4><pre class=" language-html"><code class="language-html">    <span class="token comment" spellcheck="true">&lt;!--        textarea 表示多行文本输入框 （起始标签和结束标签中的内容是默认值）            rows 属性设置可以显示几行的高度            cols 属性设置每行可以显示几个字符宽度    --></span>补充地址:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">cols</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span> <span class="token attr-name">rows</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span></code></pre><h4 id="4-按钮"><a href="#4-按钮" class="headerlink" title="4.按钮"></a>4.按钮</h4><p>1.&lt;input&gt;标签根据属性type的不同,分为button,submit,reset,image等;</p><p>2.使用&lt;button&gt;标签定义按钮;</p><pre class=" language-html"><code class="language-html">      <span class="token comment" spellcheck="true">&lt;!--       input按钮类型:          button:普通按钮          reset:重置按钮,重置当前的form表单;          submit:form的提交按钮          image:作用域submit一样,多了一个图片坐标的获取;    --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>普通按钮<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>普通按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>reset<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>重置按钮<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>image<span class="token punctuation">"</span></span>  <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../2.jpg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></code></pre><h4 id="5-HTML5中表单控件新增的type属性"><a href="#5-HTML5中表单控件新增的type属性" class="headerlink" title="5.HTML5中表单控件新增的type属性"></a>5.HTML5中表单控件新增的type属性</h4><table><thead><tr><th>type属性值</th><th><strong>作用</strong></th></tr></thead><tbody><tr><td><strong>date</strong></td><td>出现日历选择控件</td></tr><tr><td>placeholder</td><td>输入提示信息</td></tr><tr><td><strong>email</strong></td><td>邮件，如果输入了值，本身自带验证的功能</td></tr><tr><td><strong>color</strong></td><td>选择一种颜色</td></tr><tr><td><strong>number</strong></td><td>只能输入数字，并且可以向上或向下选择</td></tr></tbody></table><p>代码演示:</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!--date--></span>      日期:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>date<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>date<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>      邮箱:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>      年龄:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>number<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">min</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">max</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>150<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>      颜色:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>color<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>color<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>提交1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>提交2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><h3 id="1-回顾常用标签"><a href="#1-回顾常用标签" class="headerlink" title="1.回顾常用标签"></a>1.回顾常用标签</h3><pre class=" language-html"><code class="language-html">1.字体标签    标题标签：h1~h6 字体大小逐次递减        属性：align:3种对齐方式：left(默认)、center、right    水平线标签：hr        属性：                size:水平线的高度或者厚度            width:宽度            color:颜色            align：对齐方式，默认居中对齐    font字体标签：过时的标签，可以对字体进行处理        属性：            color:字体颜色            size:字体大小，从1到7逐次递增    字体加粗标签：b或者strong标签    字体倾斜：i标签    段落标签：p标签，作用：1.自动换行 2.段落与段落之间留白；    换行标签：br标签2.图片标签    img标签        属性：            src:引入外部图片资源，有2种方式                    方式1：使用相对路径引入图片：./ 或者../                    方式2：使用绝对路径：file:///D：aa.jpg            width/height:指定图片的宽和高            alt:当图片资源加载不到时，友好提醒；            title:当鼠标悬停到图片上时，提示信息3.html列表标签    有2种形式的列表        1.有序列表            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>指定排序的序列号：1，a,A,i,I<span class="token punctuation">"</span></span> <span class="token attr-name">start</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>排序序号的起始位<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>001<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>001<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span>        2.无序列表            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>指定无需列表的排序符号：circle-空心圆，disc-实心圆，square-方格<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>001<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>001<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>4.超链接标签    语法格式：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url地址<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点击一下<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    作用：1.资源跳转 2.使用href="#"完成类似页面刷新的操作 3.锚点定位    属性：        href：            1.具体url：访问具体资源            2.#：完成类似页面刷新的操作            3.href="#某个标签的id"，锚点定位；        target：            _self:资源跳转时覆盖旧的页面（默认）            _blank:资源跳转时，不会覆盖旧的页面，会在浏览器开启一个信息的窗口；5.表格标签    语法格式：        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>编号<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>姓名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>&lt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>001<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>张三<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>    说明：        table标签：            属性：border,bgcolor,width,height,align,cellpadding(表格内容距离表格的边框),cellspacing（表格边框与边框之间举例）            子标签：                tr:表示行标签                    属性：align,bgcolor(就近原则)                    子标签：td(默认居左，则字体不加粗)/th（默认居中，且字体加粗）                        属性：rowspan(行级合并)、colspan(列级合并)</code></pre><h3 id="2-form表单标签"><a href="#2-form表单标签" class="headerlink" title="2.form表单标签"></a>2.form表单标签</h3><p>作用：收集客户端输入的数据，并发送给服务器；</p><p>语法格式：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form表单提交的url地址<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form提交的方式：get/post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    ........    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><h4 id="2-1-input输入类型的标签"><a href="#2-1-input输入类型的标签" class="headerlink" title="2.1 input输入类型的标签"></a>2.1 input输入类型的标签</h4><pre class=" language-html"><code class="language-html">1.文本输入框     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xxxx<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>2.密码输入框    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xxxx<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>3.单选框    单选框中，单选项的name属性对应的值要一致，这样指定所有单选项属于共同的一组；    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ra<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>aa<span class="token punctuation">"</span></span> <span class="token attr-name">checked</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ra<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bb<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>4.多选框    多选框中，多选项的name属性对应的值要一致，这样指定所有选项属于共同的一组；    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>che<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bb<span class="token punctuation">"</span></span> <span class="token attr-name">checked</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>che<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cc<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>5.文件输入框    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>intput</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xxxx<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>6.文本域    作用：输入大文本内容，比如：文章评论、留言等；    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xxx<span class="token punctuation">"</span></span> <span class="token attr-name">rows</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>高<span class="token punctuation">"</span></span> <span class="token attr-name">cols</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>宽度<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span>7.隐藏输入框    特点：1.客户端看不到效果 2.可以form表单提交    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xxx<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><h4 id="2-2-下拉选"><a href="#2-2-下拉选" class="headerlink" title="2.2 下拉选"></a>2.2 下拉选</h4><pre class=" language-html"><code class="language-html">应用场景：1.省市县3级联动语法格式    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xxx<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>001<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">selected</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>02<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>002<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>说明：option标签如果没有设置value属性，则提交的是opion标签包裹的内容，否则，提交的是value对应的值；</code></pre><h4 id="2-3-按钮"><a href="#2-3-按钮" class="headerlink" title="2.3 按钮"></a>2.3 按钮</h4><pre class=" language-html"><code class="language-html">常用三类：    普通按钮：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button的名称<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>button名称<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    form表单重置按钮：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>reset<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>表单重置<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    什么是表单重置？清空表单，回归原来的状态；    form表单提交：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>表单提交<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><h4 id="2-4-h5特性"><a href="#2-4-h5特性" class="headerlink" title="2.4 h5特性"></a>2.4 h5特性</h4><pre class=" language-html"><code class="language-html">1.输入框提醒<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>用户名<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>请输入一个用户名称<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>2.日志<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>date<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>birthday<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>3.数值类型<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>number<span class="token punctuation">"</span></span> <span class="token attr-name">max</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>120<span class="token punctuation">"</span></span> <span class="token attr-name">min</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>4.邮箱<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xxx<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>总之，date,number,color,email等类型的输入框，在进行form表单提交时，如果不符合规范，表单不能提交；</code></pre>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>02分组函数+DCL+约束+多表查询+三大范式</title>
      <link href="/2020/03/15/%E6%95%B0%E6%8D%AE%E5%BA%93-%E5%88%86%E7%BB%84%E5%87%BD%E6%95%B0+DCL+%E7%BA%A6%E6%9D%9F+%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2+%E4%B8%89%E5%A4%A7%E8%8C%83%E5%BC%8F/"/>
      <url>/2020/03/15/%E6%95%B0%E6%8D%AE%E5%BA%93-%E5%88%86%E7%BB%84%E5%87%BD%E6%95%B0+DCL+%E7%BA%A6%E6%9D%9F+%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2+%E4%B8%89%E5%A4%A7%E8%8C%83%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="1、数据库"><a href="#1、数据库" class="headerlink" title="1、数据库"></a>1、数据库</h1><h2 id="1、DCL"><a href="#1、DCL" class="headerlink" title="1、DCL"></a>1、DCL</h2><p><strong>sql运行顺序：</strong></p><pre class=" language-sql"><code class="language-sql">一、sql执行顺序 <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">join</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">on</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">group</span> <span class="token keyword">by</span><span class="token punctuation">(</span>开始使用<span class="token keyword">select</span>中的别名，后面的语句中都可以使用<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> avg<span class="token punctuation">,</span>sum<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token keyword">having</span> <span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token keyword">select</span> <span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span> <span class="token keyword">distinct</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">order</span> <span class="token keyword">by</span> </code></pre><h3 id="1、创建用户"><a href="#1、创建用户" class="headerlink" title="1、创建用户"></a>1、创建用户</h3><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true"># 1.创建u1用户，只能在本机登录，不能远程登录，且密码1234'</span><span class="token keyword">create</span> <span class="token keyword">user</span> <span class="token string">'u1'</span>@'localhost<span class="token string">' identified by '</span><span class="token number">1234</span>'<span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 1.创建u2用户，在任意电脑都可以登录，且密码1234'</span><span class="token comment" spellcheck="true"># 说明：%匹配任意IP地址或者域名</span><span class="token keyword">create</span> <span class="token keyword">user</span> <span class="token string">'u2'</span>@'<span class="token operator">%</span><span class="token string">' identified by '</span><span class="token number">1234</span>'<span class="token punctuation">;</span></code></pre><h3 id="2、用户授权与撤销权限："><a href="#2、用户授权与撤销权限：" class="headerlink" title="2、用户授权与撤销权限："></a>2、用户授权与撤销权限：</h3><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true"># 3.给u1用户分配对heima01的操作权限，但是不包含对表中数据删除操作</span><span class="token comment" spellcheck="true"># 说明：之前学习的sql的语句的首个关键字都是权限</span><span class="token comment" spellcheck="true"># heima01.*：表示指定的权限只能作用在heima01下的所有的表</span><span class="token keyword">grant</span> <span class="token keyword">create</span><span class="token punctuation">,</span><span class="token keyword">alter</span><span class="token punctuation">,</span><span class="token keyword">insert</span><span class="token punctuation">,</span><span class="token keyword">update</span><span class="token punctuation">,</span><span class="token keyword">select</span> <span class="token keyword">on</span> heima01<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">to</span> <span class="token string">'u1'</span><span class="token variable">@'localhost'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 4.撤销u1用户的所有权限</span><span class="token keyword">revoke</span> <span class="token keyword">create</span><span class="token punctuation">,</span><span class="token keyword">alter</span><span class="token punctuation">,</span><span class="token keyword">insert</span><span class="token punctuation">,</span><span class="token keyword">update</span><span class="token punctuation">,</span><span class="token keyword">select</span> <span class="token keyword">on</span> heima01<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">'u1'</span><span class="token variable">@'localhost'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># all:关键字，匹配所有权限</span><span class="token keyword">revoke</span> <span class="token keyword">all</span> <span class="token keyword">on</span> heima01<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">'u1'</span><span class="token variable">@'localhost'</span><span class="token punctuation">;</span></code></pre><h3 id="3、删除用户和密码修改："><a href="#3、删除用户和密码修改：" class="headerlink" title="3、删除用户和密码修改："></a>3、删除用户和密码修改：</h3><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true"># 1.删除u2 (删除普通用户)</span><span class="token keyword">drop</span> <span class="token keyword">user</span> <span class="token string">'u2'</span><span class="token variable">@'%'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 2.修改root超级管理员密码</span><span class="token punctuation">[</span>root<span class="token variable">@localhost</span> <span class="token operator">~</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mysqladmin -uroot -p123456 password root</span><span class="token comment" spellcheck="true"># 3.修改普通用户密码 u1 666</span><span class="token keyword">set</span> password <span class="token keyword">for</span> <span class="token string">'u1'</span>@'localhost<span class="token string">' =password('</span><span class="token number">666</span>'<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="4-数据库备份与还原"><a href="#4-数据库备份与还原" class="headerlink" title="4.数据库备份与还原"></a>4.数据库备份与还原</h3><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true"># 1.将数据库db1备份，保存在day02.sql文件下</span><span class="token comment" spellcheck="true"># 注意：备份时，仅仅备份库中表的信息，数据库的创建语句不备份</span><span class="token punctuation">[</span>root<span class="token variable">@localhost</span> <span class="token operator">~</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mysqldump -uroot -proot db1 > ./day02.sql</span><span class="token comment" spellcheck="true"># 2.还原数据到day01</span><span class="token comment" spellcheck="true"># 注意：还原数据时，数据库需要自己创建</span><span class="token punctuation">[</span>root<span class="token variable">@localhost</span> <span class="token operator">~</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mysql -uroot -proot day01 &lt; ./day02.sql </span></code></pre><h2 id="2、聚合函数"><a href="#2、聚合函数" class="headerlink" title="2、聚合函数"></a>2、聚合函数</h2><pre class=" language-sql"><code class="language-sql">    最大值：<span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    最小值：<span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    平均值：<span class="token function">avg</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    记录数：<span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    亲和：<span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true"># 1.统计学生总数</span><span class="token comment" spellcheck="true"># 说明：聚合函数统计行记录数使用：count(字段名称)</span><span class="token comment" spellcheck="true"># 注意事项：count中统计的字段的值如果为null，那么这一行的统计就丢失了；</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token keyword">from</span> student3<span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 8</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span>english<span class="token punctuation">)</span> <span class="token keyword">from</span> student3<span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 7</span><span class="token comment" spellcheck="true"># 扩展：如何实现，只要某一行有任意值，就加入统计</span><span class="token comment" spellcheck="true"># *匹配任意列，只要列存在，那么就加入统计</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> student3<span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 2.查询年龄大于40的总数</span><span class="token comment" spellcheck="true"># 说明：如果有条件，那么先进行条件的过滤，然后再聚合统计</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> student3 <span class="token keyword">where</span> age <span class="token operator">></span> <span class="token number">40</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 3.统计数学成绩总分</span><span class="token keyword">select</span> <span class="token function">sum</span><span class="token punctuation">(</span>math<span class="token punctuation">)</span> <span class="token keyword">from</span> student3<span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 4.一个sql统计出数学成绩最高分和最低分</span><span class="token keyword">select</span> <span class="token function">max</span><span class="token punctuation">(</span>math<span class="token punctuation">)</span> <span class="token keyword">as</span> 最高成绩<span class="token punctuation">,</span><span class="token function">min</span><span class="token punctuation">(</span>math<span class="token punctuation">)</span> <span class="token keyword">as</span> 最低成绩 <span class="token keyword">from</span> student3<span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 5.统计数学和英语的总成绩</span><span class="token comment" spellcheck="true"># 分析：方式1：先每列的math+english 然后再sum求和</span><span class="token comment" spellcheck="true">#       方式2：sum(math)+sum(english)</span><span class="token keyword">select</span> <span class="token function">sum</span><span class="token punctuation">(</span>math<span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">sum</span><span class="token punctuation">(</span>english<span class="token punctuation">)</span> <span class="token keyword">from</span> student3<span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 1206</span><span class="token comment" spellcheck="true"># 在myslq中任何值与null进行数学运算，那么结果都为null，而聚合函数对null不处理</span><span class="token keyword">select</span> <span class="token function">sum</span><span class="token punctuation">(</span>math<span class="token operator">+</span>english<span class="token punctuation">)</span> <span class="token keyword">from</span> student3<span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 1120 差86</span><span class="token comment" spellcheck="true"># 如何解决？使用ifnull(v1,v2)</span><span class="token keyword">select</span> id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>ifnull<span class="token punctuation">(</span>english<span class="token punctuation">,</span><span class="token string">'没有成绩'</span><span class="token punctuation">)</span> <span class="token keyword">from</span> student3<span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token function">sum</span><span class="token punctuation">(</span>ifnull<span class="token punctuation">(</span>math<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>ifnull<span class="token punctuation">(</span>english<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">from</span> student3<span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 1206</span><span class="token comment" spellcheck="true"># 6.数学成绩平均分数</span><span class="token keyword">select</span> <span class="token function">avg</span><span class="token punctuation">(</span>math<span class="token punctuation">)</span> <span class="token keyword">from</span> student3<span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 79.5000</span><span class="token keyword">select</span> <span class="token function">round</span><span class="token punctuation">(</span><span class="token function">avg</span><span class="token punctuation">(</span>math<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">from</span> student3<span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 80</span><span class="token comment" spellcheck="true"># 四舍五入函数,举例：</span><span class="token comment" spellcheck="true"># 说明：round中参数1：表示要四舍五入的数，参数2：保留的小数位</span><span class="token keyword">select</span> <span class="token function">round</span><span class="token punctuation">(</span><span class="token number">12.6735</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 12.674</span><span class="token comment" spellcheck="true"># 不做四舍五入处理，仅仅数字截取</span><span class="token keyword">select</span> <span class="token keyword">truncate</span><span class="token punctuation">(</span><span class="token number">12.6735</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 12.673</span></code></pre><h2 id="3、分组查询"><a href="#3、分组查询" class="headerlink" title="3、分组查询"></a>3、分组查询</h2><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true"># 查询停车场每种颜色车辆的总价</span><span class="token comment" spellcheck="true"># 分析：1.先根据颜色分组，形成各种颜色的小组  2.在每个小组内使用聚合函数统计各自的车的总金额</span><span class="token comment" spellcheck="true"># 第一步：统计每种颜色</span><span class="token keyword">select</span> color <span class="token keyword">from</span> car <span class="token keyword">group</span> <span class="token keyword">by</span> color<span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token keyword">distinct</span> color <span class="token keyword">from</span> car<span class="token comment" spellcheck="true"># 第二步：统计每种颜色小组下的总金额</span><span class="token keyword">select</span> color<span class="token punctuation">,</span><span class="token function">sum</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token keyword">from</span> car <span class="token keyword">group</span> <span class="token keyword">by</span> color<span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 2.统计每种颜色的车辆中总金额大于30的颜色对应的总金额信息；</span><span class="token comment" spellcheck="true"># 语法错误：You have an error in your SQL syntax;</span><span class="token comment" spellcheck="true"># 结论：where关键字后边不能直接使用聚合函数</span><span class="token keyword">select</span> color<span class="token punctuation">,</span><span class="token function">sum</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token keyword">from</span> car <span class="token keyword">group</span> <span class="token keyword">by</span> color <span class="token keyword">where</span> <span class="token function">sum</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span><span class="token operator">></span><span class="token number">30</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># Invalid use of group function</span><span class="token keyword">select</span> color<span class="token punctuation">,</span><span class="token function">sum</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token keyword">from</span> car <span class="token keyword">where</span> <span class="token function">sum</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span><span class="token operator">></span><span class="token number">30</span> <span class="token keyword">group</span> <span class="token keyword">by</span> color <span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 如何解决？使用having关键字</span><span class="token keyword">select</span> color<span class="token punctuation">,</span><span class="token function">sum</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token keyword">from</span> car <span class="token keyword">group</span> <span class="token keyword">by</span> color <span class="token keyword">having</span> <span class="token function">sum</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span><span class="token operator">></span><span class="token number">30</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 可以查询到</span><span class="token keyword">select</span> id<span class="token punctuation">,</span>color <span class="token keyword">from</span> car <span class="token keyword">where</span> id <span class="token operator">></span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token keyword">select</span> id<span class="token punctuation">,</span>color <span class="token keyword">from</span> car <span class="token keyword">having</span> id <span class="token operator">></span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 可以查询到</span><span class="token keyword">select</span> color <span class="token keyword">from</span> car <span class="token keyword">where</span> id <span class="token operator">></span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 出错：Unknown column 'id' in 'having clause' 推断：having查询基于select后边指点的字段，如果</span><span class="token comment" spellcheck="true"># 字段没有指定，查询报错</span><span class="token keyword">select</span> color <span class="token keyword">from</span> car <span class="token keyword">having</span> id <span class="token operator">></span> <span class="token number">4</span><span class="token punctuation">;</span></code></pre><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true"># having与where区别？</span><span class="token comment" spellcheck="true"># 1.where后边不能使用聚合函数，但是having可以</span><span class="token comment" spellcheck="true"># 2.having一般在group by后边使用，但是where一般用于group by之前，做条件的第一道过滤；</span><span class="token comment" spellcheck="true"># 3.where能用的地方，having都可以用，虽然如何，非必须，使用where关键字；</span><span class="token comment" spellcheck="true"># 4.因为where查询可以走索引，提高查询效率，但是having不走索引；</span></code></pre><h2 id="4、约束"><a href="#4、约束" class="headerlink" title="4、约束"></a>4、约束</h2><table><thead><tr><th>约束</th><th>关键字</th><th>作用</th></tr></thead><tbody><tr><td>主键约束</td><td>primary key  auto_increment</td><td>唯一+非空</td></tr><tr><td>唯一约束</td><td>unique 注意：null</td><td>唯一</td></tr><tr><td>非空约束</td><td>not null</td><td>约束不能为null</td></tr><tr><td>默认值约束</td><td>default 值</td><td>如果客户端给声明值，则使用默认；</td></tr><tr><td>外键约束</td><td>add  constraint 约束名称  foreign key(字段) references 表（字段）<br>on  update cascade ; on delete cascade;</td><td>维护多表之间关系</td></tr></tbody></table><h3 id="1、主键约束"><a href="#1、主键约束" class="headerlink" title="1、主键约束"></a>1、主键约束</h3><p><strong>主键的特点</strong>：</p><ul><li>主键必须包含唯一的值</li><li>主键列不能包含NULL值</li></ul><p><strong>创建主键方式</strong>：</p><ol><li><p><strong>在创建表的时候给字段添加主键</strong></p><pre><code>字段名 字段类型 PRIMARY KEY</code></pre></li><li><p><strong>在已有表中添加主键(了解)</strong></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">ADD</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span>字段名<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ol><p>具体操作：</p><ul><li>创建表学生表st5, 包含字段(id, name, age)将id做为主键</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> st5 <span class="token punctuation">(</span>    id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">-- id是主键</span>    NAME <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    age <span class="token keyword">INT</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>插入重复的主键值</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 主键是唯一的不能重复：Duplicate entry '1' for key 'PRIMARY'</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> st5 <span class="token punctuation">(</span>id<span class="token punctuation">,</span> NAME<span class="token punctuation">,</span>age<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'文征明2'</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>插入NULL的主键值</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 主键是不能为空的：Column 'id' cannot be null</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> st5 <span class="token punctuation">(</span>id<span class="token punctuation">,</span> NAME<span class="token punctuation">,</span>age<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token string">'文征明3'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true"># 扩展：联合主键（联合索引）</span><span class="token comment" spellcheck="true"># 主键只能有一个，但是可以由多个字段组成一个主键-联合主键（id,name）</span><span class="token comment" spellcheck="true"># 联合主键特点与普通主键一致，也就是有多个字段组成一个主键，所以，多个字段组成的值要唯一</span><span class="token comment" spellcheck="true"># 比如：primary key(id,name)===>1-马云，如果你再次保存1-马云，报错：Duplicate,同时各个字段</span><span class="token comment" spellcheck="true"># 不能为null==》null-田七，id不能为null</span></code></pre><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><ol><li><p>说出主键约束的作用？唯一,区分一条记录</p></li><li><p>主键的特点？唯一,不能为NULL</p></li><li><p>添加主键？<br><strong>字段名 字段类型 PRIMARY KEY</strong></p><p>ALTER TABLE 表名 ADD PRIMARY KEY(字段名);</p></li><li><p>主键如果让我们自己添加很有可能重复,我们通常希望在每次插入新记录时,数据库自动生成主键字段的值</p><pre class=" language-sql"><code class="language-sql">字段名 字段类型 <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span></code></pre><p><code>AUTO_INCREMENT</code> 表示自动增长(<strong>字段类型必须是整数类型</strong>)</p></li></ol><h3 id="2、唯一约束"><a href="#2、唯一约束" class="headerlink" title="2、唯一约束"></a>2、唯一约束</h3><h4 id="唯一约束的基本格式"><a href="#唯一约束的基本格式" class="headerlink" title="唯一约束的基本格式"></a>唯一约束的基本格式</h4><pre class=" language-sql"><code class="language-sql">字段名 字段类型 <span class="token keyword">UNIQUE</span></code></pre><p>具体步骤：</p><ul><li>创建学生表st7, 包含字段(id, name),name这一列设置唯一约束,不能出现同名的学生</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> st7 <span class="token punctuation">(</span>    id <span class="token keyword">INT</span><span class="token punctuation">,</span>    NAME <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">UNIQUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>添加一些学生</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> st7 <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'貂蝉'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> st7 <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'西施'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> st7 <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'王昭君'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> st7 <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'杨玉环'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 插入相同的名字出现name重复: Duplicate entry '貂蝉' for key 'name'</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> st7 <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'貂蝉'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 出现多个null的时候会怎样？因为null是没有值，所以不存在重复的问题</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> st3 <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> st3 <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h4><ol><li>说出唯一约束的作用？让这个字段的值不能重复</li><li>添加唯一约束格式？字段名 字段类型 UNIQUE</li><li>添加唯一约束时会自动创建出一个唯一索引</li></ol><h3 id="3、非空约束"><a href="#3、非空约束" class="headerlink" title="3、非空约束"></a>3、非空约束</h3><h4 id="非空约束的作用"><a href="#非空约束的作用" class="headerlink" title="非空约束的作用"></a>非空约束的作用</h4><p>这个字段必须设置值,不能是NULL</p><h4 id="非空约束的基本语法格式"><a href="#非空约束的基本语法格式" class="headerlink" title="非空约束的基本语法格式"></a>非空约束的基本语法格式</h4><pre class=" language-sql"><code class="language-sql">字段名 字段类型 <span class="token operator">NOT</span> <span class="token boolean">NULL</span></code></pre><p>具体操作：</p><ul><li>创建表学生表st8, 包含字段(id,name,gender)其中name不能为NULL</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> st8 <span class="token punctuation">(</span>    id <span class="token keyword">INT</span><span class="token punctuation">,</span>    NAME <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    gender CHAR<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>添加一些完整的记录</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> st8 <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'郭富城'</span><span class="token punctuation">,</span> <span class="token string">'男'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> st8 <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'黎明'</span><span class="token punctuation">,</span> <span class="token string">'男'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> st8 <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'张学友'</span><span class="token punctuation">,</span> <span class="token string">'男'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> st8 <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'刘德华'</span><span class="token punctuation">,</span> <span class="token string">'男'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 姓名不赋值出现姓名不能为null: Column 'name' cannot be null</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> st8 <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token string">'男'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h4><p>非空约束的格式:</p><p>字段名 数据类型 NOT NULL</p><h3 id="唯一约束与主键约束的区别"><a href="#唯一约束与主键约束的区别" class="headerlink" title="唯一约束与主键约束的区别"></a><font color="red">唯一约束与主键约束的区别</font></h3><p>主键约束与唯一+非空约束区别？</p><pre class=" language-sql"><code class="language-sql"><span class="token number">1</span><span class="token punctuation">.</span>主键约束在表中只能存在一个，但是唯一<span class="token operator">+</span>非空可以多个；<span class="token number">2</span><span class="token punctuation">.</span>主键约束可以配合主键自增使用，但是唯一<span class="token operator">+</span>非空不行；<span class="token number">3</span><span class="token punctuation">.</span>主键约束底层维护了主键索引，但是唯一约束底层维护唯一索引；</code></pre><h3 id="4、默认值约束"><a href="#4、默认值约束" class="headerlink" title="4、默认值约束"></a>4、默认值约束</h3><h4 id="默认值的作用"><a href="#默认值的作用" class="headerlink" title="默认值的作用"></a>默认值的作用</h4><p>往表中添加数据时,如果不指定这个字段的数据,就使用默认值</p><h4 id="默认值格式"><a href="#默认值格式" class="headerlink" title="默认值格式"></a>默认值格式</h4><pre class=" language-sql"><code class="language-sql">字段名 字段类型 <span class="token keyword">DEFAULT</span> 默认值</code></pre><p>具体步骤：</p><ul><li>创建一个学生表 st9，包含字段(id,name,address)， 地址默认值是广州</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true"># 设置默认值约束，address默认值上海</span><span class="token keyword">create</span> <span class="token keyword">table</span> st5<span class="token punctuation">(</span>    id <span class="token keyword">int</span><span class="token punctuation">,</span>    name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    address <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">'上海'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 测试默认值约束</span><span class="token comment" spellcheck="true"># 如果给值，则使用给定的值</span><span class="token keyword">insert</span> <span class="token keyword">into</span> st5 <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'zhangsan'</span><span class="token punctuation">,</span><span class="token string">'北京'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 直接赋值为null时，不使用默认值</span><span class="token keyword">insert</span> <span class="token keyword">into</span> st5 <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'zhangsan'</span><span class="token punctuation">,</span><span class="token boolean">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 如果不定义值，那么就使用默认值</span><span class="token keyword">insert</span> <span class="token keyword">into</span> st5<span class="token punctuation">(</span>id<span class="token punctuation">,</span>name<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'lisi'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="5、外键约束"><a href="#5、外键约束" class="headerlink" title="5、外键约束"></a>5、外键约束</h3><blockquote><p>创建外键约束，会自动创建一个普通索引，常用于连接查询的条件</p></blockquote><h4 id="1、添加约束："><a href="#1、添加约束：" class="headerlink" title="1、添加约束："></a>1、添加约束：</h4><p>第一种方式：给已经存在的表添加外键约束：</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 来自于程序员表</span><span class="token keyword">alter</span> <span class="token keyword">table</span> coder_project <span class="token keyword">add</span> <span class="token keyword">constraint</span> c_id_fk <span class="token keyword">foreign</span> <span class="token keyword">key</span><span class="token punctuation">(</span>coder_id<span class="token punctuation">)</span> <span class="token keyword">references</span> coder<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 来自于项目表</span><span class="token keyword">alter</span> <span class="token keyword">table</span> coder_project <span class="token keyword">add</span> <span class="token keyword">constraint</span> p_id_fk <span class="token keyword">foreign</span> <span class="token keyword">key</span><span class="token punctuation">(</span>project_id<span class="token punctuation">)</span> <span class="token keyword">references</span> project<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>第二种方式：创建表时就添加外键约束：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> coder_project<span class="token punctuation">(</span>    coder_id <span class="token keyword">int</span><span class="token punctuation">,</span>    project_id <span class="token keyword">int</span><span class="token punctuation">,</span>    <span class="token keyword">constraint</span> c_id_fk <span class="token keyword">foreign</span> <span class="token keyword">key</span><span class="token punctuation">(</span>coder_id<span class="token punctuation">)</span> <span class="token keyword">references</span> coder<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">constraint</span> p_id_fk <span class="token keyword">foreign</span> <span class="token keyword">key</span><span class="token punctuation">(</span>project_id<span class="token punctuation">)</span> <span class="token keyword">references</span> project<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="2、外键级联"><a href="#2、外键级联" class="headerlink" title="2、外键级联"></a>2、外键级联</h4><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">### 外键的级联(掌握)</span>在修改和删除主表的主键时，同时更新或删除从表的外键值，称为级联操作<span class="token punctuation">`</span><span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CASCADE</span><span class="token punctuation">`</span> <span class="token comment" spellcheck="true">-- 级联更新，主键发生更新时，外键也会更新</span><span class="token punctuation">`</span><span class="token keyword">ON</span> <span class="token keyword">DELETE</span> <span class="token keyword">CASCADE</span><span class="token punctuation">`</span> <span class="token comment" spellcheck="true">-- 级联删除，主键发生删除时，外键也会删除</span></code></pre><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 创建程序员表</span><span class="token keyword">create</span> <span class="token keyword">table</span> coder<span class="token punctuation">(</span>    id <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">auto_increment</span><span class="token punctuation">,</span>    name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    salary <span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 创建项目表</span><span class="token keyword">create</span> <span class="token keyword">table</span> project<span class="token punctuation">(</span>    id <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">auto_increment</span><span class="token punctuation">,</span>    name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">table</span> coder_project<span class="token punctuation">(</span>    coder_id <span class="token keyword">int</span><span class="token punctuation">,</span>    project_id <span class="token keyword">int</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">-- 添加外键约束,并且添加级联更新和级联删除</span>    <span class="token keyword">constraint</span> c_id_fk <span class="token keyword">foreign</span> <span class="token keyword">key</span><span class="token punctuation">(</span>coder_id<span class="token punctuation">)</span> <span class="token keyword">references</span> coder<span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CASCADE</span> <span class="token keyword">ON</span> <span class="token keyword">DELETE</span> <span class="token keyword">CASCADE</span><span class="token punctuation">,</span>    <span class="token keyword">constraint</span> p_id_fk <span class="token keyword">foreign</span> <span class="token keyword">key</span><span class="token punctuation">(</span>project_id<span class="token punctuation">)</span> <span class="token keyword">references</span> project<span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CASCADE</span> <span class="token keyword">ON</span> <span class="token keyword">DELETE</span> <span class="token keyword">CASCADE</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="5、多表关系和设计原则"><a href="#5、多表关系和设计原则" class="headerlink" title="5、多表关系和设计原则"></a>5、多表关系和设计原则</h2><h3 id="1、一对一"><a href="#1、一对一" class="headerlink" title="1、一对一"></a>1、一对一</h3><blockquote><p>给随便一个表添加字段，添加外键约束,外键添加唯一约束</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true"># 一对一：玩家与微信绑定</span><span class="token keyword">create</span> <span class="token keyword">table</span> wechat<span class="token punctuation">(</span>    id <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>    name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">table</span> player<span class="token punctuation">(</span>    id <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>    name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    wechat_id <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 添加外键约束</span><span class="token keyword">alter</span> <span class="token keyword">table</span> player <span class="token keyword">add</span> <span class="token keyword">constraint</span> fk_wechat <span class="token keyword">foreign</span> <span class="token keyword">key</span><span class="token punctuation">(</span>wechat_id<span class="token punctuation">)</span> <span class="token keyword">references</span> wechat<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 给player中wechat_id添加唯一约束，实现一对一</span><span class="token keyword">alter</span> <span class="token keyword">table</span> player <span class="token keyword">add</span> <span class="token keyword">unique</span><span class="token punctuation">(</span>wechat_id<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="2、一对多"><a href="#2、一对多" class="headerlink" title="2、一对多"></a>2、一对多</h3><blockquote><p>给多的一方添加一个字段，添加外键，指向少的一方的主键。</p><p>比如作者与作品的关系</p><p>​    作品表中就应新建一个 ‘作者id’ 字段，然后建立外键联系 作者表 中的id字段</p></blockquote><h3 id="3、多对多"><a href="#3、多对多" class="headerlink" title="3、多对多"></a>3、多对多</h3><blockquote><p>创建一个中间表，在中间表中创建两个字段，分别建立外键约束指向另外两个表的主键。</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">// 中间表 程序员与项目之间的关系</span><span class="token comment" spellcheck="true">-- 创建程序员表</span><span class="token keyword">create</span> <span class="token keyword">table</span> coder<span class="token punctuation">(</span>    id <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">auto_increment</span><span class="token punctuation">,</span>    name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    salary <span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 创建项目表</span><span class="token keyword">create</span> <span class="token keyword">table</span> project<span class="token punctuation">(</span>    id <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">auto_increment</span><span class="token punctuation">,</span>    name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">table</span> coder_project<span class="token punctuation">(</span>    coder_id <span class="token keyword">int</span><span class="token punctuation">,</span>    project_id <span class="token keyword">int</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">-- 添加外键约束,并且添加级联更新和级联删除</span>    <span class="token keyword">constraint</span> c_id_fk <span class="token keyword">foreign</span> <span class="token keyword">key</span><span class="token punctuation">(</span>coder_id<span class="token punctuation">)</span> <span class="token keyword">references</span> coder<span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CASCADE</span> <span class="token keyword">ON</span> <span class="token keyword">DELETE</span> <span class="token keyword">CASCADE</span><span class="token punctuation">,</span>    <span class="token keyword">constraint</span> p_id_fk <span class="token keyword">foreign</span> <span class="token keyword">key</span><span class="token punctuation">(</span>project_id<span class="token punctuation">)</span> <span class="token keyword">references</span> project<span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CASCADE</span> <span class="token keyword">ON</span> <span class="token keyword">DELETE</span> <span class="token keyword">CASCADE</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="4、设计原则"><a href="#4、设计原则" class="headerlink" title="4、设计原则"></a>4、设计原则</h3><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 设计原则</span>多对多：通过设计一张中间表将主表之间多对多的关系，转换成与中间中之间一对多的关系（简化关系）一对多：由多的一方维护2表的关系；一对一：任意一方都可以维护，实际情况，根据业务做选择；</code></pre><h2 id="6、三大范式"><a href="#6、三大范式" class="headerlink" title="6、三大范式"></a>6、三大范式</h2><pre class=" language-markdown"><code class="language-markdown">第一范式：表中每一列不能分割；第二范式：1.满足第一方式 2.消除部分依赖（在联合主键中才能出现）   // 一般都可以分裂成两个表第三范式：1.满足第二范式 2.先出传递依赖（分类描述---》分类---》商品）</code></pre><p>反3范式：</p><pre class=" language-sql"><code class="language-sql">满足<span class="token number">3</span>范式的设计，不一定是最最好的设计，因为实际情况要根据具体的业务场景分析；加入冗余字段，来提高数据库的运行效率，提高查询性能； 用户与订单，在订单中加入用户信息，避免大表联查，提高查询效率；</code></pre><h2 id="7、多表查询"><a href="#7、多表查询" class="headerlink" title="7、多表查询"></a>7、多表查询</h2><h3 id="1-内连接查询（隐式和显示）"><a href="#1-内连接查询（隐式和显示）" class="headerlink" title="1.内连接查询（隐式和显示）"></a>1.内连接查询（隐式和显示）</h3><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true"># 查询水果和价格的信息</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> fruit<span class="token punctuation">,</span>price<span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 笛卡尔积过滤：条件过滤</span><span class="token comment" spellcheck="true"># 隐式内连接</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> fruit<span class="token punctuation">,</span>price <span class="token keyword">where</span> fruit<span class="token punctuation">.</span>price_id<span class="token operator">=</span>price<span class="token punctuation">.</span>id<span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 显示内连接</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> fruit <span class="token keyword">inner</span> <span class="token keyword">join</span> price <span class="token keyword">on</span> fruit<span class="token punctuation">.</span>price_id<span class="token operator">=</span>price<span class="token punctuation">.</span>id<span class="token punctuation">;</span></code></pre><h3 id="2-外连接查询"><a href="#2-外连接查询" class="headerlink" title="2.外连接查询"></a>2.外连接查询</h3><p>左外特点：左表都显示，右表只显示满足条件的数据；</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true"># 1.无论水果信息是否有关联的price，水果信息都要显示；</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> fruit <span class="token keyword">left</span> <span class="token keyword">outer</span> <span class="token keyword">join</span> price <span class="token keyword">on</span> fruit<span class="token punctuation">.</span>price_id<span class="token operator">=</span>price<span class="token punctuation">.</span>id<span class="token punctuation">;</span></code></pre><p>右外特点：右表都显示，左表只显示满足条件的数据；</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true"># 1.无论水果信息是否有关联的price，价格信息都要显示；</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> price <span class="token keyword">left</span> <span class="token keyword">outer</span> <span class="token keyword">join</span> fruit <span class="token keyword">on</span> fruit<span class="token punctuation">.</span>price_id<span class="token operator">=</span>price<span class="token punctuation">.</span>id<span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> fruit <span class="token keyword">right</span> <span class="token keyword">outer</span> <span class="token keyword">join</span> price <span class="token keyword">on</span> fruit<span class="token punctuation">.</span>price_id<span class="token operator">=</span>price<span class="token punctuation">.</span>id<span class="token punctuation">;</span></code></pre><h3 id="3-子查询"><a href="#3-子查询" class="headerlink" title="3.子查询"></a>3.子查询</h3><h4 id="1-单行单列查询（比较运算符）"><a href="#1-单行单列查询（比较运算符）" class="headerlink" title="1.单行单列查询（比较运算符）"></a>1.单行单列查询（比较运算符）</h4><blockquote><p>比较运算符</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> salary<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">max</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token keyword">from</span> emp<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="2-多行单列查询（in-，all，some，any关键字）"><a href="#2-多行单列查询（in-，all，some，any关键字）" class="headerlink" title="2. 多行单列查询（in ，all，some，any关键字）"></a>2. 多行单列查询（in ，all，some，any关键字）</h4><blockquote><p>in ，all，some，any关键字</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> name <span class="token keyword">from</span> dept <span class="token keyword">where</span> id <span class="token operator">in</span><span class="token punctuation">(</span><span class="token keyword">select</span> dept_id <span class="token keyword">from</span> emp <span class="token keyword">where</span> salary <span class="token operator">></span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="3-多行多列查询（多行多列起别名将结果作为一张表，与其他表联合查询）"><a href="#3-多行多列查询（多行多列起别名将结果作为一张表，与其他表联合查询）" class="headerlink" title="3.多行多列查询（多行多列起别名将结果作为一张表，与其他表联合查询）"></a>3.多行多列查询（多行多列起别名将结果作为一张表，与其他表联合查询）</h4><blockquote><p>多行多列起别名将结果作为一张表，与其他表联合查询</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> tmp<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span>dept<span class="token punctuation">.</span>name <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> join_date <span class="token operator">></span> <span class="token string">'2011-01-01'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> tmp<span class="token punctuation">,</span>dept <span class="token keyword">where</span> tmp<span class="token punctuation">.</span>dept_id<span class="token operator">=</span>dept<span class="token punctuation">.</span>id<span class="token punctuation">;</span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="1-DQL"><a href="#1-DQL" class="headerlink" title="1.DQL"></a>1.DQL</h3><pre class=" language-sql"><code class="language-sql"><span class="token number">1</span><span class="token punctuation">.</span>聚合函数<span class="token operator">=</span><span class="token operator">=</span>》<span class="token number">5</span>大聚合函数    <span class="token keyword">select</span> 聚合函数<span class="token punctuation">(</span>字段<span class="token punctuation">)</span> <span class="token keyword">from</span> 表；    最大值：<span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    最小值：<span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    平均值：<span class="token function">avg</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    记录数：<span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    亲和：<span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>注意事项：聚合函数对<span class="token boolean">null</span>不处理；      <span class="token number">2</span><span class="token punctuation">.</span>分组 <span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span>》<span class="token keyword">group</span> <span class="token keyword">by</span> 字段 配合聚合函数一块使用    <span class="token keyword">select</span> 分组字段，聚合函数<span class="token punctuation">(</span>字段<span class="token punctuation">)</span> <span class="token keyword">from</span> 表 <span class="token keyword">group</span> <span class="token keyword">by</span> 分组字段 <span class="token keyword">having</span> 条件；  <span class="token keyword">having</span>与<span class="token keyword">where</span>区别？      <span class="token number">1</span><span class="token punctuation">.</span><span class="token keyword">having</span>后边可以使用聚合函数，但是<span class="token keyword">where</span>不可以；      <span class="token number">2</span><span class="token punctuation">.</span><span class="token keyword">having</span>查询不走索引，但是<span class="token keyword">where</span>可以走索引；      <span class="token number">3</span><span class="token punctuation">.</span><span class="token keyword">having</span>用于分组之后的条件过滤，但是<span class="token keyword">where</span>一般应用于分组之间的条件过滤；      <span class="token number">4</span><span class="token punctuation">.</span><span class="token keyword">having</span>条件中使用的字段必须在<span class="token keyword">select</span>语句中声明<span class="token number">2</span><span class="token punctuation">.</span>限制查询<span class="token operator">=</span><span class="token operator">=</span>》<span class="token keyword">limit</span>    <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> 表名 <span class="token keyword">where</span> 条件 <span class="token keyword">limit</span> 索引位，返回的记录数；    注意事项：<span class="token number">1</span><span class="token punctuation">.</span>索引位默认从<span class="token number">0</span>开始 ，如果从<span class="token number">0</span>开始那么省略不写索引位；    分页公式：索引位<span class="token operator">=</span>（当前页<span class="token operator">-</span><span class="token number">1</span>）<span class="token operator">*</span>每页大小；</code></pre><h3 id="2-DCL"><a href="#2-DCL" class="headerlink" title="2.DCL"></a>2.DCL</h3><pre class=" language-SQL"><code class="language-SQL">1.创建用户create user '用户名称'@'登录主键名称' identified by '密码'；2.授权    grant create,insert,... on *.*  to '用户名称'@'登录主键名称';3.撤销    revoke create,insert,... on *.*   from '用户名称'@'登录主键名称';4.删除用户    drop user '用户名称'@'登录主键名称';</code></pre><h3 id="3-多表关系与设计原则"><a href="#3-多表关系与设计原则" class="headerlink" title="3.多表关系与设计原则"></a>3.多表关系与设计原则</h3><pre class=" language-sql"><code class="language-sql">【<span class="token number">1</span>】关系<span class="token number">1</span><span class="token punctuation">.</span>多对多：程序员与项目、渣男与渣女、用户与角色，从任意一方看，都是一对多；<span class="token number">2</span><span class="token punctuation">.</span>一对多：班级与学生；<span class="token number">3</span><span class="token punctuation">.</span>一对第一：用户与身份证，玩家与微信号【<span class="token number">2</span>】设计原则多对多：通过设计一张中间表将主表之间多对多的关系，转换成与中间中之间一对多的关系（简化关系）一对多：由多的一方维护<span class="token number">2</span>表的关系；一对一：任意一方都可以维护，实际情况，根据业务做选择；</code></pre><h3 id="4-约束"><a href="#4-约束" class="headerlink" title="4.约束"></a>4.约束</h3><table><thead><tr><th>约束</th><th>关键字</th><th>作用</th></tr></thead><tbody><tr><td>主键约束</td><td>primary key  auto_increment</td><td>唯一+非空</td></tr><tr><td>唯一约束</td><td>unique 注意：null</td><td>唯一</td></tr><tr><td>非空约束</td><td>not null</td><td>约束不能为null</td></tr><tr><td>默认值约束</td><td>default 值</td><td>如果客户端给声明值，则使用默认；</td></tr><tr><td>外键约束</td><td>add  constraint 约束名称  foreign key(字段) references 表（字段）<br>on  update cascade ; on delete cascade;</td><td>维护多表之间关系</td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h3 id="5、3大范式"><a href="#5、3大范式" class="headerlink" title="5、3大范式"></a>5、3大范式</h3><pre class=" language-sql"><code class="language-sql">第一范式：表中每一列不能分割；第二范式：<span class="token number">1</span><span class="token punctuation">.</span>满足第一方式 <span class="token number">2</span><span class="token punctuation">.</span>消除部分依赖（在联合主键中才能出现）第三范式：<span class="token number">1</span><span class="token punctuation">.</span>满足第二范式 <span class="token number">2</span><span class="token punctuation">.</span>先出传递依赖（分类描述<span class="token comment" spellcheck="true">---》分类---》商品）</span></code></pre><p>反3范式：</p><pre class=" language-sql"><code class="language-sql">满足<span class="token number">3</span>范式的设计，不一定是最最好的设计，因为实际情况要根据具体的业务场景分析；加入冗余字段，来提高数据库的运行效率，提高查询性能； 用户与订单，在订单中加入用户信息，避免大表联查，提高查询效率；</code></pre><h3 id="6-多表查询"><a href="#6-多表查询" class="headerlink" title="6.多表查询"></a>6.多表查询</h3><pre class=" language-sql"><code class="language-sql"><span class="token number">1</span><span class="token punctuation">.</span>查询方式：    表的连接查询        内连接查询：特点交集查询，只显示都满足条件的数据            隐式内连接                <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t1 <span class="token punctuation">,</span>t2 <span class="token keyword">where</span> 条件；            显示内连接                <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t1 <span class="token keyword">inner</span> <span class="token keyword">join</span> t2 <span class="token keyword">on</span> 条件；        外连接查询            左外连接查询:左侧表都显示，右表只显示满足条件的数据                <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t1 <span class="token keyword">left</span> <span class="token keyword">join</span> t2 <span class="token keyword">on</span> 条件；            右外连接查询：右侧表都显示，左表只显示满足条件的数据                <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t1 <span class="token keyword">right</span> <span class="token keyword">join</span> t2 <span class="token keyword">on</span> 条件；    子查询：一个sql语句嵌套在另一个sql语句内        单行单列：            使用比较运算符 eg:<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> score <span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">max</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span> <span class="token keyword">from</span> student<span class="token punctuation">)</span><span class="token punctuation">;</span>        多行单列:            使用<span class="token operator">in</span>关键字：eg:<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> dept_id <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> id <span class="token keyword">from</span> dept <span class="token keyword">where</span> name <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token string">'财务'</span>，<span class="token string">'开发'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        多行多列:            子查询结果多行多列，使用<span class="token keyword">as</span>取别名作为一张表与其他表关联查询；<span class="token number">2</span><span class="token punctuation">.</span>多表查询规则：    <span class="token number">1</span><span class="token punctuation">.</span>确定业务需要哪些表； <span class="token number">2</span><span class="token punctuation">.</span>确定表与表之间的关系（字段之间连接<span class="token comment" spellcheck="true">--》外键字段练习）3.确定其他的查询条件</span>    <span class="token number">4</span><span class="token punctuation">.</span>确定需要查询的列信息            </code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC</title>
      <link href="/2020/03/15/JDBC/"/>
      <url>/2020/03/15/JDBC/</url>
      
        <content type="html"><![CDATA[<h2 id="1-JDBC概念"><a href="#1-JDBC概念" class="headerlink" title="1.JDBC概念"></a>1.JDBC概念</h2><h3 id="1-1-JDBC的由来"><a href="#1-1-JDBC的由来" class="headerlink" title="1.1 JDBC的由来"></a>1.1 JDBC的由来</h3><p><img src="https://i.loli.net/2021/09/02/nhxBlGOqfu5AaUr.png" alt="image-20201020185614120"></p><p>   Sun公司定义了一套<strong>操纵数据库的接口规范(JDBC)</strong>,具体的实现由不同的数据库服务厂商;</p><p>一般程序访问一些硬件资源都需要安装驱动,比如我们使用声卡\网卡 就需要安装声卡驱动和网卡驱动,如果我们使用U盘,那么就需要安装U盘相关的驱动;</p><p>   同样的道理,如果我们使用java访问数据库,也需要安装相关的驱动包;</p><p>数据库运行在不同的操作系统下,比如windows,linux,unix,macos等等,同时数据库又有不同的厂家提供,比如mysql,oracle,sqlserver等,如果对于程序员来说,针对不同的数据库在不同的操作系统下,安装不同的驱动软件,那么成本会很高;</p><p>   所以,Sun公司制定了一套规则,这套规则就是用来java连接数据库的,然后不同的厂商自己实现定义个规则即可,对于程序员只了解规则核心内容,即可对不同的数据库进行操作,这套规则叫做JDBC;</p><h3 id="1-2-JDBC的好处"><a href="#1-2-JDBC的好处" class="headerlink" title="1.2 JDBC的好处"></a>1.2 JDBC的好处</h3><ol><li>开发者只需会调用JDBC接口中的方法即可，使用简单；</li><li>底层实现交给具体的<strong>数据库厂商</strong>来完成，与开发者解耦；</li><li>对于不同 的数据库，开发者使用同一套Java代码，进行少量的修改就可以访问其他JDBC支持的数据库（<strong>移植性好</strong>）；</li></ol><p>小结:</p><p>1.说出JDBC概念?</p><pre class=" language-sql"><code class="language-sql"><span class="token number">1</span><span class="token punctuation">)</span>是java连接数据库的桥梁<span class="token punctuation">;</span><span class="token number">2</span><span class="token punctuation">)</span>jdbc是Sun公司抽出出来的一套操纵数据库的接口规范<span class="token punctuation">,</span>规范接口由不同的数据库服务器厂商去实现<span class="token punctuation">;</span></code></pre><hr style="height:10px;background-color:green;border:none;"><h2 id="2-JDBC核心API的介绍"><a href="#2-JDBC核心API的介绍" class="headerlink" title="2.JDBC核心API的介绍"></a>2.JDBC核心API的介绍</h2><h4 id="2-1-JDBC会用到的包"><a href="#2-1-JDBC会用到的包" class="headerlink" title="2.1 JDBC会用到的包"></a>2.1 JDBC会用到的包</h4><ol><li>java.sql：JDBC访问数据库的基础包，在JavaSE中的包。如：java.sql.Connection</li><li>javax.sql： JDBC访问数据库的扩展包(x表示extension,扩展)</li><li>数据库的驱动，各大数据库厂商来实现。如：MySQL的驱动：com.mysql.jdbc.Driver</li></ol><h4 id="2-2-JDBC四个核心对象"><a href="#2-2-JDBC四个核心对象" class="headerlink" title="2.2 JDBC四个核心对象"></a>2.2 JDBC四个核心对象</h4><p>这几个类都是在java.sql包中(<strong>1类3接口</strong>)</p><ol><li><strong>DriverManager(类)</strong>:  数据库驱动管理类。这个类的作用：1）注册驱动; 2)创建java代码和数据库之间的连接，即获取Connection接口;</li><li><strong>Connection(接口)</strong>: 是一个接口, 建立数据库连接的一个接口。作用：建立数据库和java代码之间的连接。表示与数据库创建的连接</li><li><strong>Statement(接口)、PreparedStatement(接口)</strong> (解决安全隐患问题，比如sql注入的问题)： 数据库操作，向数据库发送sql语句。执行SQL语句的对象</li><li><strong>ResultSet</strong>(接口): 结果集或一张虚拟表。 Statement 发送sql语句，得到的结果 封装在 ResultSet 中。</li></ol><h4 id="2-3-JDBC访问数据库的步骤"><a href="#2-3-JDBC访问数据库的步骤" class="headerlink" title="2.3 JDBC访问数据库的步骤"></a>2.3 JDBC访问数据库的步骤</h4><p><span style="background-color:red">PPT演示：</span></p><ol><li>由DriverManager注册驱动程序；</li><li>创建和数据库的连接对象Connection；</li><li>由客户端发送SQL语句给服务器执行，SQL语句封装成Statement对象；</li><li>查询到的结果集封装成ResultSet对象；</li><li>在客户端可以从ResultSet中取出数据，处理结果集；</li><li>释放资源，关闭连接对象；</li></ol><hr style="height:10px;background-color:green;border:none;"><h2 id="3-注册驱动"><a href="#3-注册驱动" class="headerlink" title="3.注册驱动"></a>3.注册驱动</h2><h4 id="3-1注册驱动"><a href="#3-1注册驱动" class="headerlink" title="3.1注册驱动"></a>3.1注册驱动</h4><h5 id="1-DriverManager显式注册-理解"><a href="#1-DriverManager显式注册-理解" class="headerlink" title="1) DriverManager显式注册(理解)"></a>1) DriverManager显式注册(理解)</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">registerDriver</span><span class="token punctuation">(</span>Driver driver<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//向 DriverManager 注册给定驱动程序。 </span><span class="token comment" spellcheck="true">//获取所有注册的驱动类</span><span class="token keyword">static</span> Enumeration<span class="token operator">&lt;</span>Driver<span class="token operator">></span> <span class="token function">getDrivers</span><span class="token punctuation">(</span><span class="token punctuation">)</span>           获取带有当前调用者可以访问的所有当前已加载 JDBC 驱动程序的 Enumeration。 </code></pre><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testRegister</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1)显式注册驱动</span>        DriverManager<span class="token punctuation">.</span><span class="token function">registerDriver</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Driver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2)获取注册的驱动</span>        Enumeration<span class="token operator">&lt;</span>java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Driver<span class="token operator">></span> drivers <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getDrivers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3)遍历</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>drivers<span class="token punctuation">.</span><span class="token function">hasMoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>drivers<span class="token punctuation">.</span><span class="token function">nextElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>说明:对于mysql不建议使用DriverManger的显式注册方式,会造成驱动2次注册,造成内存浪费;</p><p>注册2次的原因：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Driver</span>  <span class="token keyword">implements</span> <span class="token class-name">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Driver</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Driver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//在类被加载的时候，静态代码块就注册了一次了</span>            DriverManager<span class="token punctuation">.</span><span class="token function">registerDriver</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Driver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> var1<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"Can't register driver!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>说明:使用DriverManager.registerDriver()会导致驱动类注册2次,浪费内存;</p><h4 id="3-2-隐式注册驱动"><a href="#3-2-隐式注册驱动" class="headerlink" title="3.2  隐式注册驱动"></a>3.2  隐式注册驱动</h4><h5 id="1-类加载实现驱动注册"><a href="#1-类加载实现驱动注册" class="headerlink" title="1)类加载实现驱动注册"></a>1)类加载实现驱动注册</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//隐式注册</span>Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> ClassNotFoundException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1)隐式注册</span>        Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2)获取注册的驱动</span>        Enumeration<span class="token operator">&lt;</span>java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Driver<span class="token operator">></span> drivers <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getDrivers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3)遍历</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>drivers<span class="token punctuation">.</span><span class="token function">hasMoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>drivers<span class="token punctuation">.</span><span class="token function">nextElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h5 id="2-SPI机制自动加载-了解即可"><a href="#2-SPI机制自动加载-了解即可" class="headerlink" title="2)SPI机制自动加载(了解即可)"></a>2)SPI机制自动加载(了解即可)</h5><p>​    java6之后引入了SPI机制,jdbc利用SPI机制会自动加载实现了Driver的接口实现类;</p><p>​    所以导入驱动包后无需配置,直接使用即可;</p><p>小结:</p><p>如何通过jdbc注册数据库驱动?</p><pre class=" language-sql"><code class="language-sql"><span class="token number">1</span><span class="token punctuation">)</span>显式注册: DriverManager<span class="token punctuation">.</span>registerDriver<span class="token punctuation">(</span>驱动类对象<span class="token punctuation">)</span><span class="token comment" spellcheck="true">----->2次注册,浪费内存</span><span class="token number">2</span><span class="token punctuation">)</span>隐式注册: Class<span class="token punctuation">.</span>forName<span class="token punctuation">(</span>驱动类的全限定名称<span class="token punctuation">)</span><span class="token comment" spellcheck="true">---->只注册一次</span><span class="token number">3</span><span class="token punctuation">)</span>jdb spi机制<span class="token punctuation">,</span>自动加载services包下接口文件<span class="token punctuation">,</span>自动加载<span class="token punctuation">,</span>无需手动加载<span class="token punctuation">;</span></code></pre><hr style="height:10px;background-color:green;border:none;"><h2 id="4-获取连接"><a href="#4-获取连接" class="headerlink" title="4.获取连接"></a>4.获取连接</h2><h3 id="API介绍"><a href="#API介绍" class="headerlink" title="API介绍"></a>API介绍</h3><p><code>java.sql.DriverManager</code>类中有如下方法获取数据库连接</p><pre class=" language-java"><code class="language-java"><span class="token keyword">static</span> Connection <span class="token function">getConnection</span><span class="token punctuation">(</span>String url<span class="token punctuation">,</span> String user<span class="token punctuation">,</span> String password<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//试图建立到给定数据库 URL 的连接。 </span></code></pre><h4 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h4><ol><li><code>String url</code>：连接数据库的URL，用于说明连接数据库的位置</li><li><code>String user</code>：数据库的账号</li><li><code>String password</code>：数据库的密码</li></ol><p>url格式:</p><p>主协议:子协议://localhost:3306/test?参数=参数值&amp;…&amp;…..</p><p>举例:</p><pre class=" language-sql"><code class="language-sql">jdbc:mysql:<span class="token comment" spellcheck="true">//localhost:3306/day05?useUnicode=true&amp;characterEncoding=utf8</span>如果连接的时本地且端口号是<span class="token number">3306</span>jdbc:mysql:<span class="token comment" spellcheck="true">///day05?useUnicode=true&amp;characterEncoding=utf8</span>说明:如果连接的时本地localhost<span class="token punctuation">,</span>且端口默认为<span class="token number">3306</span> 那么可以ip和端口可以省略不写<span class="token punctuation">;</span>eg:jdbc:mysql:<span class="token comment" spellcheck="true">///day05</span></code></pre><p>注意事项:</p><pre class=" language-tex"><code class="language-tex">如果数据出现乱码需要加上参数: ?useUnicode=true&characterEncoding=utf8，表示让数据库以UTF8编码来处理数据。如: jdbc:mysql://localhost:3306/day04_db?useUnicode=true&characterEncoding=utf8</code></pre><p>练习1:使用jdbc连接day05_2数据库</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> ClassNotFoundException<span class="token punctuation">,</span> SQLException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.注册驱动</span>        Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.获取连接对象</span>        String url<span class="token operator">=</span><span class="token string">"jdbc:mysql://localhost:3306/day05_2"</span><span class="token punctuation">;</span>        String user<span class="token operator">=</span><span class="token string">"root"</span><span class="token punctuation">;</span>        String pwd<span class="token operator">=</span><span class="token string">"1234"</span><span class="token punctuation">;</span>        Connection conn <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> user<span class="token punctuation">,</span> pwd<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>小结:</p><p>1.JDBC获取数据库连接使用哪个API？</p><pre class=" language-sql"><code class="language-sql">DriverManager<span class="token punctuation">.</span>getConnection<span class="token punctuation">(</span>url<span class="token punctuation">,</span><span class="token keyword">user</span><span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>2.通过JDBC连接mysql的URL写法？</p><pre class=" language-sql"><code class="language-sql">jdbc:mysql:<span class="token comment" spellcheck="true">//ip地址:端口号/库</span></code></pre><hr style="height:10px;background-color:green;border:none;"><h2 id="5-JDBC实现对单表数据增-删-改操作"><a href="#5-JDBC实现对单表数据增-删-改操作" class="headerlink" title="5.JDBC实现对单表数据增,删,改操作"></a>5.JDBC实现对单表数据增,删,改操作</h2><h5 id="API介绍-1"><a href="#API介绍-1" class="headerlink" title="API介绍"></a>API介绍</h5><p>获取Statement对象</p><p>在<code>java.sql.Connection</code>接口中有如下方法获取到<code>Statement</code>对象</p><pre class=" language-java"><code class="language-java">Statement <span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 创建一个 Statement 对象来将 SQL 语句发送到数据库</code></pre><p>Statement的API介绍</p><ol><li><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> <span class="token function">executeUpdate</span><span class="token punctuation">(</span>String sql<span class="token punctuation">)</span>根据执行的DML（INSERT、UPDATE、DELETE）语句，返回受影响的行数</code></pre></li><li><pre class=" language-java"><code class="language-java">ResultSet <span class="token function">executeQuery</span><span class="token punctuation">(</span>String sql<span class="token punctuation">)</span>根据查询语句返回结果集<span class="token punctuation">,</span>只能执行SELECT语句</code></pre></li></ol><h4 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h4><ol><li>注册驱动</li><li>获取连接</li><li>获取Statement对象</li><li>使用Statement对象执行SQL语句</li><li>释放资源</li></ol><p>练习题:对user表中数据实现增删改操作</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test6</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> ClassNotFoundException<span class="token punctuation">,</span> SQLException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.注册驱动</span>        Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.获取连接</span>        String url<span class="token operator">=</span><span class="token string">"jdbc:mysql:///day05_2"</span><span class="token punctuation">;</span>        String user<span class="token operator">=</span><span class="token string">"root"</span><span class="token punctuation">;</span>        String pwd<span class="token operator">=</span><span class="token string">"1234"</span><span class="token punctuation">;</span>        Connection conn <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> user<span class="token punctuation">,</span> pwd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.获取发送sql语句的对象Statement</span>        Statement stm <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4.发送sql语句,获取受影响行数</span>        <span class="token comment" spellcheck="true">//1.测试插入 jdbc事务默认自动提交</span>        <span class="token comment" spellcheck="true">//String sql="insert into user values(null,'likaiyuan','666')";</span>        <span class="token comment" spellcheck="true">//测试更新</span>        <span class="token comment" spellcheck="true">//String sql="update user set username='jialili',password='888' where id=4";</span>        String sql<span class="token operator">=</span><span class="token string">"delete from user where id=3"</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> stm<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 1</span>        <span class="token comment" spellcheck="true">//5.释放资源</span>        stm<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><hr style="height:10px;background-color:green;border:none;"><p>小结:</p><p>jdbc实现增删改流程?</p><pre class=" language-sql"><code class="language-sql"><span class="token number">1</span><span class="token punctuation">)</span>注册驱动 : Class<span class="token punctuation">.</span>forName<span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">2</span><span class="token punctuation">)</span>获取连接:Connection conn<span class="token operator">=</span> DriverManager<span class="token punctuation">.</span>getConnection<span class="token punctuation">(</span>url<span class="token punctuation">,</span><span class="token keyword">user</span><span class="token punctuation">,</span>pwd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">3</span><span class="token punctuation">)</span>获取发送sql语句的对象Statement:  Statement stm<span class="token operator">=</span>conn<span class="token punctuation">.</span>createStatement<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">4</span><span class="token punctuation">)</span>发送sql: <span class="token keyword">int</span> count<span class="token operator">=</span>stm<span class="token punctuation">.</span>executeUpdate<span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">5</span><span class="token punctuation">)</span>释放资源: stm<span class="token punctuation">.</span><span class="token keyword">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>conn<span class="token punctuation">.</span><span class="token keyword">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="6-JDBC实现对单表数据查询"><a href="#6-JDBC实现对单表数据查询" class="headerlink" title="6.JDBC实现对单表数据查询"></a>6.JDBC实现对单表数据查询</h2><h3 id="6-1-jdbc单表查询操作"><a href="#6-1-jdbc单表查询操作" class="headerlink" title="6.1.jdbc单表查询操作"></a>6.1.jdbc单表查询操作</h3><blockquote><p>ResultSet rs = stm.executeQuery(sql);</p></blockquote><p>JDBC通过statement执行sql后,会将查询的结果封装到ResultSet下;</p><h4 id="1-ResultSet的原理"><a href="#1-ResultSet的原理" class="headerlink" title="1) ResultSet的原理"></a>1) ResultSet的原理</h4><p>ResultSet类似之前学过的游标:</p><ol><li>ResultSet内部有一个指针,刚开始记录开始位置</li><li>调用next方法, ResultSet内部指针会移动到下一行数据</li><li>我们可以通过ResultSet得到一行数据 getXxx得到某列数据</li></ol><p>其实ResultSet获取数据的API是有规律的get后面加数据类型。我们统称<code>getXXX()</code></p><p>练习:完成对user表中所有数据的查询</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test7</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> ClassNotFoundException<span class="token punctuation">,</span> SQLException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.注册驱动</span>        Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.获取连接对象</span>        String url<span class="token operator">=</span><span class="token string">"jdbc:mysql:///day05_2"</span><span class="token punctuation">;</span>        String user<span class="token operator">=</span><span class="token string">"root"</span><span class="token punctuation">;</span>        String pwd<span class="token operator">=</span><span class="token string">"1234"</span><span class="token punctuation">;</span>        Connection conn <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> user<span class="token punctuation">,</span> pwd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.获取发送sql的对象</span>        Statement stm <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4.发送select语句</span>        String sql<span class="token operator">=</span><span class="token string">"select * from user"</span><span class="token punctuation">;</span>        ResultSet rs <span class="token operator">=</span> stm<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//5.解析结果集</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> id <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String username <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String password <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>id<span class="token operator">+</span>username<span class="token operator">+</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//6.关闭资源,释放连接</span>        rs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stm<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="6-2-jdbc查询小结"><a href="#6-2-jdbc查询小结" class="headerlink" title="6.2.jdbc查询小结"></a>6.2.jdbc查询小结</h3><p>1.jdbc查询使用步骤?</p><pre class=" language-sql"><code class="language-sql"><span class="token number">1</span><span class="token punctuation">)</span>注册驱动<span class="token number">2</span><span class="token punctuation">)</span>获取连接对象<span class="token number">3</span><span class="token punctuation">)</span>获取发送sql的对象Statement<span class="token punctuation">;</span><span class="token number">4</span><span class="token punctuation">)</span>发送sql<span class="token punctuation">,</span>获取结果集<span class="token punctuation">;</span> ResultSet rs<span class="token operator">=</span> stm<span class="token punctuation">.</span>executeQuery<span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">5</span><span class="token punctuation">)</span>解析结果集<span class="token punctuation">,</span>获取数据<span class="token number">6</span><span class="token punctuation">)</span>关闭资源<span class="token punctuation">,</span>释放连接<span class="token punctuation">(</span><span class="token number">3</span>个<span class="token keyword">close</span><span class="token punctuation">)</span></code></pre><p>2.ResultSet如何获取数据？</p><pre class=" language-sql"><code class="language-sql"><span class="token number">1</span><span class="token punctuation">)</span>调用<span class="token keyword">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法获取某一行的记录<span class="token number">2</span><span class="token punctuation">)</span>通过getXXX<span class="token punctuation">(</span>字段索引位<span class="token punctuation">)</span><span class="token punctuation">;</span>getXXX<span class="token punctuation">(</span>字段名称<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><hr style="height:10px;background-color:green;border:none;"><h2 id="7-编写JDBC工具类"><a href="#7-编写JDBC工具类" class="headerlink" title="7.编写JDBC工具类"></a>7.编写JDBC工具类</h2><p>练习:在src资源路径下创建jdbc.properties配置文件,并通过Properties类加载配置,实现参数加载</p><p>​        说明:1.添加配置文件 2.类加载器加载配置文件 3.Properties对象动态获取配置信息 4.初始化连接对象;</p><h3 id="1-创建jdbc-properties文件"><a href="#1-创建jdbc-properties文件" class="headerlink" title="1.创建jdbc.properties文件"></a>1.创建jdbc.properties文件</h3><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql:///day05_2</span><span class="token attr-name">user</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">pwd</span><span class="token punctuation">=</span><span class="token attr-value">1234</span><span class="token attr-name">driverClass</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.jdbc.Driver</span></code></pre><h3 id="2-封装工具类"><a href="#2-封装工具类" class="headerlink" title="2.封装工具类"></a>2.封装工具类</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JdbcUtil3</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 参数提取全局,方便修改维护     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String url<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String user<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String pwd<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String driverClass<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//驱动类只加载一次</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.加载配置文件,初始化数据库连接参数</span>        <span class="token comment" spellcheck="true">//new FileInputStream("src/jdbc.properties");</span>        InputStream in <span class="token operator">=</span> JdbcUtil3<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"jdbc.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Properties properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            properties<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>            url<span class="token operator">=</span>properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            user<span class="token operator">=</span>properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pwd<span class="token operator">=</span>properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"pwd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            driverClass<span class="token operator">=</span>properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"driverClass"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//1.注册驱动</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>driverClass<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取连接对象     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Connection <span class="token function">getConnction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//2.获取连接对象</span>        Connection conn<span class="token operator">=</span>null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            conn <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> user<span class="token punctuation">,</span> pwd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> throwables<span class="token punctuation">)</span> <span class="token punctuation">{</span>            throwables<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> conn<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3、-关闭资源"><a href="#3、-关闭资源" class="headerlink" title="3、 关闭资源"></a>3、 关闭资源</h3><p>关闭资源的顺序:1.ResultSet结果集 2.Statement 3.Connection</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * 释放资源,关闭连接     * @param rs     * @param stm     * @param conn     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span>ResultSet rs<span class="token punctuation">,</span> Statement stm<span class="token punctuation">,</span>Connection conn<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>rs<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                rs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"rs:"</span><span class="token operator">+</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>stm<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                stm<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"stm:"</span><span class="token operator">+</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>conn<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"conn:"</span><span class="token operator">+</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h3 id="7-2工具类优化后代用查询方法"><a href="#7-2工具类优化后代用查询方法" class="headerlink" title="7.2工具类优化后代用查询方法"></a>7.2工具类优化后代用查询方法</h3><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test8</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.获取连接对象</span>        Connection conn <span class="token operator">=</span> JdbcUtil3<span class="token punctuation">.</span><span class="token function">getConnction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.获取发送sql的对象</span>        Statement stm <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4.发送select语句</span>        String sql<span class="token operator">=</span><span class="token string">"select * from user"</span><span class="token punctuation">;</span>        ResultSet rs <span class="token operator">=</span> stm<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//5.解析结果集</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> id <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String username <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String password <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>id<span class="token operator">+</span>username<span class="token operator">+</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//关闭资源</span>        JdbcUtil3<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>rs<span class="token punctuation">,</span>stm<span class="token punctuation">,</span>conn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><hr style="height:10px;background-color:green;border:none;"><h2 id="8、JDBC事务"><a href="#8、JDBC事务" class="headerlink" title="8、JDBC事务"></a>8、JDBC事务</h2><h4 id="1-API介绍"><a href="#1-API介绍" class="headerlink" title="1.API介绍"></a>1.API介绍</h4><p>Connection接口与事务相关的核心API:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">setAutoCommit</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> autoCommit<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// true:自动提交 flase:手动提交</span><span class="token keyword">void</span> <span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//提交事务</span><span class="token keyword">void</span> <span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//回滚事务</span></code></pre><p>注意：</p><p> 在jdbc事务操作中，事务的控制都是通过Connection对象完成的，当一个完整的业务操作前，我们首先使用<strong>conn.setAutoCommit(false)<strong>来设置事务手动提交。</strong>默认情况下是true的，表示自动提交事务</strong>，那么一条sql语句就是一个事务，默认提交事务。如果设置为false，那么表示开启事务，所有的sql语句就会都在一个事务中。</p><p>​      当业务操作完成之后，如果整个操作没有问题，我们需要使用conn.commit()来提交事务。当然了，如果出现了异常，我们需要使用conn.rollback()撤销所有的操作，所以出现异常，需要进行事务的回滚。</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * 需求：以a给b转账100业务为例；     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test9</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.获取连接对象</span>        Connection conn <span class="token operator">=</span> JdbcUtil3<span class="token punctuation">.</span><span class="token function">getConnction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Statement stm<span class="token operator">=</span>null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//2.设置事务手动提交</span>            conn<span class="token punctuation">.</span><span class="token function">setAutoCommit</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//3.获取发送sql对象Statement</span>            stm <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//4.发送sql</span>            String out<span class="token operator">=</span><span class="token string">"update account set money=money-100 where name='a'"</span><span class="token punctuation">;</span>            String in<span class="token operator">=</span><span class="token string">"update account set money=money+100 where name='b'"</span><span class="token punctuation">;</span>            stm<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>            stm<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//5.事务提交</span>            conn<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//回滚</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                conn<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> throwables<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>throwables<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>             JdbcUtil3<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span>stm<span class="token punctuation">,</span>conn<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h2 id="9、PreparedStatement对象"><a href="#9、PreparedStatement对象" class="headerlink" title="9、PreparedStatement对象"></a>9、PreparedStatement对象</h2><h3 id="1-获取PreparedStatement对象"><a href="#1-获取PreparedStatement对象" class="headerlink" title="1.获取PreparedStatement对象"></a>1.获取PreparedStatement对象</h3><p>PreparedStatement是Statement的子接口，可以防止sql注入问题。可以通过Connection接口中的prepareStatement(sql)方法获得PreparedStatement的对象。</p><p>方法如下所示：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//创建一个 PreparedStatement 对象来将参数化的 SQL 语句发送到数据库&amp;nbsp;</span>PreparedStatement    <span class="token function">prepareStatement</span><span class="token punctuation">(</span>String<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>注意：sql提前创建好的。sql语句中需要参数。使用<strong>？</strong>进行占位。</p><p>举例：</p><p>select *from user where username=’zhangsan’ and password = ‘123456’;</p><p><strong>使用？进行占位</strong></p><p>select *from user where username=? and password = ?;</p><pre class=" language-markdown"><code class="language-markdown">步骤一：PreparedStatement  pstmt =  conn.prepareStatement(sql); -----需要你事先传递sql模板。如果sql需要参数，使用？进行占位。步骤二：设置参数（执行sql之前）：pstmt.setXXX(int index, 要放入的值) -----根据不同类型的数据进行方法的选择。第一个参数index表示的是？出现的位置。<span class="token bold"><span class="token punctuation">**</span>从1开始计数，有几个问号，就需要传递几个参数<span class="token punctuation">**</span></span>。方法的参数说明：第一个参数：int index ;表示的是问号出现的位置。 问号是从1开始计数第二个参数：给问号的位置传入的值。步骤三、执行，不需要在传递sql了。   pstmt.executeQuery();---执行select   pstmt.executeUpdate();---执行insert，delete，update</code></pre><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * **练习: 预编译实现插入用户名 liuyan ，密码123.**     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test13</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>        Connection conn <span class="token operator">=</span> JdbcUtil3<span class="token punctuation">.</span><span class="token function">getConnction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取预编译对象</span>        String sql<span class="token operator">=</span><span class="token string">"insert into user values(null,?,?)"</span><span class="token punctuation">;</span>        PreparedStatement pstm <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置参数</span>        pstm<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"liuyan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pstm<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//发送参数,执行sql</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> pstm<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//释放资源</span>        JdbcUtil3<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span>pstm<span class="token punctuation">,</span>conn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>小结:</p><pre class=" language-tex"><code class="language-tex">1)statement与PreparedStatement区别?statement sql不进行预编译,有sql注入的风险;PreparedStatement sql进行预编译,防止sql注入;</code></pre><h2 id="10、jdbc调用存储过程"><a href="#10、jdbc调用存储过程" class="headerlink" title="10、jdbc调用存储过程"></a>10、jdbc调用存储过程</h2><p>JDBC调用存储过程API:</p><p>1）获取连接Connection的对象</p><p>2）使用连接Connection的对象调用连接Connection的对象接口中的方法获取CallableStatement接口对象</p><pre class=" language-JAVA"><code class="language-JAVA"> CallableStatement prepareCall(String sql) 创建一个 CallableStatement 对象来调用数据库存储过程。      参数：        sql - 可以包含一个或多个 '?' 参数占位符的 SQL 语句。通常此语句是使用 JDBC 调用转义语法指定的。         说明：参数sql中书写的是存储过程语句，语法是固定的写法：             1）带参数的存储过程写法：             String sql="{call 存储过程名(?,?, ...)}";                IN 参数值是使用继承自 PreparedStatement 的 set 方法设置的.                    从左向右第一个占位符编号是 1，第二个占位符编号是2，依次递增。              void setString(int parameterIndex, String x)将指定参数设置为给定Java String 值。               void setInt(int parameterIndex, int x)  将指定参数设置为给定 Java int 值。                  参数：parameterIndex表示第几个占位符 x 表示给占位符赋的实际值             在执行存储过程之前，必须注册所有 OUT 参数的类型。注册参数类型使用registerOutParameter                 方法来完成的。                void registerOutParameter(int parameterIndex, int sqlType)                       按顺序位置 parameterIndex 将 OUT 参数注册为 JDBC 类型 sqlType。                              参数：                        parameterIndex：第一个参数是 1，第二个参数是 2，依此类推                        sqlType：java.sql.Types 定义的 JDBC 类型代码。例如：Types.INTEGER              语句执行完后，CallableStatement的getXXX方法将取回参数值:                 int getInt(int parameterIndex) 以 Java 编程语言中 int 值的形式获取指定的 JDBC                     INTEGER 参数的值。                      参数：表示获取的值属于第几个占位符，上述占位符中属于第四个，所以这里写4                            2)　不带参数的储存过程的语法：            String sql="{call 存储过程名}"; </code></pre><p>3）使用CallableStatement接口的父接口PreparedStatement的方法执行存储过程的sql语句：</p><pre class=" language-java"><code class="language-java"> <span class="token keyword">boolean</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 在此 PreparedStatement 对象中执行 SQL 语句，该语句可以是任何种类的 SQL 语句。 </code></pre><p>4)使用CallableStatement的getXXX方法获取回参数值:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> <span class="token function">getInt</span><span class="token punctuation">(</span><span class="token keyword">int</span> parameterIndex<span class="token punctuation">)</span> 以 Java 编程语言中 <span class="token keyword">int</span> 值的形式获取指定的 JDBC的INTEGER 参数的值。     参数：表示获取的值属于第几个占位符，上述占位符中属于第四个，所以这里写<span class="token number">4</span></code></pre><p>5）输出存储过程的结果</p><p>6）释放资源</p><p>数据准备:</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">/*    参数：        fromSub 从哪位用户转账        toSub 转给的用户        m 转账金额        flag 标记，1表示转账成功  0表示转账失败*/</span><span class="token comment" spellcheck="true">-- 存储过程sql</span><span class="token keyword">DELIMITER</span> $<span class="token keyword">CREATE</span>  <span class="token keyword">procedure</span> transfer<span class="token punctuation">(</span><span class="token operator">in</span> fromSub <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">in</span> toSub <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">in</span> m <span class="token keyword">FLOAT</span><span class="token punctuation">,</span><span class="token keyword">OUT</span> flag <span class="token keyword">INT</span><span class="token punctuation">)</span><span class="token keyword">BEGIN</span>        <span class="token comment" spellcheck="true">-- i1变量存储转出账的ROW_COUNT()结果</span>        <span class="token keyword">declare</span> i1 <span class="token keyword">INT</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">-- i2变量存储转入账的ROW_COUNT()结果</span>        <span class="token keyword">declare</span> i2 <span class="token keyword">INT</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">START</span> <span class="token keyword">TRANSACTION</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">-- 转出账 扣钱</span>        <span class="token keyword">UPDATE</span> account <span class="token keyword">SET</span> money <span class="token operator">=</span> money <span class="token operator">-</span> m <span class="token keyword">WHERE</span> name<span class="token operator">=</span>fromSub<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">-- 将ROW_COUNT()即上次修改影响的行数1保存到变量i1中</span>        <span class="token keyword">SELECT</span> ROW_COUNT<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">INTO</span> i1<span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">-- 转入账 </span>        <span class="token keyword">UPDATE</span> account <span class="token keyword">SET</span> money <span class="token operator">=</span> money <span class="token operator">+</span> m <span class="token keyword">WHERE</span> name<span class="token operator">=</span>toSub<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">-- 将ROW_COUNT()即上次修改影响的行数1保存到变量i2中</span>        <span class="token keyword">SELECT</span> ROW_COUNT<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">INTO</span> i2<span class="token punctuation">;</span>        <span class="token keyword">IF</span> i1<span class="token operator">></span><span class="token number">0</span> <span class="token operator">AND</span> i2<span class="token operator">></span><span class="token number">0</span> <span class="token keyword">THEN</span>                <span class="token comment" spellcheck="true">-- 提交事务</span>                <span class="token keyword">COMMIT</span><span class="token punctuation">;</span>                <span class="token keyword">SET</span> flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">ELSE</span>                <span class="token comment" spellcheck="true">-- 回滚事务</span>                <span class="token keyword">ROLLBACK</span><span class="token punctuation">;</span>                <span class="token keyword">SET</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">END</span> <span class="token keyword">IF</span><span class="token punctuation">;</span>        <span class="token keyword">SELECT</span> CONCAT<span class="token punctuation">(</span>i1<span class="token punctuation">,</span>'<span class="token comment" spellcheck="true">---',i2);        </span><span class="token keyword">END</span> $<span class="token comment" spellcheck="true">-- mysql调用存储过程</span><span class="token keyword">call</span> transfer<span class="token punctuation">(</span><span class="token string">'tom'</span><span class="token punctuation">,</span><span class="token string">'rose'</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token variable">@flag</span><span class="token punctuation">)</span>$</code></pre><p>练习:JDBC代码调用存储过程实现转账业务;</p><pre class=" language-sql"><code class="language-sql">    <span class="token comment" spellcheck="true">/**     * 练习:JDBC代码调用存储过程实现转账业务;     */</span>    <span class="token variable">@Test</span>    <span class="token keyword">public</span> void test15<span class="token punctuation">(</span><span class="token punctuation">)</span> throws SQLException {        Connection conn <span class="token operator">=</span> JdbcUtil3<span class="token punctuation">.</span>getConnction<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取存储过程的预编译对象</span>        String sql<span class="token operator">=</span><span class="token string">"{call transfer(?,?,?,?)}"</span><span class="token punctuation">;</span>        CallableStatement cstm <span class="token operator">=</span> conn<span class="token punctuation">.</span>prepareCall<span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置入参</span>        cstm<span class="token punctuation">.</span>setString<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cstm<span class="token punctuation">.</span>setString<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cstm<span class="token punctuation">.</span>setFloat<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">200f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//注册出参</span>        cstm<span class="token punctuation">.</span>registerOutParameter<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token keyword">Types</span><span class="token punctuation">.</span><span class="token keyword">INTEGER</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//发送参数,调用存储过程</span>        cstm<span class="token punctuation">.</span><span class="token keyword">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取出参</span>        <span class="token keyword">int</span> flag <span class="token operator">=</span> cstm<span class="token punctuation">.</span>getInt<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span><span class="token keyword">out</span><span class="token punctuation">.</span>println<span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//释放资源</span>        JdbcUtil3<span class="token punctuation">.</span><span class="token keyword">close</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span>cstm<span class="token punctuation">,</span>conn<span class="token punctuation">)</span><span class="token punctuation">;</span>    }</code></pre><hr style="height:10px;background-color:green;border:none;"><h2 id="11、连接池"><a href="#11、连接池" class="headerlink" title="11、连接池"></a>11、连接池</h2><h3 id="1、c3p0"><a href="#1、c3p0" class="headerlink" title="1、c3p0"></a>1、c3p0</h3><h4 id="2-C3P0常用的配置参数解释"><a href="#2-C3P0常用的配置参数解释" class="headerlink" title="2)C3P0常用的配置参数解释"></a>2)C3P0常用的配置参数解释</h4><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>driverClass</td><td>数据库驱动类。例如：com.mysql.jdbc.Driver</td></tr><tr><td>jdbcUrl</td><td>连接数据库的url地址。例如：jdbc:mysql://localhost:3306/day05_db</td></tr><tr><td>user</td><td>连接数据库的用户名。例如：root</td></tr><tr><td>password</td><td>连接数据库的密码。例如：1234</td></tr><tr><td>initialPoolSize</td><td>刚创建好连接池的时候连接数量</td></tr><tr><td>maxPoolSize</td><td>连接池中最多可以放多少个连接</td></tr></tbody></table><h4 id="3-API介绍"><a href="#3-API介绍" class="headerlink" title="3)API介绍"></a>3)API介绍</h4><p><code>com.mchange.v2.c3p0.ComboPooledDataSource</code>类表示C3P0的连接池对象，常用2种创建连接池的方式：</p><p><code>1.无参构造，使用默认配置</code>，</p><p><code>2.有参构造，使用命名配置</code></p><ol><li><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">ComboPooledDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span>无参构造使用默认配置（使用xml中<span class="token keyword">default</span><span class="token operator">-</span>config标签中对应的参数）</code></pre></li><li><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">ComboPooledDataSource</span><span class="token punctuation">(</span>String configName<span class="token punctuation">)</span>有参构造使用命名配置（configName：xml中配置的名称，使用xml中named<span class="token operator">-</span>config标签中对应的参数）</code></pre></li><li><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Connection <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException从连接池中取出一个连接</code></pre></li></ol><h4 id="4-使用步骤"><a href="#4-使用步骤" class="headerlink" title="4)使用步骤"></a>4)使用步骤</h4><p>1.导入jar包<code>c3p0-0.9.1.2.jar</code></p><p><img src="https://i.loli.net/2021/09/02/ytBxZSiIChLkulb.png" alt="1604479969612"></p><p>2.编写<code>c3p0-config.xml</code>配置文件，配置对应参数</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>c3p0-config</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--默认加载的数据库配置信息--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>default-config</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClass<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>com.mysql.jdbc.Driver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbcUrl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>jdbc:mysql:///day05_2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>root<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1234<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>initialPoolSize<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>maxPoolSize<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>20<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>default-config</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 自定义数据库环境--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>named-config</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClass<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>com.mysql.jdbc.Driver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbcUrl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>jdbc:mysql:///day05_3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>root<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1234<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>initialPoolSize<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>maxPoolSize<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>20<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>named-config</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>c3p0-config</span><span class="token punctuation">></span></span></code></pre><p>3.将配置文件放在src目录下</p><p><img src="https://i.loli.net/2021/09/02/4iacx5XP6BJjKtU.png" alt="1604480612382"></p><p>4.创建<strong>连接池对象<code>ComboPooledDataSource</code>，</strong>使用默认配置或命名配置</p><pre class=" language-java"><code class="language-java">        <span class="token comment" spellcheck="true">//创建数据源(连接池对象)对象，自动加载src根路径下c3p0-config.xml</span>        ComboPooledDataSource dataSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ComboPooledDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>5.从连接池中获取连接对象</p><pre class=" language-java"><code class="language-java">        <span class="token comment" spellcheck="true">//获取连接对象</span>        Connection conn <span class="token operator">=</span> dataSource<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>6.使用连接对象操作数据库,查询表中所有数据并输出到控制台。</p><pre class=" language-java"><code class="language-java">        <span class="token comment" spellcheck="true">//3)创建发送sql的对象</span>        Statement stm <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4)发送sql语句，获取ResultSet结果集</span>        String selectSql<span class="token operator">=</span><span class="token string">"select * from user"</span><span class="token punctuation">;</span>        ResultSet rs <span class="token operator">=</span> stm<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>selectSql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//5)解析结果集</span>        ArrayList<span class="token operator">&lt;</span>User<span class="token operator">></span> users <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> id<span class="token operator">=</span>rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String name<span class="token operator">=</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String password<span class="token operator">=</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            user<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>            user<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>            user<span class="token punctuation">.</span><span class="token function">setUserName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            users<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>6.关闭资源，归还连接</p><pre class=" language-java"><code class="language-java">        <span class="token comment" spellcheck="true">//6)close 归还连接对象到连接池</span>        rs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stm<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><p>C3P0配置文件名称必须为<code>c3p0-config.xml</code><br>C3P0命名配置可以有多个</p><h3 id="16-4-Druid连接池"><a href="#16-4-Druid连接池" class="headerlink" title="16.4 Druid连接池"></a>16.4 Druid连接池</h3><h4 id="1-Druid简介"><a href="#1-Druid简介" class="headerlink" title="1)Druid简介"></a>1)Druid简介</h4><p>​    Druid是阿里巴巴开发的号称为监控而生的数据库连接池(可以监控访问数据库的性能)<strong>，Druid是目前最好的数据库连接池</strong>。在功能、性能、扩展性方面，都超过其他数据库连接池。Druid已经在阿里巴巴部署了超过600个应用，经过一年多生产环境大规模部署的严苛考验。如：一年一度的双十一活动，每年春运的抢火车票。</p><pre class=" language-tex"><code class="language-tex">Druid的下载地址：<https://github.com/alibaba/druid>  Druid连接池使用的jar包：druid-1.0.9.jar</code></pre><h4 id="2-Druid常用的配置参数"><a href="#2-Druid常用的配置参数" class="headerlink" title="2)Druid常用的配置参数"></a>2)Druid常用的配置参数</h4><table><thead><tr><th><strong>url</strong></th><th><strong>数据库</strong>连接字符串<strong>jdbc:mysql://localhost:3306/数据库名</strong></th></tr></thead><tbody><tr><td><strong>username</strong></td><td><strong>数据库的用户名</strong></td></tr><tr><td><strong>password</strong></td><td><strong>数据库的密码</strong></td></tr><tr><td><strong>driverClassName</strong></td><td><strong>驱动类名。根据url自动识别，这一项可配可不配，如果不配置druid会根据url自动识别数据库的类型，然后选择相应的数据库驱动名</strong></td></tr><tr><td><strong>initialSize</strong></td><td><strong>初始化时建立的物理连接的个数。初始化发生在显式调用init方法，或者第一次获取连接对象时</strong></td></tr><tr><td><strong>maxActive</strong></td><td><strong>连接池中最大连接数</strong></td></tr><tr><td><strong>maxWait</strong></td><td><strong>获取连接时最长等待时间，单位是毫秒。</strong></td></tr></tbody></table><h4 id="3-Druid连接池基本使用"><a href="#3-Druid连接池基本使用" class="headerlink" title="3)Druid连接池基本使用"></a>3)Druid连接池基本使用</h4><h5 id="API介绍-2"><a href="#API介绍-2" class="headerlink" title="API介绍"></a>API介绍</h5><p>核心类：<strong>DruidDataSourceFactory</strong></p><p>获取数据源的方法：使用<strong>com.alibaba.druid.pool.DruidDataSourceFactory</strong>类中的静态方法：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> DataSource <span class="token function">createDataSource</span><span class="token punctuation">(</span>Properties properties<span class="token punctuation">)</span><span class="token operator">--</span> 创建一个连接池，连接池的参数使用properties中的数据</code></pre><p>配置信息在properties属性对象中。</p><p>我们可以看到Druid连接池在创建的时候需要一个Properties对象来设置参数，所以我们使用properties文件来保存对应的参数。</p><p>Druid连接池的配置文件名称随便，放到src目录或者项目根目录下面加载<br><code>druid.properties</code>文件内容：</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># 数据库连接参数</span><span class="token attr-name">url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost:3306/day05_db</span><span class="token attr-name">username</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">password</span><span class="token punctuation">=</span><span class="token attr-value">123</span><span class="token attr-name">driverClassName</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.jdbc.Driver</span></code></pre><h4 id="4-使用步骤-1"><a href="#4-使用步骤-1" class="headerlink" title="4)使用步骤"></a>4)使用步骤</h4><ol><li>导入核心包druid-1.0.9.jar</li></ol><p><img src="https://i.loli.net/2021/09/02/XgTbLcVoeCEhwWt.png" alt="1604481946087"></p><ol start="2"><li>在项目下创建一个properties文件，文件名随意，设置对应参数</li></ol><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># 数据库连接参数</span><span class="token attr-name">url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost:3306/day05_2</span><span class="token attr-name">username</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">password</span><span class="token punctuation">=</span><span class="token attr-value">1234</span><span class="token attr-name">driverClassName</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.jdbc.Driver</span></code></pre><ol start="3"><li>加载properties文件的内容到Properties对象中</li></ol><pre class=" language-java"><code class="language-java">        <span class="token comment" spellcheck="true">//加载properties文件构建配置对象</span>        InputStream in <span class="token operator">=</span> DruidTest<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"druid.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Properties properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        properties<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol start="4"><li>创建DRUID连接池，使用配置文件中的参数</li></ol><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">//使用DruidDataSourceFactory工厂类构建连接池对象</span>        DataSource dataSource <span class="token operator">=</span> DruidDataSourceFactory<span class="token punctuation">.</span><span class="token function">createDataSource</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol start="5"><li>从DRUID连接池中取出连接</li></ol><pre class=" language-java"><code class="language-java">        <span class="token comment" spellcheck="true">//获取连接对象</span>        Connection conn <span class="token operator">=</span> dataSource<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol start="6"><li><p>执行SQL语句</p></li><li><p>关闭资源,归还连接</p></li></ol><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//6.归还资源</span>conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>案例代码:</p><p>步骤1:属性文件：在项目下新建一个druid配置文件，命名为：druid.properties </p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql:///day05_1</span><span class="token attr-name">username</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">password</span><span class="token punctuation">=</span><span class="token attr-value">1234</span><span class="token attr-name">driverClassName</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.jdbc.Driver</span><span class="token attr-name">initialSize</span><span class="token punctuation">=</span><span class="token attr-value">5</span></code></pre><p>步骤2:java代码:</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//加载properties文件构建配置对象</span>        InputStream in <span class="token operator">=</span> DruidTest<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"druid.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Properties properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        properties<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取连接池对象</span>        DataSource dataSource <span class="token operator">=</span> DruidDataSourceFactory<span class="token punctuation">.</span><span class="token function">createDataSource</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取连接对象</span>        Connection conn <span class="token operator">=</span> dataSource<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.获取发送sql的对象</span>        Statement stm <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4.发送select语句</span>        String sql<span class="token operator">=</span><span class="token string">"select * from user"</span><span class="token punctuation">;</span>        ResultSet rs <span class="token operator">=</span> stm<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//5.解析结果集</span>        ArrayList<span class="token operator">&lt;</span>User<span class="token operator">></span> users <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> id <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String username <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String password <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            user<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>            user<span class="token punctuation">.</span><span class="token function">setUserName</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>            user<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>            users<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用close归还连接对象</span>        rs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stm<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><hr style="height:10px;background-color:green;border:none;"><p>总结：</p><pre class=" language-tex"><code class="language-tex">1)jdbc开发流程：  1.注册驱动    Class.forName(驱动类的全限定名称);  2.获取连接对象    conn=DriverManager.getConnection(url,user,pwd);  3.获取发送sql的对象    pstm= conn.prepareStatement(sql模板);//防止sql注入    stm=conn.createStatement();//会有sql注入的问题    CallableStatement cstm=conn.prepareCall("{call 存储过程名称（？，？，...）}");  4.发送参数或者sql    1）发送sql: executeQuery(sql);// select               executeUpdate(sql);// insert delete update               execute();    2)发送参数              //设置参数              比如：pstm.setXX(参数索引位，值)；              executeQuery();              executeUpdate();   5.结果相应         1）返回受影响的行数         2）返回结果集ResultSet                next();true/false                getXX(字段索引位，从1开始);                getXX(字段名称);    6.释放资源，关闭连接      rs.close();      stm.close();      conn.close();2)jdbc之事务  jdbc默认事务自动提交；  conn.setAutoCommit(false);//设置事务手动提交  conn.commit();  conn.rollback();3)连接池  常用的参数：    1）数据库的4大参数-- url driverclass user pwd    2) 初始化大小 最大连接数 最小连接数 等待时间等              </code></pre><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><h3 id="1-什么是jdbc"><a href="#1-什么是jdbc" class="headerlink" title="1.什么是jdbc?"></a>1.什么是jdbc?</h3><pre class=" language-tex"><code class="language-tex">jdbc就是java操纵数据库的接口规范，具体的实现由不同的数据库厂商去实现；对我开发人员来说，只关注接口提供的功能即可；说白了，jdbc就是java连接数据库的一个桥梁；</code></pre><h3 id="2-以查询为例，jdbc开发流程？"><a href="#2-以查询为例，jdbc开发流程？" class="headerlink" title="2.以查询为例，jdbc开发流程？"></a>2.以查询为例，jdbc开发流程？</h3><pre class=" language-tex"><code class="language-tex">1.注册驱动    3种注册方式：        显示注册： DriverManager.registerDriver(new Driver());                弊端：会导致驱动对象被注册2次，浪费内存；        隐式注册： Class.forName(com.mysql.jdbc.Driver"");                好处：驱动对象只注册一次        自动注册： 基于Java的SPI机制，自动注册2.获取连接对象    Connection conn= DriverManger.getConnection(url,userName,password);         关注点：url格式===》jdbc:mysql://ip:端口/数据库名称3.获取发送SQL语句的对象     Statement stm=conn.createStatement();4.发送sql    增删改： int count= stm.executeUpdate(sql);返回受影响的行数    查询：ResultSet rs=stm.executeQuery(sql);返回结果集，被ResultSet封装    ResultSet核心API:          boolean isHashNextLine=rs.next();//如果有下一行，返回true,否则返回false         rs.getXXX(字段索引位)或者rs.getXXX(字段名称)；//字段索引位从1开始5.释放资源，关闭连接    3个close;        rs.close();        stm.close();        conn.close();</code></pre><h3 id="3-预编译对象PreparedStatement"><a href="#3-预编译对象PreparedStatement" class="headerlink" title="3.预编译对象PreparedStatement"></a>3.预编译对象PreparedStatement</h3><p>好处：1.避免了SQL注入 2.提高了SQL的复用性；</p><p>使用流程：</p><pre class=" language-sql"><code class="language-sql">PreparedStatement pstm<span class="token operator">=</span>conn<span class="token punctuation">.</span>prepareStatement<span class="token punctuation">(</span>SQL模板<span class="token punctuation">)</span>SQL模板中参数以问号？作为占位符，问号是第几个，那么入参的索引位就是几；eg:<span class="token keyword">select</span> <span class="token operator">*</span><span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> name<span class="token operator">=</span>? <span class="token operator">and</span> password<span class="token operator">=</span>?<span class="token punctuation">;</span>设置参数pstm<span class="token punctuation">.</span>setXXX<span class="token punctuation">(</span>参数索引位，参数值<span class="token punctuation">)</span><span class="token punctuation">;</span>执行查询<span class="token keyword">int</span> count<span class="token operator">=</span>pstm<span class="token punctuation">.</span>executeUpdate（）；返回值表示受影响行数ResultSet rs<span class="token operator">=</span> pstm<span class="token punctuation">.</span>executeQuery<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><table><thead><tr><th>比较</th><th>StatemenT</th><th>pREPAREDsTATEMENT(预编译对象)</th></tr></thead><tbody><tr><td>是否SQL注入</td><td>有</td><td>无</td></tr><tr><td>是否预编译</td><td>无</td><td>有</td></tr><tr><td>执行效率</td><td>单个SQL执行，效率较高</td><td>相同的SQL多次执行，效率较高</td></tr></tbody></table><h3 id="4-连接池"><a href="#4-连接池" class="headerlink" title="4.连接池"></a>4.连接池</h3><p>好处：避免了连接对象被反复的创建与销毁带来的性能开销；</p><h4 id="1-C3P0"><a href="#1-C3P0" class="headerlink" title="1.C3P0"></a>1.C3P0</h4><pre class=" language-SQL"><code class="language-SQL">1.导入依赖包：c3p0-0.9.1.2.jar、mchange-commons-java-0.2.12.jar2.定义xml配置文件（名字必须叫c3p0-config.xml，而且存放在类的根路径下）   配置：<default-config>内部的配置，默认被加载3.构建连接池对象     ComboPooledDataSource dataSource = new ComboPooledDataSource();      Connection conn = dataSource.getConnection();</code></pre><h4 id="2-Druid"><a href="#2-Druid" class="headerlink" title="2.Druid"></a>2.Druid</h4><pre class=" language-sql"><code class="language-sql"><span class="token number">1</span><span class="token punctuation">.</span>导入jar资源：druid<span class="token number">-1.0</span><span class="token punctuation">.</span><span class="token number">9</span><span class="token punctuation">.</span>jar<span class="token number">2</span><span class="token punctuation">.</span>配置数据源的连接参数，一般配置在properties文件中：    username<span class="token operator">=</span>root    password<span class="token operator">=</span>root    url<span class="token operator">=</span>jdbc:mysql:<span class="token comment" spellcheck="true">//192.168.188.130:3306/day05_1</span>    driverClassName<span class="token operator">=</span>com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>Driver    注意：<span class="token keyword">key</span>不能乱写<span class="token number">3</span><span class="token punctuation">.</span>将配置文件转化成文件流对象，然后被Proerties对象<span class="token keyword">load</span>加载，然后最终被连接池工厂加载，构建连接池对象；        DataSource dataSource <span class="token operator">=</span> DruidDataSourceFactory<span class="token punctuation">.</span>createDataSource<span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>        Connection conn <span class="token operator">=</span> dataSource<span class="token punctuation">.</span>getConnection<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JDBC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDBC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>03 函数-索引-事务-视图+触发器</title>
      <link href="/2020/03/15/%E6%95%B0%E6%8D%AE%E5%BA%93-%E7%B4%A2%E5%BC%95-%E4%BA%8B%E5%8A%A1-%E8%A7%86%E5%9B%BE+%E8%A7%A6%E5%8F%91%E5%99%A8/"/>
      <url>/2020/03/15/%E6%95%B0%E6%8D%AE%E5%BA%93-%E7%B4%A2%E5%BC%95-%E4%BA%8B%E5%8A%A1-%E8%A7%86%E5%9B%BE+%E8%A7%A6%E5%8F%91%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="第一章-MySQL常用函数-理解"><a href="#第一章-MySQL常用函数-理解" class="headerlink" title="第一章 MySQL常用函数(理解)"></a>第一章 MySQL常用函数(理解)</h2><h3 id="1-1-字符串和数字函数"><a href="#1-1-字符串和数字函数" class="headerlink" title="1.1.字符串和数字函数"></a>1.1.字符串和数字函数</h3><h4 id="1-字符串函数"><a href="#1-字符串函数" class="headerlink" title="1)字符串函数"></a>1)字符串函数</h4><table><thead><tr><th>函数</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>CHAR_LENGTH(s)</td><td>返回字符串 s 的字符数</td><td>SELECT CHAR_LENGTH(‘itheima’) AS ‘长度’;</td></tr><tr><td><strong>CONCAT(s1,s2,…,sn)</strong></td><td>字符串 s1,s2 等多个字符串合并为一个字符串</td><td>SELECT CONCAT(‘I’,’love’,’you’);</td></tr><tr><td>LOWER(s)</td><td>将字符串 s 的所有字母变成小写字母</td><td>SELECT LOWER(‘ITHEIMA’);</td></tr><tr><td>UPPER(s)</td><td>将字符串转换为大写</td><td>SELECT UPPER(“itheima”);</td></tr><tr><td>SUBSTR(s,  start,length)</td><td>从字符串 s 的 start 位置(<strong>从1开始</strong>)截取长度为 length 的子字符串</td><td>SELECT SUBSTR(“itheima”,1,2);</td></tr><tr><td><strong>TRIM(s)</strong></td><td>去掉字符串 s 开始和结尾处的空格</td><td>SELECT TRIM(‘ itheima ‘)</td></tr></tbody></table><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 获取字符的长度</span><span class="token keyword">select</span> ename<span class="token punctuation">,</span>char_length<span class="token punctuation">(</span>ename<span class="token punctuation">)</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span><span class="token keyword">select</span> char_length<span class="token punctuation">(</span><span class="token string">'laofang'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 7</span><span class="token comment" spellcheck="true">-- 字符串拼接</span><span class="token keyword">select</span> concat<span class="token punctuation">(</span><span class="token string">'{ename:'</span><span class="token punctuation">,</span>ename<span class="token punctuation">,</span><span class="token string">',job:'</span><span class="token punctuation">,</span>job<span class="token punctuation">,</span><span class="token string">',sal:'</span><span class="token punctuation">,</span>sal<span class="token punctuation">,</span><span class="token string">'}'</span><span class="token punctuation">)</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 转小写</span><span class="token keyword">select</span> lower<span class="token punctuation">(</span><span class="token string">'FangJiCai'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- fangjicai</span><span class="token comment" spellcheck="true">-- 转大写</span><span class="token keyword">select</span> upper<span class="token punctuation">(</span><span class="token string">'FangJiCai'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- FANGJICAI</span><span class="token comment" spellcheck="true">-- 截取字符串长度</span><span class="token keyword">select</span> substr<span class="token punctuation">(</span><span class="token string">'wubolin'</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- bo</span><span class="token comment" spellcheck="true">-- 去除字符串两边的空格</span><span class="token keyword">select</span> trim<span class="token punctuation">(</span><span class="token string">'    si qing  zhen   '</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- si qing  zhen</span></code></pre><h4 id="2-数字函数"><a href="#2-数字函数" class="headerlink" title="2)数字函数"></a>2)数字函数</h4><table><thead><tr><th>函数</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>RAND()</td><td>返回 0 到 1 的随机数</td><td>SELECT RAND();</td></tr><tr><td><strong>ROUND</strong>(小数 , 小数点后保留小数位数)</td><td>四舍五入保留几位小数</td><td>SELECT ROUND(3.1415926,2) ;</td></tr><tr><td>TRUNCATE(小数 , 小数点后保留小数位数)</td><td>不会四舍五入保留几位小数</td><td>SELECT  TRUNCATE(3.1415926,3);</td></tr><tr><td>LEAST(expr1, expr2, expr3, …)</td><td>返回列表中的最小值</td><td>SELECT LEAST(13, 14, 521, 74, 1)</td></tr><tr><td>GREATEST(expr1,  expr2,expr3, …)</td><td>返回列表中的最大值</td><td>SELECT GREATEST(13, 14, 521, 74, 1)</td></tr></tbody></table><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 获取0到1的随机数</span><span class="token keyword">select</span> rand<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 四舍五入函数</span><span class="token keyword">select</span> <span class="token function">round</span><span class="token punctuation">(</span><span class="token number">3.1415926</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 3.142</span><span class="token comment" spellcheck="true">-- 数字截取,不做四舍五入</span><span class="token keyword">select</span> <span class="token keyword">truncate</span><span class="token punctuation">(</span><span class="token number">3.1415926</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 3.141</span><span class="token comment" spellcheck="true">-- 返回列表中的最小值</span><span class="token keyword">select</span> least<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 5</span><span class="token comment" spellcheck="true">-- 返回列表中的最大值</span><span class="token keyword">select</span> greatest<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 100</span></code></pre><hr style="height:10px;background-color:green;border:none;"><h3 id="1-2-日期函数和高级函数"><a href="#1-2-日期函数和高级函数" class="headerlink" title="1.2 日期函数和高级函数"></a>1.2 日期函数和高级函数</h3><h4 id="1-日期函数"><a href="#1-日期函数" class="headerlink" title="1)日期函数"></a>1)日期函数</h4><table><thead><tr><th align="left">函数名</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left"><strong>NOW()</strong> 和 SYSDATE()</td><td align="left">返回系统的当前日期和时间</td><td align="left">SELECT NOW(); 或 SELECT SYSDATE();</td></tr><tr><td align="left">CURDATE()</td><td align="left">返回当前日期</td><td align="left">SELECT CURDATE();</td></tr><tr><td align="left">CURTIME()</td><td align="left">返回当前系统时间</td><td align="left">SELECT CURTIME();</td></tr><tr><td align="left"><strong>YEAR(d)</strong></td><td align="left"><strong>返回d的中的年份</strong></td><td align="left"><strong>SELECT YEAR(NOW());</strong></td></tr><tr><td align="left"><strong>MONTH(d)</strong></td><td align="left">返回d的中的月份</td><td align="left">SELECT MONTH(NOW());</td></tr><tr><td align="left"><strong>DAY(d)</strong></td><td align="left">返回d中的日</td><td align="left">SELECT DAY(NOW());</td></tr></tbody></table><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 返回系统的当前日期和时间</span><span class="token keyword">select</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 2020-12-11 09:26:29</span><span class="token keyword">select</span> sysdate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 2020-12-11 09:26:29</span><span class="token comment" spellcheck="true">-- 返回当前日期</span><span class="token keyword">select</span> curdate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 2020-12-11 </span><span class="token comment" spellcheck="true">-- 返回当前系统时间</span><span class="token keyword">select</span> curtime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 09:27:08</span><span class="token comment" spellcheck="true">-- 返回年份</span><span class="token keyword">select</span> ename <span class="token keyword">from</span> emp <span class="token keyword">where</span> year<span class="token punctuation">(</span>hiredate<span class="token punctuation">)</span><span class="token operator">=</span><span class="token string">'1980'</span><span class="token punctuation">;</span><span class="token keyword">select</span> year<span class="token punctuation">(</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 2020</span><span class="token keyword">select</span> year<span class="token punctuation">(</span><span class="token string">'2019-01-01'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 2019</span><span class="token keyword">select</span> year<span class="token punctuation">(</span><span class="token string">'2019/01/01'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 2019</span><span class="token comment" spellcheck="true">-- 返回月份</span><span class="token keyword">select</span> month<span class="token punctuation">(</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 12</span><span class="token keyword">select</span> month<span class="token punctuation">(</span><span class="token string">'2019/01/01'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 1</span><span class="token comment" spellcheck="true">-- 返回日</span><span class="token keyword">select</span> day<span class="token punctuation">(</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 11</span><span class="token keyword">select</span> day<span class="token punctuation">(</span><span class="token string">'2019-01-01'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 1</span></code></pre><h4 id="2-高级函数"><a href="#2-高级函数" class="headerlink" title="2)高级函数"></a>2)高级函数</h4><table><thead><tr><th align="left">函数名</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">CURRENT_USER()</td><td align="left">返回当前用户</td><td align="left">SELECT CURRENT_USER();</td></tr><tr><td align="left"><a href="https://www.runoob.com/mysql/mysql-func-ifnull.html">IFNULL(v1,v2)</a></td><td align="left">如果 v1 的值不为 NULL，则返回 v1，否则返回 v2。</td><td align="left">SELECT IFNULL(null,’Hello Word’)</td></tr><tr><td align="left">ISNULL(expression)****</td><td align="left">判断表达式是否为 NULL,为空则为1,不为空则为0</td><td align="left">SELECT ISNULL(NULL);</td></tr></tbody></table><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 返回当前用户</span><span class="token keyword">select</span> <span class="token keyword">current_user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- root@localhost</span><span class="token comment" spellcheck="true">-- ifnull(v1,v2)如果 v1 的值不为 NULL，则返回 v1，否则返回 v2</span><span class="token keyword">select</span> ename<span class="token punctuation">,</span>ifnull<span class="token punctuation">(</span>comm<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">as</span> comm <span class="token keyword">from</span> emp<span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- isnull判断表达式是否为 NULL,为空则为1,不为空则为0</span><span class="token keyword">select</span> isnull<span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- true 1</span><span class="token keyword">select</span> isnull<span class="token punctuation">(</span><span class="token number">666</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- false 0</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 查询comm为null的用户有哪些</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> isnull<span class="token punctuation">(</span>comm<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><hr style="height:10px;background-color:green;border:none;"><h2 id="第二章-事务-掌握"><a href="#第二章-事务-掌握" class="headerlink" title="第二章 事务(掌握)"></a>第二章 事务(掌握)</h2><h3 id="2-1-事务介绍及操作"><a href="#2-1-事务介绍及操作" class="headerlink" title="2.1 事务介绍及操作"></a>2.1 事务介绍及操作</h3><h4 id="1-事务的概念"><a href="#1-事务的概念" class="headerlink" title="1)事务的概念"></a>1)事务的概念</h4><p>​      在实际的业务开发中，有些业务操作要多次访问数据库。<strong>一个业务要发送多条SQL语句给数据库执行。需要将多次访问数据库的操作视为一个整体来执行，要么所有的SQL语句全部执行成功。</strong>如果其中有一条SQL语句失败，就进行事务的回滚，所有的SQL语句全部执行失败。</p><p>简而言之，<strong>事务指的是逻辑上的一组操作,组成这组操作的各个单元要么全都成功,要么全都失败</strong>。</p><p> 事务作用：保证在一个事务中多次操作数据库表中数据时，要么全都成功,要么全都失败。</p><h4 id="2-事务的应用场景"><a href="#2-事务的应用场景" class="headerlink" title="2) 事务的应用场景"></a>2) 事务的应用场景</h4><p>​    1.转账业务:比如a给b转账,那么a扣款和b加款两部操作做要么都成功,要么都失败;</p><p>​    2.比如:学生管理系统中,要删除一个学生，那么需要删除学生的基本资料同时，也要删除和该学生相关的选课、成绩等信息;</p><h4 id="3-手动提交事务"><a href="#3-手动提交事务" class="headerlink" title="3)手动提交事务"></a>3)手动提交事务</h4><p>MYSQL中可以有两种方式进行事务的操作：</p><ol><li>手动提交事务：先开启，再提交</li><li>自动提交事务(<strong>默认的</strong>):即执行一条sql语句提交一次事务。</li></ol><p> 事务有关的SQL语句：</p><table><thead><tr><th>SQL语句</th><th>描述</th></tr></thead><tbody><tr><td>start transaction;</td><td>开启手动控制事务</td></tr><tr><td>commit;</td><td>提交事务</td></tr><tr><td>rollback;</td><td>回滚事务</td></tr></tbody></table><p>数据准备:</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true"># 创建账号表</span><span class="token keyword">create</span> <span class="token keyword">table</span> account<span class="token punctuation">(</span>    id <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">auto_increment</span><span class="token punctuation">,</span>    name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    money <span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 初始化数据</span><span class="token keyword">insert</span> <span class="token keyword">into</span> account <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> account <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>说明:</p><p>需求1:a给b转账100元,演示提交事务和回滚事务</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 需求1:a给b转账100元,演示提交事务</span><span class="token comment" spellcheck="true">-- 1.1.手动开启事务</span><span class="token keyword">start</span> <span class="token keyword">transaction</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 1.2. a扣款100</span><span class="token keyword">update</span> account <span class="token keyword">set</span> money<span class="token operator">=</span>money<span class="token number">-100</span> <span class="token keyword">where</span> name<span class="token operator">=</span><span class="token string">'a'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 1.3 b收款100</span><span class="token keyword">update</span> account <span class="token keyword">set</span> money<span class="token operator">=</span>money<span class="token operator">+</span><span class="token number">100</span> <span class="token keyword">where</span> name<span class="token operator">=</span><span class="token string">'b'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 1.4 事务提交</span><span class="token keyword">commit</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 需求2:a给b转账100元,演示回滚事务</span><span class="token comment" spellcheck="true">-- 1.1.手动开启事务</span><span class="token keyword">start</span> <span class="token keyword">transaction</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 1.2. a扣款100</span><span class="token keyword">update</span> account <span class="token keyword">set</span> money<span class="token operator">=</span>money<span class="token number">-100</span> <span class="token keyword">where</span> name<span class="token operator">=</span><span class="token string">'a'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 1.3 b收款100</span><span class="token keyword">update</span> account <span class="token keyword">set</span> money<span class="token operator">=</span>money<span class="token operator">+</span><span class="token number">100</span> <span class="token keyword">where</span> name<span class="token operator">=</span><span class="token string">'b'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 1.4 事务回滚</span><span class="token keyword">rollback</span><span class="token punctuation">;</span></code></pre><h4 id="4-自动提交事务"><a href="#4-自动提交事务" class="headerlink" title="4)自动提交事务"></a>4)自动提交事务</h4><p>  <strong>MySQL的每一条DML(增删改)语句都是一个单独的事务</strong>，每条语句都会自动开启一个事务，执行完毕自动提交事务，MySQL默认开始自动提交事务。</p><p>1.通过以下命令可以查看当前autocommit模式：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'%commit%'</span><span class="token punctuation">;</span></code></pre><p>2.设置自动提交的参数为OFF:</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">set</span> autocommit <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">-- 0:OFF  1:ON</span></code></pre><p>小结:</p><p>1.如何开启事务? </p><pre class=" language-sql"><code class="language-sql"><span class="token number">1</span><span class="token punctuation">)</span>mysql默认事务自动开启<span class="token punctuation">,</span>在进行增删改时<span class="token punctuation">,</span>无需手动提交<span class="token punctuation">;</span><span class="token number">2</span><span class="token punctuation">)</span>通过<span class="token keyword">start</span> <span class="token keyword">transaction</span>可以手动开启事务<span class="token punctuation">,</span>那么这个开启的事务就需要手动提交</code></pre><p>2.如何提交事务?</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">commit</span><span class="token punctuation">;</span></code></pre><p>3.如何回滚事务?</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">rollback</span><span class="token punctuation">;</span></code></pre><hr style="height:10px;background-color:green;border:none;"><h3 id="2-2-事务的回滚点和执行原理"><a href="#2-2-事务的回滚点和执行原理" class="headerlink" title="2.2 事务的回滚点和执行原理"></a>2.2 事务的回滚点和执行原理</h3><h4 id="1-回滚点介绍"><a href="#1-回滚点介绍" class="headerlink" title="1)回滚点介绍"></a>1)回滚点介绍</h4><p>上面的操作，如果回滚，直接回滚到事务开始前。有时我们只需要<strong>回滚到中间的某个位置</strong>，就可以设置回滚点。</p><p>语法:</p><table><thead><tr><th><strong>回滚点的操作语句</strong></th><th><strong>语句</strong></th></tr></thead><tbody><tr><td><strong>设置回滚点</strong></td><td>savepoint 名字</td></tr><tr><td><strong>回到回滚点</strong></td><td>rollback to 名字</td></tr></tbody></table><p>练习:</p><pre class=" language-tex"><code class="language-tex">1. 将数据还原到10002. 开启事务3. 让a用户先减100块4. 设置回滚点：savepoint itcast; 5. 然后让a用户再次减100块6. 回到回滚点：rollback to itcast7. 最后commit提交事务</code></pre><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 1.将数据还原到1000</span><span class="token comment" spellcheck="true">-- 2.开启事务</span><span class="token keyword">start</span> <span class="token keyword">transaction</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 3. 让a用户先减100块</span><span class="token keyword">update</span> account <span class="token keyword">set</span> money<span class="token operator">=</span>money<span class="token number">-100</span> <span class="token keyword">where</span> name<span class="token operator">=</span><span class="token string">'a'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 4. 设置回滚点：savepoint itcast; </span><span class="token keyword">savepoint</span> itcast<span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 5.然后让a用户再次减100块</span><span class="token keyword">update</span> account <span class="token keyword">set</span> money<span class="token operator">=</span>money<span class="token number">-100</span> <span class="token keyword">where</span> name<span class="token operator">=</span><span class="token string">'a'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 6. 回到回滚点：rollback to itcast</span><span class="token keyword">rollback</span> <span class="token keyword">to</span> itcast<span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 7. 最后commit提交事务</span><span class="token keyword">commit</span><span class="token punctuation">;</span></code></pre><h4 id="2-事务原理"><a href="#2-事务原理" class="headerlink" title="2)事务原理"></a>2)事务原理</h4><p><img src="https://gitee.com/ergou15154/drawing-bed/raw/master/source/image-20210902002115077.png" alt="image-20210902002115077"></p><p>说明:</p><pre class=" language-tex"><code class="language-tex">1)客户端连接mysql服务,服务端会对这个用户进行安全校验,通过后会创建一个临时的事务日志文件;2)当用户直接向数据库插入数据时(因为mysql默认事务自动提交),数据会直接刷入数据库;3)当用户调用start transaction命令手动开启事务时,事务相关的数据首先会写入这个临时的事务日志文件,然后当用户调用commit命令时,会将事务的数据刷入的数据库;4)当用户进行事务的回滚时,会直接清空这个临时的事务日志文件(redo.log,undo.log,binlog);5)当一个事务尚未提交,但是连接中断时,自动清除这个临时的事务文件;</code></pre><p>小结:</p><p>1.事务回滚点设置?</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">savepoint</span> 回滚点名称<span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 回滚到指定回滚点</span><span class="token keyword">rollback</span> <span class="token keyword">to</span> 回滚点名称<span class="token punctuation">;</span></code></pre><p>2.事务原理?</p><pre class=" language-sql"><code class="language-sql"><span class="token number">1</span><span class="token punctuation">)</span>客户端连接mysql服务<span class="token punctuation">,</span>服务端会对这个用户进行安全校验<span class="token punctuation">,</span>通过后会创建一个临时的事务日志文件<span class="token punctuation">;</span><span class="token number">2</span><span class="token punctuation">)</span>当用户直接向数据库插入数据时<span class="token punctuation">(</span>因为mysql默认事务自动提交<span class="token punctuation">)</span><span class="token punctuation">,</span>数据会直接刷入数据库<span class="token punctuation">;</span><span class="token number">3</span><span class="token punctuation">)</span>当用户调用<span class="token keyword">start</span> <span class="token keyword">transaction</span>命令手动开启事务时<span class="token punctuation">,</span>事务相关的数据首先会写入这个临时的事务日志文件<span class="token punctuation">,</span>然后当用户调用<span class="token keyword">commit</span>命令时<span class="token punctuation">,</span>会将事务的数据刷入的数据库<span class="token punctuation">;</span><span class="token number">4</span><span class="token punctuation">)</span>当用户进行事务的回滚时<span class="token punctuation">,</span>会直接清空这个临时的事务日志文件<span class="token punctuation">(</span>redo<span class="token punctuation">.</span>log<span class="token punctuation">,</span>undo<span class="token punctuation">.</span>log<span class="token punctuation">,</span>binlog<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">5</span><span class="token punctuation">)</span>当一个事务尚未提交<span class="token punctuation">,</span>但是连接中断时<span class="token punctuation">,</span>自动清除这个临时的事务文件<span class="token punctuation">;</span></code></pre><hr style="height:10px;background-color:green;border:none;"><h3 id="2-3-事务的四大特性-ACID-面试"><a href="#2-3-事务的四大特性-ACID-面试" class="headerlink" title="2.3 事务的四大特性(ACID)(面试)"></a>2.3 事务的四大特性(ACID)(面试)</h3><p>  数据库的事务必须具备<strong>ACID</strong>特性，ACID是指 Atomicity（原子性）、Consistensy（一致性）、Isolation（隔离性）和Durability（持久性）的英文缩写。</p><h4 id="1、隔离性（Isolation）"><a href="#1、隔离性（Isolation）" class="headerlink" title="1、隔离性（Isolation）"></a><strong>1、隔离性（Isolation）</strong></h4><p>​    <strong>多个用户并发的访问数据库时，一个用户的事务不能被其他用户的事务干扰，多个并发的事务之间要相互隔离。</strong></p><h4 id="2、持久性-Durability"><a href="#2、持久性-Durability" class="headerlink" title="2、持久性(Durability)"></a>2、持久性(Durability)</h4><p>​      <strong>指一个事务一旦被提交，它对数据库的改变将是永久性的，哪怕数据库发生异常，重启之后数据依然存在。</strong></p><h4 id="3、原子性-Atomicity"><a href="#3、原子性-Atomicity" class="headerlink" title="3、原子性(Atomicity)"></a><strong>3、原子性(Atomicity)</strong></h4><p><strong>原子性是指事务包装的一组sql(一组业务逻辑)是一个不可分割的工作单位</strong>，事务中的操作要么都发生，要么都不发生。</p><h4 id="4、一致性-Consistency"><a href="#4、一致性-Consistency" class="headerlink" title="4、一致性(Consistency)"></a><strong>4、一致性(Consistency)</strong></h4><p> <strong>一致性是指数据处于一种语义上有意义且正确的状态；</strong> </p><p>事务一致性是指事务执行的结果必须是使数据从一个一致性状态变到另一个一致性状态。</p><p>事务的成功与失败，最终数据库的数据都是符合实际生活的<strong>业务逻辑</strong>。一致性绝大多数<strong>依赖业务逻辑</strong>和原子性。</p><p><img src="https://gitee.com/ergou15154/drawing-bed/raw/master/source/image-20210902002313241.png" alt="image-20210902002313241"></p><p>小结:</p><p>1.面试问题:说一下事务的4大特性?</p><pre class=" language-sql"><code class="language-sql"><span class="token number">1</span><span class="token punctuation">)</span>隔离性: 事务在并发下<span class="token punctuation">,</span>事务彼此隔离<span class="token punctuation">,</span>不受影响<span class="token punctuation">;</span><span class="token number">2</span><span class="token punctuation">)</span>原子性:事务是一个不可分割的整体<span class="token punctuation">,</span>要么都发生<span class="token punctuation">,</span>要么都不发生<span class="token punctuation">;</span><span class="token number">3</span><span class="token punctuation">)</span>持久性:事务一旦提交<span class="token punctuation">,</span>对数据库数据的影响是永久性的<span class="token punctuation">,</span>那么数据库重启<span class="token punctuation">,</span>数据也不会丢失<span class="token punctuation">;</span><span class="token number">4</span><span class="token punctuation">)</span>一致性:首先一致性是基于原子性的<span class="token punctuation">,</span>强调的是一个业务逻辑的概念<span class="token punctuation">(</span>比如转账业务<span class="token punctuation">,</span>双方转账前总金额与转账后总金额要一致<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>2.事务相关的指令：</p><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>start transaction;<br>begin;</td><td>手动开启事务</td></tr><tr><td>commit;</td><td>提交事务</td></tr><tr><td>rollback;</td><td>回滚事务</td></tr><tr><td>savepoint 回滚点名称;</td><td>设置事务回滚点</td></tr><tr><td>rollback to 回滚点名称;</td><td>回滚到回滚点</td></tr></tbody></table><hr style="height:10px;background-color:green;border:none;"><h3 id="2-4-事务的并发访问引发的三个问题-面试"><a href="#2-4-事务的并发访问引发的三个问题-面试" class="headerlink" title="2.4 事务的并发访问引发的三个问题(面试)"></a>2.4 事务的并发访问引发的三个问题(面试)</h3><p>事务在操作时的理想状态：多个事务之间互不影响，如果隔离级别设置不当就可能引发并发访问问题。</p><table><thead><tr><th>并发访问的问题</th><th>含义</th></tr></thead><tbody><tr><td>脏读</td><td>一个事务读取到了另一个事务中<strong>尚未提交</strong>的数据。<strong>最严重，杜绝发生</strong>。</td></tr><tr><td>不可重复读</td><td>一个事务中多次读取的数据<strong>内容</strong>不一致，要求的是一个事务中多次读取时数据是不一致的，这是事务update时引发的问题</td></tr><tr><td>幻读（虚读）</td><td>一个事务内读取到了别的事务插入或者删除的数据，导致前后读取<strong>记录行数不同</strong>。这是insert或delete时引发的问题</td></tr></tbody></table><h4 id="1-脏读："><a href="#1-脏读：" class="headerlink" title="1.脏读："></a><strong>1.脏读：</strong></h4><p><strong>指一个事务读取了另外一个事务未提交的数据。(非常危险)</strong></p><p>说明:脏读强调一个事务读取了未提交的事务的数据;</p><p><img src="https://gitee.com/ergou15154/drawing-bed/raw/master/source/image-20210902002430069.png" alt="image-20210902002430069"></p><h4 id="2-不可重复读："><a href="#2-不可重复读：" class="headerlink" title="2.不可重复读："></a><strong>2.不可重复读：</strong></h4><p><strong>在一个事务内多次读取表中的数据，多次读取的内容不同。</strong></p><p>​       说明:不可重复读就是一个事务读取了其他事务提交前后的数据,造成两次读取不一致的情况,多发生在事务<strong>update</strong>操作时;</p><p><img src="https://gitee.com/ergou15154/drawing-bed/raw/master/source/image-20210902002456707.png" alt="image-20210902002456707"></p><p>说明：发生不可重复读的前提是1）事务多次读取<strong>相同条件</strong>下的数据2）另一个事务修改（<strong>update</strong>）完毕后事务进行了提交操作；</p><h4 id="3-幻读（虚读）"><a href="#3-幻读（虚读）" class="headerlink" title="3.幻读（虚读）"></a>3.幻读（虚读）</h4><p><strong>一个事务内读取到了别的事务插入或者删除的数据，导致前后读取记录行数不同</strong>,多发生在<strong>delete或insert</strong>时；</p><p><img src="https://gitee.com/ergou15154/drawing-bed/raw/master/source/image-20210902002537169.png" alt="image-20210902002537169"></p><p>小结:</p><p>事务并发下的3个问题?</p><pre class=" language-sql"><code class="language-sql"><span class="token number">1</span><span class="token punctuation">)</span>脏读:一个事务读取了另一个事务未提交的数据<span class="token punctuation">;</span><span class="token number">2</span><span class="token punctuation">)</span>不可重复读:一个事务在相同条件下前后读取的内容不同<span class="token punctuation">(</span>强调:发生在其他事务进行<span class="token keyword">update</span>操作时<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">3</span><span class="token punctuation">)</span>幻读<span class="token punctuation">(</span>虚读<span class="token punctuation">)</span>:一个事务在相同的条件下前后读取的行记录数不一致<span class="token punctuation">(</span>强调:其他事务发生<span class="token keyword">insert</span><span class="token punctuation">,</span>delte操作<span class="token punctuation">,</span>并且事务<span class="token keyword">commit</span><span class="token punctuation">)</span></code></pre><hr style="height:10px;background-color:green;border:none;"><h3 id="2-5-事务的隔离级别"><a href="#2-5-事务的隔离级别" class="headerlink" title="2.5 事务的隔离级别"></a>2.5 事务的隔离级别</h3><h4 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1.介绍"></a>1.介绍</h4><p>MySQL数据库规范规定了4种隔离级别，用于解决上述出现的事务并发问题;</p><table><thead><tr><th>级别</th><th>名字</th><th>隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th><th>数据库默认隔离级别</th></tr></thead><tbody><tr><td>1</td><td>读未提交</td><td>read uncommitted</td><td>是</td><td>是</td><td>是</td><td></td></tr><tr><td>2</td><td>读已提交</td><td>read committed</td><td>否</td><td>是</td><td>是</td><td>Oracle和SQL Server</td></tr><tr><td>3</td><td>可重复读</td><td>repeatable read</td><td>否</td><td>否</td><td>是</td><td>MySQL rr</td></tr><tr><td>4</td><td>串行化</td><td>serializable</td><td>否</td><td>否</td><td>否</td><td></td></tr></tbody></table><p>说明：其实三个问题，<strong>开发中最严重的问题就是脏读</strong>，这个问题一定要避免，而关于不可重复读和虚读其实只是感官上的错误，并不是<strong>逻辑上的错误</strong>。就是数据的<strong>时效性</strong>，所以这种问题并不属于很严重的错误。如果对于数据的时效性要求不是很高的情况下，我们是可以接受不可重复读和虚读的情况发生的。</p><h4 id="2、安全和性能对比"><a href="#2、安全和性能对比" class="headerlink" title="2、安全和性能对比"></a>2、安全和性能对比</h4><p>  安全:   串行化&gt;可重复读&gt;读已提交&gt;读未提交  </p><p>  性能:  串行化&lt;可重复读&lt;读已提交&lt;读未提交 </p><p>小结:</p><p>面试:数据库有哪些隔离级别?</p><pre class=" language-sql"><code class="language-sql"><span class="token number">1</span><span class="token punctuation">.</span>读未提交: 脏读<span class="token punctuation">,</span>不可重复读<span class="token punctuation">,</span>幻读<span class="token number">2</span><span class="token punctuation">.</span>读已提交:不可重复读<span class="token punctuation">,</span>幻读<span class="token number">3</span><span class="token punctuation">.</span>可重复读:幻读<span class="token number">4</span><span class="token punctuation">.</span>串行化</code></pre><hr style="height:10px;background-color:green;border:none;"><p><strong>如何解决脏读的问题?</strong></p><p> 说明: 需要将全局的隔离级别进行提升(read committed),然后开启两个sqlyog窗口演示,演示完毕恢复隔离级别即可;</p><pre class=" language-sql"><code class="language-sql"><span class="token number">1</span><span class="token punctuation">)</span>提高隔离级别 读已提交<span class="token keyword">set</span> <span class="token keyword">global</span> <span class="token keyword">transaction</span> <span class="token keyword">isolation level</span> <span class="token keyword">read</span> <span class="token keyword">committed</span><span class="token punctuation">;</span><span class="token number">2</span>）刷新<span class="token keyword">session</span>（重新连接）</code></pre><p>小结:</p><p>  1.查看全局事务隔离级别命令?</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> @<span class="token variable">@tx_isolation</span><span class="token punctuation">;</span></code></pre><p>  2.设置全局隔离级别?</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">set</span> <span class="token keyword">global</span> <span class="token keyword">transaction</span> <span class="token keyword">isolation level</span> 隔离界别名称<span class="token punctuation">;</span></code></pre><p>  3.如何解决脏读?</p><pre class=" language-sql"><code class="language-sql">提高事务隔离级别: <span class="token operator">>=</span>读已提交<span class="token punctuation">;</span></code></pre><hr style="height:10px;background-color:green;border:none;"><h2 id="第三章-MySQL性能-理解"><a href="#第三章-MySQL性能-理解" class="headerlink" title="第三章 MySQL性能(理解)"></a>第三章 MySQL性能(理解)</h2><h3 id="3-1-分析-数据库查询效率低下"><a href="#3-1-分析-数据库查询效率低下" class="headerlink" title="3.1 分析-数据库查询效率低下"></a>3.1 分析-数据库查询效率低下</h3><p>要提高操作数据库的性能，有如下两种方式：</p><p>1.硬优化：就是软优化之后性能还很低，只能采取硬优化，最后的步骤了，就是公司花钱购买服务器。在硬件上进行优化。</p><p>2.<strong>软优化</strong>:  在操作和设计数据库方面上进行优化（重点）(<strong>表结构和sql语句</strong>)</p><h3 id="3-2-分析-执行次数比较多的语句"><a href="#3-2-分析-执行次数比较多的语句" class="headerlink" title="3.2 分析-执行次数比较多的语句"></a>3.2 分析-执行次数比较多的语句</h3><p>1.执行次数比较多的语句分类</p><pre class=" language-sql"><code class="language-sql"><span class="token operator">*</span> <span class="token number">1</span>）查询密集型<span class="token operator">*</span> <span class="token number">2</span>）修改密集型  es solor</code></pre><p>2.查询累计插入和返回数据条数，即查看<strong>当前数据库属于查询密集型还是修改密集型</strong>。</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 查询累计插入和返回数据条数</span><span class="token keyword">show</span> <span class="token keyword">global</span> <span class="token keyword">status</span> <span class="token operator">like</span> <span class="token string">'Innodb_rows%'</span><span class="token punctuation">;</span></code></pre><p><img src="https://gitee.com/ergou15154/drawing-bed/raw/master/source/image-20210902002837634.png" alt="image-20210902002837634"></p><h2 id="第四章-索引-掌握"><a href="#第四章-索引-掌握" class="headerlink" title="第四章 索引(掌握)"></a>第四章 索引(掌握)</h2><h3 id="4-1-索引介绍及分类"><a href="#4-1-索引介绍及分类" class="headerlink" title="4.1 索引介绍及分类"></a>4.1 索引介绍及分类</h3><h4 id="1-什么是索引"><a href="#1-什么是索引" class="headerlink" title="1)什么是索引"></a>1)什么是索引</h4><p> Mysql官方对索引的定义为：<strong>索引（index）是帮助Mysql高效获取数据的数据结构。</strong></p><p><strong>可以得到索引的本质：索引就是数据结构：B+Tree</strong></p><h4 id="2-MySQL索引分类"><a href="#2-MySQL索引分类" class="headerlink" title="2)MySQL索引分类"></a>2)MySQL索引分类</h4><pre class=" language-sql"><code class="language-sql"><span class="token operator">*</span> 主键（约束）索引        主键约束<span class="token punctuation">(</span>唯一<span class="token operator">+</span>非空<span class="token punctuation">)</span><span class="token operator">+</span>提高查询效率        <span class="token operator">*</span> 唯一（约束）索引        唯一约束<span class="token operator">+</span>提高查询效率<span class="token operator">*</span> 普通索引        仅提高查询效率<span class="token operator">*</span> 组合（联合）索引        多个字段组成索引        <span class="token punctuation">[</span>联合主键索引        联合唯一索引        联合普通索引<span class="token punctuation">]</span><span class="token operator">*</span> 全文索引 <span class="token keyword">TEXT</span> BIGTEXY        solr、es<span class="token operator">*</span> <span class="token keyword">hash</span>索引        根据<span class="token keyword">key</span><span class="token operator">-</span><span class="token keyword">value</span> 效率非常高         等值查询，不适合范围查询        </code></pre><hr style="height:10px;background-color:green;border:none;"><h3 id="4-2-MySQL索引语法"><a href="#4-2-MySQL索引语法" class="headerlink" title="4.2 MySQL索引语法"></a>4.2 MySQL索引语法</h3><h4 id="4-2-1-索引创建"><a href="#4-2-1-索引创建" class="headerlink" title="4.2.1 索引创建"></a>4.2.1 索引创建</h4><h5 id="1-创建索引-【了解】"><a href="#1-创建索引-【了解】" class="headerlink" title="1) 创建索引 【了解】"></a>1) 创建索引 【了解】</h5><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 创建普通索引</span><span class="token keyword">create</span> <span class="token keyword">index</span> 索引名 <span class="token keyword">on</span> 表名<span class="token punctuation">(</span>字段<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 创建唯一索引</span><span class="token keyword">create</span> <span class="token keyword">unique</span> <span class="token keyword">index</span> 索引名 <span class="token keyword">on</span> 表名<span class="token punctuation">(</span>字段<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 创建普通组合索引</span><span class="token keyword">create</span> <span class="token keyword">index</span> 索引名 <span class="token keyword">on</span> 表名<span class="token punctuation">(</span>字段<span class="token number">1</span><span class="token punctuation">,</span>字段<span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 创建唯一组合索引</span><span class="token keyword">create</span> <span class="token keyword">unique</span> <span class="token keyword">index</span> 索引名 <span class="token keyword">on</span> 表名<span class="token punctuation">(</span>字段<span class="token number">1</span><span class="token punctuation">,</span>字段<span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>说明：</p><p>​    1.如果在同一张表中创建多个索引，要保证索引名是不能重复的</p><p>​    2.上述创建索引的方式比较麻烦，还需要指定索引名</p><p>​    <strong>3.采用上述方式不能添加主键索引</strong></p><p>【准备的创建表的SQL语句】</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 创建学生表</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> student<span class="token punctuation">(</span> id <span class="token keyword">INT</span><span class="token punctuation">,</span> name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span> telephone <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>练习:</p><pre class=" language-tex"><code class="language-tex">-- 给name创建普通索引create index idx_name on student(name);-- 给telephone添加唯一索引create unique index uniq_telephone on student(telephone);</code></pre><h5 id="2-在已有表的字段上修改表时指定【了解】"><a href="#2-在已有表的字段上修改表时指定【了解】" class="headerlink" title="2) 在已有表的字段上修改表时指定【了解】"></a>2) 在已有表的字段上修改表时指定【了解】</h5><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 添加一个主键，这意味着索引值必须是唯一的，且不能为NULL</span><span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">add</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span>字段<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">--默认索引名：primary</span><span class="token comment" spellcheck="true">-- 添加唯一索引（除了NULL外，NULL可能会出现多次）</span><span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">add</span> <span class="token keyword">unique</span><span class="token punctuation">(</span>字段<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 默认索引名：字段名</span><span class="token comment" spellcheck="true">-- 添加普通索引，索引值可以出现多次。</span><span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">add</span> <span class="token keyword">index</span><span class="token punctuation">(</span>字段<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 默认索引名：字段名</span></code></pre><p>【准备的创建表的SQL语句】</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 创建学生表</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> student2<span class="token punctuation">(</span> id <span class="token keyword">INT</span><span class="token punctuation">,</span> name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span> telephone <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>练习:</p><pre class=" language-tex"><code class="language-tex">-- 给id添加主键索引alter table student2 add primary key(id);-- 给name字段添加普通索引 索引名称默认是字段名称alter table student2 add index(name);-- 给telephone添加唯一索引alter table student2 add unique(telephone);</code></pre><h5 id="3-创建表时指定【掌握】"><a href="#3-创建表时指定【掌握】" class="headerlink" title="3)  创建表时指定【掌握】"></a>3)  创建表时指定【掌握】</h5><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 创建学生表</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> student3<span class="token punctuation">(</span> id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">-- 主键索引</span> name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span> telephone <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">UNIQUE</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">-- 唯一索引</span> sex <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> birthday <span class="token keyword">DATE</span><span class="token punctuation">,</span> <span class="token keyword">INDEX</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">-- 普通索引</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><hr style="height:10px;background-color:green;border:none;"><h4 id="4-2-2-查看与删除索引"><a href="#4-2-2-查看与删除索引" class="headerlink" title="4.2.2 查看与删除索引"></a>4.2.2 查看与删除索引</h4><h5 id="1-查看索引"><a href="#1-查看索引" class="headerlink" title="1) 查看索引"></a>1) 查看索引</h5><pre class=" language-sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">index</span> <span class="token keyword">from</span> 表名<span class="token punctuation">;</span> </code></pre><p>练习:【查看student3表的索引信息】</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">index</span> <span class="token keyword">from</span> student3<span class="token punctuation">;</span></code></pre><h5 id="2-删除索引"><a href="#2-删除索引" class="headerlink" title="2) 删除索引"></a>2) 删除索引</h5><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 两种方式</span><span class="token comment" spellcheck="true">-- 方式1:直接删除</span><span class="token keyword">drop</span> <span class="token keyword">index</span> 索引名 <span class="token keyword">on</span> 表名<span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 方式2:-- 修改表时删除</span><span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">drop</span> <span class="token keyword">index</span> 索引名<span class="token punctuation">;</span></code></pre><p>练习:</p><pre class=" language-tex"><code class="language-tex">练习1:删除student表的name普通索引    drop index name_idx on student;练习2:删除student表的telephone唯一索引    alter table student drop index telephone_idx练习3:删除主键alter table student4 drop primary key;</code></pre><h3 id="4-4-索引优缺点及创建原则"><a href="#4-4-索引优缺点及创建原则" class="headerlink" title="4.4 索引优缺点及创建原则"></a>4.4 索引优缺点及创建原则</h3><h4 id="1-索引的优缺点"><a href="#1-索引的优缺点" class="headerlink" title="1.索引的优缺点"></a>1.索引的优缺点</h4><h5 id="1-优势"><a href="#1-优势" class="headerlink" title="1)优势"></a>1)优势</h5><p>​    1） 类似于书籍的目录索引，<strong>提高数据检索的效率，降低数据库的IO成本</strong>。<br>​    2） 索引底层就是排序，通过索引列对数据进行排序，降低数据排序的成本，<strong>降低CPU的消耗</strong>。</p><h5 id="2-劣势"><a href="#2-劣势" class="headerlink" title="2)劣势"></a>2)劣势</h5><ul><li>在数据库建立过程中，需花费较多的时间去建立并维护索引，特别是随着数据总量的增加，所花费的时间将不断递增(<strong>在海量数据前提下,创建索引成本高</strong>)。</li><li>在数据库中创建的索引需要占用一定的物理存储空间，这其中就包括数据表所占的数据空间以及所创建的每一个索引所占用的物理空间(<strong>会额外占用磁盘空间</strong>)。</li><li>在对表中的数据进行修改时，例如对其进行增加、删除或者是修改操作时，索引还需要进行动态的维护，这给数据库的维护速度带来了一定的麻烦(<strong>维护成本高</strong>)。</li></ul><h4 id="2-索引创建原则-面试"><a href="#2-索引创建原则-面试" class="headerlink" title="2.索引创建原则(面试)"></a>2.索引创建原则(面试)</h4><p>索引的设计可以遵循一些已有的原则，创建索引的时候请尽量考虑符合这些原则，便于提升索引的使用效率，更高效的使用索引。</p><pre class=" language-sql"><code class="language-sql"><span class="token number">1</span><span class="token punctuation">.</span> 字段内容可识别度不能低于<span class="token number">70</span><span class="token operator">%</span>，字段内数据唯一值的个数不能低于<span class="token number">70</span><span class="token operator">%</span>    例如：一个表数据只有<span class="token number">50</span>行，那么性别和年龄哪个字段适合创建索引，明显是年龄，因为年龄的唯一值个数比较多，性别只有两个选项。    <span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> student3<span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 8</span>    <span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> name<span class="token punctuation">)</span> <span class="token keyword">from</span> student3<span class="token punctuation">;</span>    <span class="token keyword">select</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> name<span class="token punctuation">)</span> <span class="token keyword">from</span> student3<span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> student3<span class="token punctuation">)</span><span class="token number">2</span><span class="token punctuation">.</span> 经常使用<span class="token keyword">where</span>条件搜索的字段，例如<span class="token keyword">user</span>表的id name等字段。<span class="token number">3</span><span class="token punctuation">.</span> 经常使用表连接的字段（内连接、外连接），可以加快连接的速度。<span class="token number">4</span><span class="token punctuation">.</span> 经常排序的字段 <span class="token keyword">order</span> <span class="token keyword">by</span>，因为索引已经是排过序的，这样一来可以利用索引的排序，加快排序查 询速度。<span class="token number">5</span><span class="token punctuation">.</span>空间原则（字段占用空间越小也好）<span class="token operator">*</span> 注意: 索引并不是越多越好<span class="token punctuation">,</span>因为索引的建立和维护都是需要耗时的 创建表时需要通过数据库去维护索引，添加记录、更新、修改时，也需要更新索引，会间接影响数据库的效率。</code></pre><hr style="height:10px;background-color:green;border:none;"><h3 id="4-5-索引的数据结构【了解】"><a href="#4-5-索引的数据结构【了解】" class="headerlink" title="4.5 索引的数据结构【了解】"></a>4.5 索引的数据结构【了解】</h3><h4 id="4-5-1-索引示例介绍"><a href="#4-5-1-索引示例介绍" class="headerlink" title="4.5.1 索引示例介绍"></a>4.5.1 索引示例介绍</h4><p>我们知道<strong>索引</strong>是帮助MySQL高效获取数据的一种<strong>排好序</strong>的<strong>数据结构</strong>。</p><p>以磁盘顺序迭代查询与二叉树查找为例:</p><p><img src="https://gitee.com/ergou15154/drawing-bed/raw/master/source/image-20210902003738571.png" alt="image-20210902003738571"></p><p>如果没有使用索引查询数据，比如查询col1=6,需要经过6次io；</p><p>   如何减少磁盘io次数？</p><p>  如果读取col2=89,那么需要2次io；</p><hr style="height:10px;background-color:green;border:none;"><h4 id="4-5-2-二叉查找树和红黑树"><a href="#4-5-2-二叉查找树和红黑树" class="headerlink" title="4.5.2 二叉查找树和红黑树"></a>4.5.2 二叉查找树和红黑树</h4><p><strong>数据结构学习网站(美国旧金山大学)</strong></p><pre class=" language-http"><code class="language-http"><span class="token header-name keyword">https:</span>//www.cs.usfca.edu/~galles/visualization/Algorithms.html</code></pre><h5 id="1-二叉查找树"><a href="#1-二叉查找树" class="headerlink" title="1.二叉查找树"></a>1.二叉查找树</h5><p>左边的子节点比父节点小，右边的子节点比父节点大;</p><p><img src="https://i.loli.net/2021/09/02/SzmLxUCbOfIAD3Y.png" alt="image-20210902100458124"></p><h5 id="2-红黑树"><a href="#2-红黑树" class="headerlink" title="2.红黑树"></a>2.红黑树</h5><p>平衡二叉树（左旋、右旋、变色）;</p><p>说明:存储千万数据,树高大约<strong>为23</strong>;</p><p><img src="https://i.loli.net/2021/09/02/Ucb8waV4jdoiuD9.png" alt="image-20210902100545976"></p><p><strong>树的高度越高,那么部分数据查询要经过的io的次数就会越多;</strong></p><hr style="height:10px;background-color:green;border:none;"><h4 id="4-5-3-BTree"><a href="#4-5-3-BTree" class="headerlink" title="4.5.3.BTree"></a>4.5.3.BTree</h4><p>从结构树看,<strong>树的高度就是查询数据时的最多IO次数</strong>,那么如何将树的高度压低？</p><pre><code>      将每个节点存储的数据尽量多一些</code></pre><p>多路平衡搜索树;</p><p>说明:数据库一个节点<strong>16KB,<strong>每个节点的元素由索引(8字节),指针域(6个字节),数据组成（比如1kb）,存储千万数据树</strong>高接近6;</strong></p><p>一个节点存储的元素个数:16*1024/(8+6+1024)约等于15</p><p>   如果存储的数据占1kb，那么每个节点存储的元素个数是<strong>15个元素</strong>，那么如果存储1000w数据树高多少？<strong>6</strong></p><p><img src="https://gitee.com/ergou15154/drawing-bed/raw/master/source/image-20210902003842317.png" alt="image-20210902003842317"></p><p>思考：如何进一步降低树的高度及优化查询？</p><pre class=" language-tex"><code class="language-tex">1）数据查询的过程中，有一些数据data的加载时没有意义且浪费磁盘io；2）如果要进行范围查询，那么需要反复从根节点读取数据；</code></pre><hr style="height:10px;background-color:green;border:none;"><h4 id="4-5-4-B-Tree"><a href="#4-5-4-B-Tree" class="headerlink" title="4.5.4 B+Tree"></a>4.5.4 B+Tree</h4><h5 id="1-结构介绍"><a href="#1-结构介绍" class="headerlink" title="1.结构介绍"></a>1.结构介绍</h5><p>1）B+tree将树分为叶子节点和非叶子节点，其中非叶子节点只存储索引+指针，不存储数据，而叶子节点存储索引+指针域+数据；</p><p>   如果一个B+tree的树高时3的话，那么非叶子节点2层，叶子节点1层；</p><p>非叶子节点:16*1024/(8+6)=1170</p><p>​    非叶子节点两层：1170个元素，如果是两层，那么元素数量：1170*1170=<strong>1,368,900</strong></p><p>​    叶子节点：因为包含索引+指针域+数据  —–16*1.24/(8+6+1025)=15</p><p>   总共：1,368,900*15=20,533,500</p><p>优化BTree（非叶子节点：索引+指针、叶子节点：索引+数据【地址】）;</p><p><img src="https://gitee.com/ergou15154/drawing-bed/raw/master/source/image-20210902003911405.png" alt="image-20210902003911405"></p><p>说明：b+tree通过<strong>非叶子节点不存储数据</strong>，进一步降低了树的高度；</p><p>​           通过叶子节点之间维护了指针双向指向，<strong>提高了区间的访问能力；</strong></p><p>存储2千w数据,树高维护在3左右!</p><p><strong>小结：</strong></p><p>B+Tree好处：</p><p>​    1）(非叶子节点只存储索引和指针域,不保存数据)降低树的高度,意味着数据查询的io次数减少;</p><p>​    2)   叶子节点按照索引排好序，支持范围查找，速度会很快。</p><p>​    3）还有一点是mysql将根节点都加载到内存中，每张表有一个根节点，<strong>大小是16KB</strong>.那么这样的好处，按照上述如果是千万条数据，那么只有2次磁盘IO.这就是为什么我们加完索引之后瞬间查到数据的原因了。</p><p>最终结论：</p><p>   <strong>通过将树的每个节点存储的元素增大来降低树的高度；</strong></p><h5 id="2-MySQL中的B-Tree"><a href="#2-MySQL中的B-Tree" class="headerlink" title="2. MySQL中的B+Tree"></a>2. MySQL中的B+Tree</h5><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 查看mysql索引节点大小</span><span class="token keyword">show</span> <span class="token keyword">global</span> <span class="token keyword">status</span> <span class="token operator">like</span> <span class="token string">'innodb_page_size'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 16kb</span></code></pre><p>MySql索引数据结构对经典的B+Tree进行了优化。在原B+Tree的基础上，增加一个指向相邻叶子节点的链表指针，就形成了带有顺序指针的B+Tree，<strong>提高区间访问的性能</strong>。</p><hr style="height:10px;background-color:green;border:none;"><h2 id="第五章-视图-掌握"><a href="#第五章-视图-掌握" class="headerlink" title="第五章 视图(掌握)"></a>第五章 视图(掌握)</h2><h3 id="5-1-视图应用与创建"><a href="#5-1-视图应用与创建" class="headerlink" title="5.1 视图应用与创建"></a>5.1 视图应用与创建</h3><h4 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h4><p>​    1.视图（View）是一种虚拟存在的表，行和列的数据来源于定义视图的查询中使用的表，并且是在使用视图时动态生成的。</p><p>​     2.视图和普通表一样使用，但是视图并不存储数据。<strong>通俗的讲，视图就是一条SELECT语句执行后返回的结果集。</strong></p><h4 id="2-应用场景"><a href="#2-应用场景" class="headerlink" title="2.应用场景"></a>2.应用场景</h4><p>1）多个地方用到同样的查询结果</p><p>2）该查询结果使用的sql语句较复杂</p><p>创建视图语法格式:</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">view</span> 视图名<span class="token keyword">as</span>查询语句<span class="token punctuation">;</span></code></pre><p>需求:查看所有国家和对应城市的信息</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 视图是一张虚拟的表,除了不保存数据数据外,其他规则都改表table一致</span><span class="token keyword">create</span> <span class="token keyword">view</span> country_city_view <span class="token keyword">as</span> <span class="token keyword">select</span> city<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span>country<span class="token punctuation">.</span>country_name <span class="token keyword">from</span> country<span class="token punctuation">,</span>city <span class="token keyword">where</span> country<span class="token punctuation">.</span>country_id<span class="token operator">=</span>city<span class="token punctuation">.</span>country_id<span class="token punctuation">;</span></code></pre><h4 id="3-视图和表的区别"><a href="#3-视图和表的区别" class="headerlink" title="3.视图和表的区别"></a>3.视图和表的区别</h4><pre class=" language-markdown"><code class="language-markdown"><span class="token code keyword">     使用方式      占用物理空间</span>视图    完全相同     视图中的数据不保存，仅仅保存的是sql逻辑，磁盘上只有表结构，没有数据表     完全相同      占用</code></pre><h4 id="4-视图的好处"><a href="#4-视图的好处" class="headerlink" title="4.视图的好处"></a>4.视图的好处</h4><pre class=" language-markdown"><code class="language-markdown"><span class="token list punctuation">*</span> 1、提高sql语句重用性，效率高(避免sql语句多次编译)<span class="token list punctuation">*</span> 2、和表实现了分离，提高了安全性，使用视图的用户只能访问他们被允许查询的结果集</code></pre><hr style="height:10px;background-color:green;border:none;"><h3 id="5-2-视图修改-查看与删除"><a href="#5-2-视图修改-查看与删除" class="headerlink" title="5.2 视图修改,查看与删除"></a>5.2 视图修改,查看与删除</h3><h4 id="1-视图修改"><a href="#1-视图修改" class="headerlink" title="1)视图修改"></a>1)视图修改</h4><p>方式1-创建过程覆盖旧的视图,达到修改的操作</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token operator">or</span> replace <span class="token keyword">view</span> 视图名<span class="token keyword">as</span>查询语句<span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 说明：如果存在该视图名就是修改视图，如果不存在该视图名则创建视图。</span></code></pre><p>需求：修改上述视图city_country_view，select语句变为查询城市名是上海的城市信息和所属国家信息</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token operator">or</span> replace <span class="token keyword">view</span> country_city_view <span class="token keyword">as</span><span class="token keyword">select</span>city<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span>country<span class="token punctuation">.</span>country_name <span class="token keyword">from</span> country<span class="token punctuation">,</span>city <span class="token keyword">where</span> country<span class="token punctuation">.</span>country_id<span class="token operator">=</span>city<span class="token punctuation">.</span>country_id <span class="token operator">and</span> city<span class="token punctuation">.</span>city_name<span class="token operator">=</span><span class="token string">'上海'</span><span class="token punctuation">;</span></code></pre><p>方式2:使用alter修改</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">view</span> 视图名<span class="token keyword">as</span>查询语句<span class="token punctuation">;</span></code></pre><p>需求：修改上述视图city_country_view，select语句变为查询城市名是北京的城市信息和所属国家信息</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">view</span> country_city_view <span class="token keyword">as</span><span class="token keyword">select</span>city<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span>country<span class="token punctuation">.</span>country_name <span class="token keyword">from</span> country<span class="token punctuation">,</span>city <span class="token keyword">where</span> country<span class="token punctuation">.</span>country_id<span class="token operator">=</span>city<span class="token punctuation">.</span>country_id <span class="token operator">and</span> city<span class="token punctuation">.</span>city_name<span class="token operator">=</span><span class="token string">'北京'</span><span class="token punctuation">;</span></code></pre><h4 id="2-查看视图"><a href="#2-查看视图" class="headerlink" title="2)查看视图"></a>2)查看视图</h4><p>查看视图指令与table指令格式一致.</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">tables</span><span class="token punctuation">;</span><span class="token keyword">desc</span> country_view<span class="token punctuation">;</span><span class="token keyword">show</span> <span class="token keyword">create</span> <span class="token keyword">table</span> country_view<span class="token punctuation">;</span></code></pre><h4 id="3-删除视图"><a href="#3-删除视图" class="headerlink" title="3)删除视图"></a>3)删除视图</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">view</span> 视图名<span class="token punctuation">,</span>视图名<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span></code></pre><p>需求:删除 country_view视图</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">view</span> country_view<span class="token punctuation">;</span></code></pre><p>小结:</p><p>视图应用场景及好处?</p><pre class=" language-sql"><code class="language-sql">场景:<span class="token number">1</span><span class="token punctuation">)</span>多场景使用相同且非常复杂的查询sql<span class="token punctuation">;</span><span class="token number">2</span><span class="token punctuation">)</span>在一些数据敏感<span class="token punctuation">,</span>涉及到安全的场景<span class="token punctuation">;</span><span class="token number">3</span><span class="token punctuation">)</span>网络访问密集的场景<span class="token punctuation">(</span>减少网络io开销<span class="token punctuation">)</span>；好处:<span class="token number">1</span><span class="token punctuation">)</span>提高sql的复用性<span class="token punctuation">;</span><span class="token number">2</span><span class="token punctuation">)</span>提高数据的安全性和数据库性能<span class="token punctuation">;</span><span class="token number">3</span><span class="token punctuation">)</span>减少网络io开销</code></pre><p>创建语句格式?</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">view</span> 视图名称 <span class="token keyword">as</span>  <span class="token keyword">select</span>语句<span class="token punctuation">;</span></code></pre><hr style="height:10px;background-color:green;border:none;"><h2 id="第六章-触发器-了解"><a href="#第六章-触发器-了解" class="headerlink" title="第六章 触发器(了解)"></a>第六章 触发器(了解)</h2><h3 id="6-1触发器概述与创建"><a href="#6-1触发器概述与创建" class="headerlink" title="6.1触发器概述与创建"></a>6.1触发器概述与创建</h3><h4 id="1-触发器概述"><a href="#1-触发器概述" class="headerlink" title="1)触发器概述"></a>1)触发器概述</h4><p>​    1.触发器主要是通过<strong>事件进行触发而被执行</strong>的,我们可以在修改数据的前后绑定事件,触发执行定义的SQL;</p><p>​    2.触发器是与表有关的数据库对象，指在 <strong>insert/update/delete</strong> 之前或之后，触发并执行触发器中定义的SQL语句集合。</p><p>​    3.使用<strong>别名 OLD 和 NEW 来引用触发器中发生变化的记录内容</strong>，这与其他的数据库是相似的。</p><p>说明：OLD表示操作前的对象，NEW 表示操作之后的对象。</p><table><thead><tr><th>触发器类型</th><th>NEW 和 OLD的使用</th></tr></thead><tbody><tr><td>INSERT 型触发器</td><td><strong>NEW 表示将要或者已经新增的数据</strong>，插入之前没有数据，所以不能使用OLD</td></tr><tr><td>UPDATE 型触发器</td><td><strong>OLD 表示修改之前的数据 , NEW 表示将要或已经修改后的数据</strong></td></tr><tr><td>DELETE 型触发器</td><td><strong>OLD 表示将要或者已经删除的数据</strong>,删除之后没有数据了，所以不能使用NEW</td></tr></tbody></table><h4 id="2-创建触发器"><a href="#2-创建触发器" class="headerlink" title="2)创建触发器"></a>2)创建触发器</h4><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 语法</span><span class="token keyword">create</span> <span class="token keyword">trigger</span> trigger_namebefore<span class="token operator">/</span><span class="token keyword">after</span> <span class="token keyword">insert</span><span class="token operator">/</span><span class="token keyword">update</span><span class="token operator">/</span><span class="token keyword">delete</span><span class="token keyword">on</span> tbl_name<span class="token keyword">for each row</span>  <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 行级触发器</span>    trigger_stmt <span class="token punctuation">;</span>说明：    <span class="token number">1</span>）before<span class="token operator">/</span><span class="token keyword">after</span>位置称为触发时机，一个触发器只能选择一个    <span class="token number">2</span>）<span class="token keyword">insert</span><span class="token operator">/</span><span class="token keyword">update</span><span class="token operator">/</span><span class="token keyword">delete</span>位置称为触发事件，一个触发器只能选择一个    <span class="token number">3</span>）<span class="token keyword">for each row</span>称为行级触发器，触发器绑定实质是表中的所有行，因此当每一行发生指定改变的时候，就会触发触发器。</code></pre><p>数据准备:</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 创建员工表，员工信息</span><span class="token keyword">create</span> <span class="token keyword">table</span> emp<span class="token punctuation">(</span>    id <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">auto_increment</span><span class="token punctuation">,</span>    name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    age <span class="token keyword">int</span><span class="token punctuation">,</span>    salary <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> emp<span class="token punctuation">(</span>id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>salary<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token string">'金毛狮王'</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">2500</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> emp<span class="token punctuation">(</span>id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>salary<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token string">'蝙蝠王'</span><span class="token punctuation">,</span><span class="token number">38</span><span class="token punctuation">,</span><span class="token number">3100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 创建一张日志表,存放日志信息</span><span class="token keyword">create</span> <span class="token keyword">table</span> emp_logs<span class="token punctuation">(</span>    id <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">auto_increment</span><span class="token punctuation">,</span>    operation <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'操作类型, insert/update/delete'</span><span class="token punctuation">,</span>    operate_time <span class="token keyword">datetime</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'操作时间'</span><span class="token punctuation">,</span>    operate_id <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'操作表的ID,emp表数据的id'</span><span class="token punctuation">,</span>    operate_params <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span> <span class="token keyword">comment</span> <span class="token string">'操作参数,插入emp中的数据'</span><span class="token punctuation">)</span><span class="token keyword">engine</span><span class="token operator">=</span><span class="token keyword">innodb</span> <span class="token keyword">default</span> <span class="token keyword">charset</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span></code></pre><p> <strong>需求1:创建 insert 型触发器，完成插入数据时的日志记录  new</strong></p><p>需求2:创建 update 型触发器，完成更新数据时的日志记录</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">trigger</span> update_tri <span class="token keyword">after</span> <span class="token keyword">update</span><span class="token keyword">on</span> emp<span class="token keyword">for each row</span><span class="token keyword">insert</span> <span class="token keyword">into</span> emp_logs <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">'update'</span><span class="token punctuation">,</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>old<span class="token punctuation">.</span>id<span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token string">'操作之前数据:'</span><span class="token punctuation">,</span>old<span class="token punctuation">.</span>id<span class="token punctuation">,</span>old<span class="token punctuation">.</span>name<span class="token punctuation">,</span>old<span class="token punctuation">.</span>age<span class="token punctuation">,</span>old<span class="token punctuation">.</span>salary<span class="token punctuation">,</span><span class="token string">'操作之后数据:'</span><span class="token punctuation">,</span>new<span class="token punctuation">.</span>id<span class="token punctuation">,</span>new<span class="token punctuation">.</span>name<span class="token punctuation">,</span>new<span class="token punctuation">.</span>age<span class="token punctuation">,</span>new<span class="token punctuation">.</span>salary<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>需求3:创建delete 行的触发器 , 完成删除数据时的日志记录  old</strong></p><hr style="height:10px;background-color:green;border:none;"><h3 id="6-2-触发器查看与删除"><a href="#6-2-触发器查看与删除" class="headerlink" title="6.2 触发器查看与删除"></a>6.2 触发器查看与删除</h3><h4 id="1-查看触发器"><a href="#1-查看触发器" class="headerlink" title="1)查看触发器"></a>1)查看触发器</h4><p>可使用指令或者可视化工具查看触发器;</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SHOW</span> TRIGGERS<span class="token punctuation">;</span></code></pre><h4 id="2-删除触发器"><a href="#2-删除触发器" class="headerlink" title="2) 删除触发器"></a>2) 删除触发器</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">trigger</span> trigger_name <span class="token punctuation">;</span></code></pre><h2 id="索引总结"><a href="#索引总结" class="headerlink" title="索引总结"></a>索引总结</h2><p>1.1 索引的创建</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true"># 方式1：</span>    <span class="token comment" spellcheck="true"># 普通索引</span>    <span class="token keyword">create</span> <span class="token keyword">index</span> 索引名称 <span class="token keyword">on</span> 表名<span class="token punctuation">(</span>字段名称<span class="token punctuation">,</span>字段名称<span class="token number">2</span>，<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true"># 创建唯一索引</span>    <span class="token keyword">create</span> <span class="token keyword">unique</span> <span class="token keyword">index</span> 索引名称 <span class="token keyword">on</span> 表名<span class="token punctuation">(</span>字段名称<span class="token punctuation">,</span>字段名称<span class="token number">2</span>，<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 方式2：</span>    <span class="token comment" spellcheck="true"># 普通索引</span>    <span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">add</span> <span class="token keyword">index</span><span class="token punctuation">(</span>字段名称<span class="token punctuation">,</span>字段名称<span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true"># 唯一索引</span>    <span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">add</span> <span class="token keyword">unique</span><span class="token punctuation">(</span>字段名称，字段名称<span class="token number">2</span>，<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true"># 主键索引</span>    <span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">add</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span>字段<span class="token number">1</span>，字段<span class="token number">2</span>，<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 方式3：掌握</span>    <span class="token keyword">create</span> <span class="token keyword">table</span> 表名<span class="token punctuation">(</span>        id <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">auto_increment</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">-- 主键且自增</span>        name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        tele <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span> <span class="token keyword">unique</span><span class="token punctuation">,</span>        <span class="token keyword">index</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>1.2 索引分类</p><pre class=" language-sql"><code class="language-sql">主键索引：特点 唯一<span class="token operator">+</span> 非空<span class="token operator">+</span> 提高查询效率 底层维护的是主键索引<span class="token punctuation">(</span>聚集索引，通过索引数据，就可以找到满足条件的任意数据<span class="token comment" spellcheck="true">--叶子节点数据都包含)</span>唯一索引： 特点 唯一 <span class="token operator">+</span> 提交查询效率   底层维护了唯一索引<span class="token punctuation">(</span>非聚集索引，查询过程是先通过唯一索引<span class="token keyword">btree</span>检索到叶子节点下保存的主键值，然后再取主键索引根据主键的值查询对应的数据<span class="token comment" spellcheck="true">--回表查询)</span>唯一索引： 特点：没有任何约束，仅仅提高查询效率，底层与唯一索引类似；<span class="token keyword">Hash</span>索引：特点： 非常适合等值查询，但是不适合范围查询；</code></pre><p>回表查询示意图：</p><p><img src="https://i.loli.net/2021/09/02/kMwcOiXrY1qQ4vG.png" alt="image-20210819084509775"></p><p>说明：实际情况中，普通索引或者唯一索引是btree结构(不是上图中的二叉树)；</p><p>面试题：</p><p>1.什么是回表查询？</p><pre class=" language-tex"><code class="language-tex">一般主键查询时，不会回表查询，但是对应查询如果走非主键索引，那么需要先走普通索引拿主键索引值，然后再去主键索引查询拿数据；</code></pre><p>2.如何避免回表查询？</p><pre class=" language-tex"><code class="language-tex">因为回表查询，整体效率是慢了一些； 避免方式：     1.尽量让查询走主键索引；     2.建立联合索引；         举例： 根据手机号查询姓名；         在表中将手机号和姓名一起创建一个【联合索引】，这样就可以直接在索引树中拿数据，避免了回表查询；</code></pre><p>3.创建索引的原则</p><pre class=" language-tex"><code class="language-tex">1.创建索引的表示度要高    如何统计表示度？    select count(distinct 索引字段)/count(索引字段) from 表名；    结果越接近1越理想；2.条件中要使用对应的表的字段    2.1 where条件中【经常】使用的字段（having查询不走索引）；    2.2 多表join联查时，on关键字后边的字段；3.在排序的场景 order by 字段；4.空间原则    主键字段在满足业务需求的情况下，占空间越小越好；</code></pre><p>4.索引失效的原因？</p><pre class=" language-sql"><code class="language-sql"><span class="token number">1</span><span class="token punctuation">.</span>索引字段使用函数    <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span>  表名 <span class="token keyword">where</span> trim<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token operator">=</span><span class="token string">'xxxx'</span>；<span class="token number">2</span><span class="token punctuation">.</span>索引字段参与数学运算    <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> 表名 <span class="token keyword">where</span> id<span class="token operator">+</span><span class="token number">100</span><span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">;</span><span class="token number">3</span><span class="token punctuation">.</span>索引字段存在类型转换    <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> 表名 <span class="token keyword">where</span> name<span class="token operator">=</span><span class="token number">500</span><span class="token punctuation">;</span><span class="token number">4</span>索引字段频繁的进行写操作，导致索引树拼接的维护构建；        如果一个字段拼接修改，那么完全没必有在这个字段创建索引了；</code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>04存储过程和函数+游标+存储引擎+mysql体系+读写锁+行锁表锁+间隙锁</title>
      <link href="/2020/03/15/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E5%92%8C%E5%87%BD%E6%95%B0+%E6%B8%B8%E6%A0%87+%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E+mysql%E4%BD%93%E7%B3%BB/"/>
      <url>/2020/03/15/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E5%92%8C%E5%87%BD%E6%95%B0+%E6%B8%B8%E6%A0%87+%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E+mysql%E4%BD%93%E7%B3%BB/</url>
      
        <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="1、存储过程"><a href="#1、存储过程" class="headerlink" title="1、存储过程"></a>1、存储过程</h2><blockquote><p><strong>【概念】</strong>：mysql中的存储过程和函数是 <strong>一组预先编译并存储在数据库中的SQL 语句的集合</strong>，我们可以通过调用存储过程和函数来执行一组SQL语句的集合。</p></blockquote><h3 id="1、创建存储过程"><a href="#1、创建存储过程" class="headerlink" title="1、创建存储过程"></a>1、创建存储过程</h3><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true"># 查询过程赋值</span><span class="token keyword">delimiter</span> $<span class="token keyword">create</span> <span class="token keyword">procedure</span> pro_test3<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">begin</span>    <span class="token comment" spellcheck="true"># 声明变量num</span>    <span class="token keyword">declare</span> num <span class="token keyword">int</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true"># 查询城市表行记录数并赋值num</span>    <span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">into</span> num <span class="token keyword">from</span> city<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true"># 查询</span>    <span class="token keyword">select</span> num<span class="token punctuation">;</span><span class="token keyword">end</span>$<span class="token comment" spellcheck="true"># 调用</span><span class="token keyword">call</span> pro_test3<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>【说明】</p><p>​    1.参数列表包含三部分：</p><pre class=" language-sql"><code class="language-sql">        参数模式    参数名        参数类型举例：   <span class="token operator">IN</span>         stuname      <span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span></code></pre><p>​        参数模式：</p><pre class=" language-sql"><code class="language-sql"><span class="token operator">IN</span>:该参数可以作为输入，也就是该参数需要调用者传入值<span class="token keyword">OUT</span>:该参数可以作为输出，也就是该参数可以作为返回值<span class="token keyword">INOUT</span>:该参数既可以作为输入又可以作为输出，也就是该参数既需要传入值，又可以返回值</code></pre><p>​    如果存储过程体仅仅只有一句话，begin  end可以省略。</p><h3 id="2、查看存储过程"><a href="#2、查看存储过程" class="headerlink" title="2、查看存储过程"></a>2、查看存储过程</h3><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--  查询指定数据库中的所有的存储过程</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> mysql<span class="token punctuation">.</span><span class="token keyword">proc</span> <span class="token keyword">where</span> <span class="token number">db</span><span class="token operator">=</span><span class="token string">'数据库名'</span> \G<span class="token punctuation">;</span>举例：<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> mysql<span class="token punctuation">.</span><span class="token keyword">proc</span> <span class="token keyword">where</span> <span class="token number">db</span><span class="token operator">=</span><span class="token string">'day0401'</span> \G<span class="token punctuation">;</span></code></pre><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 查看创建某个存储过程的语句信息</span><span class="token keyword">show</span> <span class="token keyword">create</span> <span class="token keyword">procedure</span> 存储过程名<span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 举例：</span><span class="token keyword">show</span> <span class="token keyword">create</span> <span class="token keyword">procedure</span> pro_test1 \G<span class="token punctuation">;</span></code></pre><h3 id="3、删除存储过程"><a href="#3、删除存储过程" class="headerlink" title="3、删除存储过程"></a>3、删除存储过程</h3><pre class=" language-sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">procedure</span> 存储过程名<span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 举例：</span><span class="token keyword">drop</span> <span class="token keyword">procedure</span> pro_test1<span class="token punctuation">;</span></code></pre><h3 id="4、存储过程语法"><a href="#4、存储过程语法" class="headerlink" title="4、存储过程语法"></a>4、存储过程语法</h3><h4 id="1、变量"><a href="#1、变量" class="headerlink" title="1、变量"></a>1、变量</h4><ul><li><p>declare（声明）</p><p>​    通过 declare 可以定义一个局部变量，该变量的作用范围只能在 BEGIN…END 块中。</p></li></ul><pre class=" language-sql"><code class="language-sql">  <span class="token keyword">declare</span> 变量名<span class="token number">1</span><span class="token punctuation">,</span>变量名<span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  变量的数据类型 <span class="token punctuation">[</span><span class="token keyword">default</span> 默认值<span class="token punctuation">]</span> </code></pre><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 1.创建存储过程</span>  <span class="token keyword">delimiter</span> $  <span class="token keyword">create</span> <span class="token keyword">procedure</span> pro_test2<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">begin</span>      <span class="token keyword">declare</span> num <span class="token keyword">int</span> <span class="token keyword">default</span> <span class="token number">5</span><span class="token punctuation">;</span>      <span class="token keyword">select</span> concat<span class="token punctuation">(</span><span class="token string">'num的值是:'</span><span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">end</span> $    <span class="token comment" spellcheck="true">-- 2.调用存储过程</span>  <span class="token keyword">call</span> pro_test2<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li><p>SET(赋值)</p><p>直接赋值使用 SET，可以赋常量或者赋表达式</p></li></ul><pre class=" language-sql"><code class="language-sql">  <span class="token keyword">SET</span> 变量名<span class="token number">1</span> <span class="token operator">=</span> 表达式<span class="token number">1</span><span class="token punctuation">,</span>变量名<span class="token number">2</span><span class="token operator">=</span>表达式<span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> </code></pre><div style="background-color:#42C0A3;">示例:定义变量num默认值是0，设置num值+10 ，并查询</div><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 1.创建存储过程</span>  <span class="token keyword">create</span> <span class="token keyword">procedure</span> pro_test3<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">begin</span>      <span class="token keyword">declare</span> num <span class="token keyword">int</span> <span class="token keyword">default</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">set</span> num <span class="token operator">=</span> num <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span>      <span class="token keyword">select</span> num<span class="token punctuation">;</span>  <span class="token keyword">end</span>$  <span class="token comment" spellcheck="true">-- 2.调用存储过程</span>  <span class="token keyword">call</span> pro_test3<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>也可以通过select … into 方式进行赋值操作 :</p><pre class=" language-sql"><code class="language-sql">  <span class="token comment" spellcheck="true">-- 1.创建存储过程</span><span class="token keyword">create</span> <span class="token keyword">procedure</span> pro_test4<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">begin</span>      <span class="token keyword">declare</span> num <span class="token keyword">int</span><span class="token punctuation">;</span>      <span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">into</span> num <span class="token keyword">from</span> city<span class="token punctuation">;</span>      <span class="token keyword">select</span> concat<span class="token punctuation">(</span><span class="token string">'city表中的记录数为:'</span><span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">end</span>$  <span class="token comment" spellcheck="true">-- 2.调用存储过程</span>  <span class="token keyword">call</span> pro_test4<span class="token punctuation">(</span><span class="token punctuation">)</span>$</code></pre><h4 id="2、if条件判断"><a href="#2、if条件判断" class="headerlink" title="2、if条件判断"></a>2、if条件判断</h4><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- if条件后面为真执行对应then后面的语句，不满足就执行后面的elseif，如果elseif条件也不满足则继续向下执行判断，如果都不满足条件就执行else后面的语句</span><span class="token keyword">if</span> 条件<span class="token number">1</span> <span class="token keyword">then</span> 语句<span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">[</span>elseif 条件<span class="token number">2</span> <span class="token keyword">then</span> 语句<span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token keyword">else</span> 语句n<span class="token punctuation">;</span><span class="token punctuation">]</span><span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span></code></pre><p><strong>注意：1）上述if只能用在begin end中.2）elseif不能分开写，必须在一起，否则报错</strong></p><p>需求：</p><pre class=" language-java"><code class="language-java">根据定义的体重变量，判定当前体重的所属的身材类型    <span class="token number">170</span> 及以上 <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">></span> 身材肥胖    <span class="token number">150</span> <span class="token operator">-</span> <span class="token number">170</span> <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">></span> 标准身材    <span class="token number">150</span> 以下 <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">></span> 身材偏瘦</code></pre><div style="background-color:#42C0A3;">示例: </div><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 创建存储过程</span><span class="token keyword">delimiter</span> $<span class="token keyword">create</span> <span class="token keyword">procedure</span> pro_test5<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">begin</span>    <span class="token keyword">declare</span> weight<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token keyword">default</span> <span class="token number">175</span><span class="token punctuation">;</span>    <span class="token keyword">declare</span> description <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> weight <span class="token operator">>=</span> <span class="token number">170</span> <span class="token keyword">then</span>      <span class="token keyword">set</span> description <span class="token operator">=</span> <span class="token string">'身材肥胖'</span><span class="token punctuation">;</span>    elseif weight <span class="token operator">>=</span> <span class="token number">150</span> <span class="token operator">and</span> weight <span class="token operator">&lt;</span> <span class="token number">170</span> <span class="token keyword">then</span>      <span class="token keyword">set</span> description <span class="token operator">=</span> <span class="token string">'标准身材'</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>      <span class="token keyword">set</span> description <span class="token operator">=</span> <span class="token string">'身材偏瘦'</span><span class="token punctuation">;</span>    <span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span>    <span class="token keyword">select</span> concat<span class="token punctuation">(</span><span class="token string">'体重:'</span><span class="token punctuation">,</span>weight<span class="token punctuation">,</span><span class="token string">'对应的身材类型为:'</span><span class="token punctuation">,</span>description<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span>$<span class="token comment" spellcheck="true">-- 调用存储过程</span><span class="token keyword">call</span> pro_test5<span class="token punctuation">(</span><span class="token punctuation">)</span>$</code></pre><h4 id="3、-传递参数"><a href="#3、-传递参数" class="headerlink" title="3、 传递参数"></a>3、 传递参数</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">procedure</span> procedure_name<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">in</span><span class="token operator">/</span><span class="token keyword">out</span><span class="token operator">/</span><span class="token keyword">inout</span><span class="token punctuation">]</span>  参数名 <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>参数类型<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">IN</span> : <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>该参数可以作为输入，也就是需要调用方传入值 <span class="token punctuation">,</span> 默认<span class="token keyword">OUT</span>: <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>该参数作为输出，也就是该参数可以作为返回值<span class="token keyword">INOUT</span>: 既可以作为输入参数，也可以作为输出参数</code></pre><h5 id="IN-输入"><a href="#IN-输入" class="headerlink" title="IN 输入"></a>IN 输入</h5><p>IN :  该参数可以作为输入，也就是需要调用方传入值 , 默认。</p><p>调用格式：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">call</span> 存储过程名<span class="token punctuation">(</span>数据<span class="token punctuation">)</span>$</code></pre><p>需求:</p><pre class=" language-java"><code class="language-java">根据传入的体重变量，判定当前体重的所属的身材类型 </code></pre><div style="background-color:#42C0A3;">示例: </div><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 创建存储过程，不用声明weight变量了，已经在小括号中定义了</span><span class="token keyword">delimiter</span> $<span class="token keyword">create</span> <span class="token keyword">procedure</span> pro_test6<span class="token punctuation">(</span><span class="token operator">in</span> weight <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token keyword">begin</span>    <span class="token keyword">declare</span> description <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> weight <span class="token operator">>=</span> <span class="token number">170</span> <span class="token keyword">then</span>      <span class="token keyword">set</span> description <span class="token operator">=</span> <span class="token string">'身材肥胖'</span><span class="token punctuation">;</span>    elseif weight <span class="token operator">>=</span> <span class="token number">150</span> <span class="token operator">and</span> weight <span class="token operator">&lt;</span> <span class="token number">170</span> <span class="token keyword">then</span>      <span class="token keyword">set</span> description <span class="token operator">=</span> <span class="token string">'标准身材'</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>      <span class="token keyword">set</span> description <span class="token operator">=</span> <span class="token string">'身材偏瘦'</span><span class="token punctuation">;</span>    <span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span>    <span class="token keyword">select</span> concat<span class="token punctuation">(</span><span class="token string">'体重:'</span><span class="token punctuation">,</span>weight<span class="token punctuation">,</span><span class="token string">'对应的身材类型为:'</span><span class="token punctuation">,</span>description<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span>$<span class="token comment" spellcheck="true">-- 调用存储过程</span><span class="token keyword">call</span> pro_test6<span class="token punctuation">(</span><span class="token number">160</span><span class="token punctuation">)</span>$</code></pre><h5 id="OUT-输出"><a href="#OUT-输出" class="headerlink" title="OUT 输出"></a>OUT 输出</h5><p>OUT:  该参数作为输出，也就是该参数可以作为返回值</p><div style="background-color:#42C0A3;">示例: </div><p>需求:</p><pre class=" language-sql"><code class="language-sql">根据传入的体重变量，获取当前体重的所属的身材类型</code></pre><p>【创建存储过程的sql语句】</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 创建存储过程</span><span class="token keyword">delimiter</span> $<span class="token comment" spellcheck="true">-- 不用声明weight和description变量了，已经在小括号中定义了,description表示返回，我们在调用存储过程的时候需要使用变量接收</span><span class="token keyword">create</span> <span class="token keyword">procedure</span> pro_test7<span class="token punctuation">(</span><span class="token operator">in</span> weight <span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">out</span> description <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">begin</span>    <span class="token keyword">if</span> weight <span class="token operator">>=</span> <span class="token number">170</span> <span class="token keyword">then</span>      <span class="token keyword">set</span> description <span class="token operator">=</span> <span class="token string">'身材肥胖'</span><span class="token punctuation">;</span>    elseif weight <span class="token operator">>=</span> <span class="token number">150</span> <span class="token operator">and</span> weight <span class="token operator">&lt;</span> <span class="token number">170</span> <span class="token keyword">then</span>      <span class="token keyword">set</span> description <span class="token operator">=</span> <span class="token string">'标准身材'</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>      <span class="token keyword">set</span> description <span class="token operator">=</span> <span class="token string">'身材偏瘦'</span><span class="token punctuation">;</span>    <span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span><span class="token keyword">end</span>$</code></pre><p>说明：由于我们需要在调用存储过程中接收返回的description的值，所以我们不用在存储过程中使用select查看description的值了。</p><p>上述我们只是创建了有返回值的存储过程，那么接下来我们需要调用存储过程，调用有返回值的存储过程需要使用变量接收返回值。</p><p>那么这里我们可以按照如下方式接收返回值：</p><p>【调用存储过程】</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 调用存储过程</span><span class="token keyword">call</span> pro_test7<span class="token punctuation">(</span><span class="token number">168</span><span class="token punctuation">,</span><span class="token variable">@desc</span><span class="token punctuation">)</span>$</code></pre><p><b><font color="red">知识小贴士</font></b><br>@desc : 这种变量要在变量名称前面加上“@”符号，叫做用户会话变量，代表整个会话过程他都是有作用的。@后面属于标识符，随便定义。</p><p>作用域：针对当前会话(连接)有效，同于会话变量的作用域。</p><p>【查看返回值变量接收的结果】</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token variable">@desc$</span></code></pre><p>说明：本身存储过程是没有返回值的函数，是一个过程，没有结果。上述所说的返回值其实不是真正返回值，只是我们传递一个变量到存储过程中，在存储过程中修改了该变量值，然后在调用存储过程的位置在获取修改后的变量值。</p><p>举例：类似于java中在方法外部定义变量，在方法中修改变量，然后在方法外部获取修改后的变量是一个意思。</p><h5 id="INOUT输入输出"><a href="#INOUT输入输出" class="headerlink" title="INOUT输入输出"></a>INOUT输入输出</h5><p>INOUT: 既可以作为输入参数，也可以作为输出参数</p><p>需求：创建带inout模式参数的存储过程。</p><p>传入a和b两个值，最终将a和b都乘以2并返回。</p><p>【创建存储过程】</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">procedure</span> pro_test8<span class="token punctuation">(</span><span class="token keyword">inout</span> <span class="token number">a</span> <span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">inout</span> <span class="token number">b</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token keyword">begin</span>    <span class="token keyword">set</span> <span class="token number">a</span> <span class="token operator">=</span> <span class="token number">a</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">set</span> <span class="token number">b</span> <span class="token operator">=</span> <span class="token number">b</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">end</span>$</code></pre><p>【调用存储过程】</p><p>说明：我们在调用存储过程的时候需要给a和b传入两个数据，首先我们不能直接传递常量，因为我们还要使用select进行对结果的查询。所以这里我们先使用set命令定义两个变量。</p><p>自定义用户变量，声明并初始化：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">set</span> @变量名<span class="token operator">=</span>值$举例：<span class="token keyword">set</span> <span class="token variable">@m</span><span class="token operator">=</span><span class="token number">10</span>$</code></pre><p>代码：</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 定义用户变量并初始化</span><span class="token keyword">set</span> <span class="token variable">@m</span><span class="token operator">=</span><span class="token number">10</span>$<span class="token keyword">set</span> <span class="token variable">@n</span><span class="token operator">=</span><span class="token number">20</span>$<span class="token comment" spellcheck="true">-- 调用存储过程并将变量值传递给存储过程中的a和b</span><span class="token keyword">call</span> pro_test8<span class="token punctuation">(</span><span class="token variable">@m</span><span class="token punctuation">,</span><span class="token variable">@n</span><span class="token punctuation">)</span>$</code></pre><p>【查看存储过程返回的值】</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token variable">@m</span><span class="token punctuation">,</span><span class="token variable">@n$</span></code></pre><h4 id="4、case结构"><a href="#4、case结构" class="headerlink" title="4、case结构"></a>4、case结构</h4><pre class=" language-sql"><code class="language-sql">方式一 :<span class="token comment" spellcheck="true">-- 拿case后面的值和when后面的值依次比较，相等就执行then后面的语句，如果都不相等，就执行else后面的语句</span><span class="token keyword">CASE</span> 值    <span class="token keyword">WHEN</span> 值<span class="token number">1</span> <span class="token keyword">THEN</span> 语句<span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">[</span><span class="token keyword">WHEN</span> 值<span class="token number">2</span> <span class="token keyword">THEN</span> 语句<span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">[</span><span class="token keyword">ELSE</span> 语句<span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">END</span> <span class="token keyword">CASE</span><span class="token punctuation">;</span>方式二 :<span class="token comment" spellcheck="true">-- 说明：WHEN后面的任意一个 条件表达式 是true，就执行then后面的语句，如果都是false，那么执行else后面的语句，多个when只会执行一个</span><span class="token keyword">CASE</span>    <span class="token keyword">WHEN</span> 条件表达式<span class="token number">1</span> <span class="token keyword">THEN</span> 语句<span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">[</span><span class="token keyword">WHEN</span> 条件表达式<span class="token number">2</span> <span class="token keyword">THEN</span> 语句<span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">]</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">[</span><span class="token keyword">ELSE</span> 语句<span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">END</span> <span class="token keyword">CASE</span><span class="token punctuation">;</span></code></pre><p>需求:</p><pre class=" language-java"><code class="language-java">给定一个月份 <span class="token punctuation">,</span> 然后计算出所在的季度</code></pre><p>sql</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 创建存储过程</span><span class="token keyword">delimiter</span> $<span class="token keyword">create</span> <span class="token keyword">procedure</span> pro_test9<span class="token punctuation">(</span><span class="token operator">in</span> month <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token keyword">begin</span>    <span class="token keyword">declare</span> result <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">case</span>     <span class="token keyword">when</span> month <span class="token operator">>=</span> <span class="token number">1</span> <span class="token operator">and</span> month <span class="token operator">&lt;=</span><span class="token number">3</span> <span class="token keyword">then</span>       <span class="token keyword">set</span> result <span class="token operator">=</span> <span class="token string">'第一季度'</span><span class="token punctuation">;</span>     <span class="token keyword">when</span> month <span class="token operator">>=</span> <span class="token number">4</span> <span class="token operator">and</span> month <span class="token operator">&lt;=</span><span class="token number">6</span> <span class="token keyword">then</span>       <span class="token keyword">set</span> result <span class="token operator">=</span> <span class="token string">'第二季度'</span><span class="token punctuation">;</span>     <span class="token keyword">when</span> month <span class="token operator">>=</span> <span class="token number">7</span> <span class="token operator">and</span> month <span class="token operator">&lt;=</span><span class="token number">9</span> <span class="token keyword">then</span>       <span class="token keyword">set</span> result <span class="token operator">=</span> <span class="token string">'第三季度'</span><span class="token punctuation">;</span>     <span class="token keyword">else</span>       <span class="token keyword">set</span> result <span class="token operator">=</span> <span class="token string">'第四季度'</span><span class="token punctuation">;</span>    <span class="token keyword">end</span> <span class="token keyword">case</span><span class="token punctuation">;</span>        <span class="token keyword">select</span> concat<span class="token punctuation">(</span><span class="token string">'您输入的月份为 :'</span><span class="token punctuation">,</span> month <span class="token punctuation">,</span> <span class="token string">',该月份为 : '</span> <span class="token punctuation">,</span> result<span class="token punctuation">)</span> <span class="token keyword">as</span> content <span class="token punctuation">;</span><span class="token keyword">end</span>$<span class="token comment" spellcheck="true">-- 调用存储过程</span><span class="token keyword">call</span> pro_test9<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>$</code></pre><h4 id="5、mysql存储过程中的三种循环"><a href="#5、mysql存储过程中的三种循环" class="headerlink" title="5、mysql存储过程中的三种循环"></a>5、mysql存储过程中的三种循环</h4><h6 id="1、while循环"><a href="#1、while循环" class="headerlink" title="1、while循环"></a>1、while循环</h6><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 如果循环条件为true，则一直执行do后面的sql语句，如果循环条件为false，则结束while循环</span><span class="token keyword">while</span> 循环条件 <span class="token keyword">do</span>    sql语句<span class="token keyword">end</span> <span class="token keyword">while</span><span class="token punctuation">;</span></code></pre><p>需求:</p><pre class=" language-java"><code class="language-java">计算从 <span class="token number">1</span>加到n的值</code></pre><p>sql</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">delimiter</span> $    <span class="token comment" spellcheck="true">-- 创建存储过程，使用变量n接收传入的参数</span><span class="token keyword">create</span> <span class="token keyword">procedure</span> pro_test10<span class="token punctuation">(</span><span class="token operator">in</span> n <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token keyword">begin</span>    <span class="token comment" spellcheck="true">-- 声明变量total保存最后的和值，默认值是0</span>    <span class="token keyword">declare</span> total <span class="token keyword">int</span> <span class="token keyword">default</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">-- 声明变量num初始化值是1作为循环的初始化</span>    <span class="token keyword">declare</span> num <span class="token keyword">int</span> <span class="token keyword">default</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">-- num&lt;=n 表示循环条件，如果为true，满足循环条件执行do后面的sql语句即循环体</span>    <span class="token keyword">while</span> num<span class="token operator">&lt;=</span>n <span class="token keyword">do</span>        <span class="token comment" spellcheck="true">-- 每次循环设置total的值为total + num</span>          <span class="token keyword">set</span> total <span class="token operator">=</span> total <span class="token operator">+</span> num<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">-- 每次循环让num进行+1</span>        <span class="token keyword">set</span> num <span class="token operator">=</span> num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">end</span> <span class="token keyword">while</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">-- 查看和值total</span>    <span class="token keyword">select</span> total<span class="token punctuation">;</span><span class="token keyword">end</span>$<span class="token comment" spellcheck="true">-- 调用存储过程</span><span class="token keyword">call</span> pro_test10<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>$</code></pre><h6 id="2、repeat结构"><a href="#2、repeat结构" class="headerlink" title="2、repeat结构"></a>2、repeat结构</h6><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 如果不满足until后面的循环条件则执行循环体代码，直到满足循环条件就结束循环体代码</span>repeat    <span class="token comment" spellcheck="true">-- 循环体</span>    sql语句    until  循环条件 <span class="token comment" spellcheck="true">-- 注意：循环条件后面不能加分号，不满足语法规则</span><span class="token keyword">end</span> repeat<span class="token punctuation">;</span></code></pre><p>需求:</p><pre class=" language-java"><code class="language-java">计算从 <span class="token number">1</span>加到n的值</code></pre><p>sql</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">delimiter</span> $<span class="token comment" spellcheck="true">-- 创建存储过程</span><span class="token comment" spellcheck="true">-- 使用参数n接收调用存储过程传入的数据</span><span class="token keyword">create</span> <span class="token keyword">procedure</span> pro_test11<span class="token punctuation">(</span><span class="token operator">in</span> n <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token keyword">begin</span>    <span class="token comment" spellcheck="true">-- 声明变量total保存和值，初始化值是0</span>    <span class="token keyword">declare</span> total <span class="token keyword">int</span> <span class="token keyword">default</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">-- 使用repeat循环</span>    repeat        <span class="token comment" spellcheck="true">-- 每次循环设置total等于total + n 就是求n+(n-1)....+1</span>          <span class="token keyword">set</span> total <span class="token operator">=</span> total <span class="token operator">+</span> n<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">-- 每次循环将n进行减1</span>          <span class="token keyword">set</span> n <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">-- 当n等于0时停止repeat循环，这里不能加分号否则报错</span>        until n<span class="token operator">=</span><span class="token number">0</span>     <span class="token keyword">end</span> repeat<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">-- 查看总和值total</span>    <span class="token keyword">select</span> total <span class="token punctuation">;</span><span class="token keyword">end</span>$<span class="token comment" spellcheck="true">-- 调用存储过程</span><span class="token keyword">call</span> pro_test11<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>$</code></pre><h6 id="3、loop-leave语句"><a href="#3、loop-leave语句" class="headerlink" title="3、loop leave语句"></a>3、loop leave语句</h6><p>loop 实现简单的循环，退出循环的条件需要使用其他的语句定义，通常可以使用 leave 语句实现</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true"># 死循环，需要用leave才能跳出</span>循环标记:loop    <span class="token comment" spellcheck="true">-- 循环体</span>    sql语句    <span class="token keyword">if</span> 条件 <span class="token keyword">then</span>        leave 循环标记<span class="token punctuation">;</span><span class="token keyword">end</span> loop 循环标记<span class="token punctuation">;</span></code></pre><p>需求: 使用loop和leave实现数字累加</p><p>sql:</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">delimiter</span> $<span class="token comment" spellcheck="true">-- 创建存储过程</span><span class="token comment" spellcheck="true">-- 使用参数n接收调用存储过程传入的数据</span><span class="token keyword">create</span> <span class="token keyword">procedure</span> pro_test12<span class="token punctuation">(</span><span class="token operator">in</span> n <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token keyword">begin</span>    <span class="token comment" spellcheck="true">-- 声明变量total保存和值，初始化值是0</span>    <span class="token keyword">declare</span> total <span class="token keyword">int</span> <span class="token keyword">default</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">-- 使用loop循环,c表示循环别名</span>    <span class="token number">c</span>:loop        <span class="token comment" spellcheck="true">-- 每次循环设置total等于total + n 就是求n+(n-1)....+1</span>          <span class="token keyword">set</span> total <span class="token operator">=</span> total <span class="token operator">+</span> n<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">-- 每次循环将n进行减1</span>          <span class="token keyword">set</span> n <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">-- 判断n是否小于等于0，如果是结束loop循环</span>          <span class="token keyword">if</span> n<span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token keyword">then</span>              <span class="token comment" spellcheck="true">-- 说明n小于等于0了，使用leave结束loop循环</span>              leave <span class="token number">c</span><span class="token punctuation">;</span>          <span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">-- 结束loop循环后面加一个loop循环的别名</span>    <span class="token keyword">end</span> loop <span class="token number">c</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">-- 查看总和值total</span>    <span class="token keyword">select</span> total <span class="token punctuation">;</span><span class="token keyword">end</span>$<span class="token comment" spellcheck="true">-- 调用存储过程</span><span class="token keyword">call</span> pro_test12<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>$</code></pre><h3 id="5、游标-光标-了解"><a href="#5、游标-光标-了解" class="headerlink" title="5、游标/光标(了解)"></a>5、游标/光标(了解)</h3><blockquote><p>游标是用来存储<strong>查询结果集</strong>的 , 在存储过程和函数中可以使用光标对结果集进行循环的处理。光标的使用包括光标的declare(声明)、open(打开)、fetch(获取游标中的数据)和 close(关闭)</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token keyword">declare</span> 游标名 <span class="token keyword">cursor</span> <span class="token keyword">for</span> 查询数据的结果集的sql语句 <span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">-- 声明游标，执行完查询的sql语句之后将结果集放到游标中了</span><span class="token keyword">open</span> 游标名 <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 打开游标</span><span class="token keyword">fetch</span> 游标名  <span class="token keyword">INTO</span> 变量名<span class="token punctuation">,</span>变量名 <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 获取游标中的数据并赋给指定变量，执行一次fetch获取游标中的一行数据，然后游标中的指针就会向下移动一次</span><span class="token keyword">close</span> 游标名<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 关闭游标</span></code></pre><p><b>方式1-实例sql:查询emp中所有的数据存储到游标中，并取出游标中的数据</b></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">delimiter</span> $<span class="token comment" spellcheck="true">-- 创建存储过程</span><span class="token keyword">create</span> <span class="token keyword">procedure</span> pro_test13<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">begin</span>    <span class="token comment" spellcheck="true">-- 声明和数据表列对应的列来存储列值</span>    <span class="token keyword">declare</span> e_id <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">declare</span> e_name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">declare</span> e_age <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">declare</span> e_salary <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">-- 创建游标</span>    <span class="token comment" spellcheck="true">-- emp_result 表示游标名  cursor for 固定的关键字</span>    <span class="token comment" spellcheck="true">-- 整体表示将从emp表中查询所有的数据存储到游标emp_result中</span>    <span class="token keyword">declare</span> emp_result <span class="token keyword">cursor</span> <span class="token keyword">for</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span>      <span class="token keyword">open</span> emp_result<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 打开游标</span>    <span class="token comment" spellcheck="true">-- 取出游标中的第一行数据放到对应的变量中</span>    <span class="token keyword">fetch</span> emp_result <span class="token keyword">into</span> e_id<span class="token punctuation">,</span>e_name<span class="token punctuation">,</span>e_age<span class="token punctuation">,</span>e_salary<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">-- 查询变量的结果</span>     <span class="token keyword">select</span> concat<span class="token punctuation">(</span><span class="token string">'id='</span><span class="token punctuation">,</span>e_id <span class="token punctuation">,</span> <span class="token string">', name='</span><span class="token punctuation">,</span>e_name<span class="token punctuation">,</span> <span class="token string">', age='</span><span class="token punctuation">,</span> e_age<span class="token punctuation">,</span> <span class="token string">', 薪资为:    '</span><span class="token punctuation">,</span>e_salary<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">--  取出游标中的第2行数据放到对应的变量中</span>    <span class="token keyword">fetch</span> emp_result <span class="token keyword">into</span> e_id<span class="token punctuation">,</span>e_name<span class="token punctuation">,</span>e_age<span class="token punctuation">,</span>e_salary<span class="token punctuation">;</span>     <span class="token keyword">select</span> concat<span class="token punctuation">(</span><span class="token string">'id='</span><span class="token punctuation">,</span>e_id <span class="token punctuation">,</span> <span class="token string">', name='</span><span class="token punctuation">,</span>e_name<span class="token punctuation">,</span> <span class="token string">', age='</span><span class="token punctuation">,</span> e_age<span class="token punctuation">,</span> <span class="token string">', 薪资为:    '</span><span class="token punctuation">,</span>e_salary<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">-- 取出游标中的第3行数据放到对应的变量中</span>    <span class="token keyword">fetch</span> emp_result <span class="token keyword">into</span> e_id<span class="token punctuation">,</span>e_name<span class="token punctuation">,</span>e_age<span class="token punctuation">,</span>e_salary<span class="token punctuation">;</span>     <span class="token keyword">select</span> concat<span class="token punctuation">(</span><span class="token string">'id='</span><span class="token punctuation">,</span>e_id <span class="token punctuation">,</span> <span class="token string">', name='</span><span class="token punctuation">,</span>e_name<span class="token punctuation">,</span> <span class="token string">', age='</span><span class="token punctuation">,</span> e_age<span class="token punctuation">,</span> <span class="token string">', 薪资为:    '</span><span class="token punctuation">,</span>e_salary<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">-- 取出游标中的第4行数据放到对应的变量中</span>    <span class="token keyword">fetch</span> emp_result <span class="token keyword">into</span> e_id<span class="token punctuation">,</span>e_name<span class="token punctuation">,</span>e_age<span class="token punctuation">,</span>e_salary<span class="token punctuation">;</span>     <span class="token keyword">select</span> concat<span class="token punctuation">(</span><span class="token string">'id='</span><span class="token punctuation">,</span>e_id <span class="token punctuation">,</span> <span class="token string">', name='</span><span class="token punctuation">,</span>e_name<span class="token punctuation">,</span> <span class="token string">', age='</span><span class="token punctuation">,</span> e_age<span class="token punctuation">,</span> <span class="token string">', 薪资为:    '</span><span class="token punctuation">,</span>e_salary<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">close</span> emp_result<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 关闭游标</span><span class="token keyword">end</span>$<span class="token comment" spellcheck="true">-- 调用存储过程</span><span class="token keyword">call</span> pro_test13<span class="token punctuation">(</span><span class="token punctuation">)</span>$</code></pre><p><strong>方式2-实例sql:</strong></p><p>说明：使用循环实现上述过程，但是循环需要结束条件，那么我们在这里怎样书写结束条件呢？</p><p>有两种方式：</p><p>​    1）查询数据表的所有数据 select count(*)…..将行记录数赋值给变量num,每次循环num都减1，当变量变为0停止循环。</p><p>​    2）我们希望当游标的指针移动到最后找不到数据就不找了，对于这种情况mysql提供一种思想就是句柄(出错处理器)，当找不到使用句柄(出错处理器)方式可以实现，<strong>要求声明句柄(出错处理器)和声明游标必须放在一起，并且声明句柄(出错处理器)放在声明游标下面</strong>：</p><pre class=" language-sql"><code class="language-sql"> <span class="token comment" spellcheck="true">-- 创建游标</span> <span class="token keyword">declare</span> emp_result <span class="token keyword">cursor</span> <span class="token keyword">for</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 声明句柄</span> <span class="token comment" spellcheck="true">-- declare 表示声明  exit 退出 handler 处理器 set 变量 = 初始化值 设置值</span> <span class="token keyword">declare</span> <span class="token keyword">exit</span> <span class="token keyword">handler</span> <span class="token keyword">for</span> <span class="token operator">not</span> found <span class="token keyword">set</span> 变量 <span class="token operator">=</span> 初始化值<span class="token punctuation">;</span></code></pre><p>sql语句演示：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">delimiter</span> $<span class="token comment" spellcheck="true">-- 创建存储过程</span><span class="token keyword">create</span> <span class="token keyword">procedure</span> pro_test14<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">begin</span>    <span class="token comment" spellcheck="true">-- 声明和数据表列对应的列来存储列值</span>    <span class="token keyword">declare</span> e_id <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">declare</span> e_name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">declare</span> e_age <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">declare</span> e_salary <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">-- 声明变量has_data作为游标中的指针是否还可以找到数据，默认值是1表示有数据，0表示没有数据</span>    <span class="token keyword">declare</span> has_data <span class="token keyword">int</span> <span class="token keyword">default</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">-- 创建游标</span>    <span class="token comment" spellcheck="true">-- emp_result 表示游标名  cursor for 固定的关键字</span>    <span class="token comment" spellcheck="true">-- 整体表示将从emp表中查询所有的数据存储到游标emp_result中</span>    <span class="token keyword">declare</span> emp_result <span class="token keyword">cursor</span> <span class="token keyword">for</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span>      <span class="token keyword">declare</span> <span class="token keyword">exit</span> <span class="token keyword">handler</span> <span class="token keyword">for</span> <span class="token operator">not</span> found <span class="token keyword">set</span> has_data <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">open</span> emp_result<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 打开游标</span>       <span class="token comment" spellcheck="true">-- 循环</span>    repeat     <span class="token comment" spellcheck="true">-- 取出游标中的第一行数据放到对应的变量中</span>    <span class="token keyword">fetch</span> emp_result <span class="token keyword">into</span> e_id<span class="token punctuation">,</span>e_name<span class="token punctuation">,</span>e_age<span class="token punctuation">,</span>e_salary<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">-- 查询变量的结果</span>     <span class="token keyword">select</span> concat<span class="token punctuation">(</span><span class="token string">'id='</span><span class="token punctuation">,</span>e_id <span class="token punctuation">,</span> <span class="token string">', name='</span><span class="token punctuation">,</span>e_name<span class="token punctuation">,</span> <span class="token string">', age='</span><span class="token punctuation">,</span> e_age<span class="token punctuation">,</span> <span class="token string">', 薪资为:    '</span><span class="token punctuation">,</span>e_salary<span class="token punctuation">)</span><span class="token punctuation">;</span>    until has_data <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">end</span> repeat<span class="token punctuation">;</span>    <span class="token keyword">close</span> emp_result<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 关闭游标</span><span class="token keyword">end</span>$<span class="token comment" spellcheck="true">-- 调用存储过程</span><span class="token keyword">call</span> pro_test13<span class="token punctuation">(</span><span class="token punctuation">)</span>$</code></pre><h2 id="2、存储函数"><a href="#2、存储函数" class="headerlink" title="2、存储函数"></a>2、存储函数</h2><p>函数 ： 是一个有返回值的过程 ；<br>过程 ： 是一个没有返回值的函数 ；</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 创建存储函数</span><span class="token keyword">delimiter</span> $<span class="token keyword">create</span> <span class="token keyword">function</span> 存储函数名<span class="token punctuation">(</span>参数名 参数类型<span class="token punctuation">)</span><span class="token keyword">returns</span> 返回值的数据类型<span class="token keyword">begin</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token keyword">return</span> 值<span class="token punctuation">;</span><span class="token keyword">end</span> $<span class="token comment" spellcheck="true">-- 调用存储函数</span><span class="token keyword">select</span> 存储函数名<span class="token punctuation">(</span>实参<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>需求: 定义一个存储函数,在city表中根据传入的国家id,计算满足条件的总记录数</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">delimiter</span> $<span class="token comment" spellcheck="true">-- 创建存储函数</span><span class="token keyword">create</span> <span class="token keyword">function</span> fn1<span class="token punctuation">(</span>countryId <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token keyword">returns</span> <span class="token keyword">int</span><span class="token keyword">begin</span>    <span class="token keyword">declare</span> cnum <span class="token keyword">int</span> <span class="token punctuation">;</span>    <span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">into</span> cnum <span class="token keyword">from</span> city <span class="token keyword">where</span> country_id <span class="token operator">=</span> countryId<span class="token punctuation">;</span>    <span class="token keyword">return</span> cnum<span class="token punctuation">;</span><span class="token keyword">end</span>$<span class="token comment" spellcheck="true">-- 调用存储函数</span><span class="token keyword">select</span> fn1<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>$</code></pre><p><strong>mysql的设置默认是不允许创建函数。</strong></p><p>通过如下命令可以查看函数开启状态：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'%func%'</span><span class="token punctuation">;</span></code></pre><p><img src="https://i.loli.net/2021/09/02/izS5EAhPdqM7tyQ.png" alt="image-20200731101140383"></p><ul><li><p>解决办法1:开启函数功能即可。</p><p>在MySQL中创建函数时出现这种错误的解决方法：</p></li></ul><pre class=" language-sql"><code class="language-sql"> <span class="token keyword">set</span> <span class="token keyword">global</span> log_bin_trust_function_creators<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span></code></pre><p>不过这种做法重启mysql服务， 就失效了，又会变为off.</p><ul><li><p>解决办法2：</p><p>在my.ini里面设置</p></li></ul><pre class=" language-sql"><code class="language-sql">log<span class="token operator">-</span>bin<span class="token operator">-</span>trust<span class="token operator">-</span><span class="token keyword">function</span><span class="token operator">-</span>creators<span class="token operator">=</span><span class="token number">1</span></code></pre><p>不过这个需要重启服务.</p><h2 id="3、mysql体系"><a href="#3、mysql体系" class="headerlink" title="3、mysql体系"></a>3、mysql体系</h2><p><img src="https://i.loli.net/2021/09/02/mdj1RDnciuqvZCE.png" alt="image-20210902110712861"></p><h2 id="整个-MySQL-Server由以下组成"><a href="#整个-MySQL-Server由以下组成" class="headerlink" title="整个 MySQL Server由以下组成"></a>整个 MySQL Server由以下组成</h2><ul><li>Connection Pool :  连接池组件。<strong>连接池</strong>： 管理、缓冲用户的连接，线程处理等需要缓存的需求。</li><li>Management Services &amp; Utilities :  管理服务和工具组件。系统管理和控制工具，例如备份恢复、Mysql复制、集群等 </li><li>SQL Interface : SQL 接口组件。接受用户的SQL命令，并且返回用户需要查询的结果。</li><li>Parser :  查询分析器组件。SQL命令传递到解析器的时候会被解析器验证和解析(权限、语法结构) </li><li>Optimizer :  优化器组件。SQL语句在查询之前会使用查询优化器对查询进行优化</li><li>Caches &amp; Buffers :  缓冲池组件。如果查询缓存有命中的查询结果，查询语句就可以直接去查询缓存中取数据</li><li>Pluggable Storage Engines :  存储引擎。存储引擎说白了就是如何管理操作数据（存储数据、如何更新、查询数据等）的一种方法。因为在关系数据库中数据的存储是以表的形式存储的，所以存储引擎也可以称为表类型（即存储和操作此表的类型）</li><li>File System :  文件系统。存储的文件系统不仅包含数据，还包括索引、错误日志和慢查询日志等</li></ul><p><strong>总结：</strong></p><pre class=" language-markdown"><code class="language-markdown">1.客户端连接器：<span class="token code keyword">    可以使用各种不同的语言与数据库服务进行交互；</span>2.mysql服务<span class="token code keyword">    核心组件：</span><span class="token code keyword">        【1】连接池：用户认证（初步校验，校验用户名称或者密码是否正确）、线程复用、限制客户端的连接数，起到安全的作用等；</span><span class="token code keyword">        【2】SQL接口：专门接收客户端发送过来的sql语句（接收sql的门户）</span><span class="token code keyword">        【3】Parser:解析器，核心对sql语法进行解析，解析当前发送sql的用户是否对这个sql有执行的权限（access denied）；</span><span class="token code keyword">        【4】Optimizer:查询优化器，决定你的sql是否走索引，以及是否走什么索引，生成sql的执行计划；</span><span class="token code keyword">                select * from t where name like 'zhang%' and age > 38;</span><span class="token code keyword">                前提：name 和age 都创建了索引，应该走哪个索引呢？</span><span class="token code keyword">                    如果走name索引，查询出10w,如果走age，那么查询出1w;[索引查询小结果驱动]</span><span class="token code keyword">                数据库如何知道哪个索引查询结果多或者少呢？</span><span class="token code keyword">                    采样算法：从叶子节点随机采样几块，然后做大致判断；</span><span class="token code keyword">        【5】存储引擎：mysql与其他数据库不同，它才用插拔式的设计思想，将对数据的处理层抽取，叫做存储引擎； 说白了，存储引擎是存储数据，构建索引的技术，sql的增删改查操作都是由存储引擎层完成的；</span><span class="token code keyword">        【6】文件系统：存储引擎底层调用系统的文件系统完成数据的操作；         </span>3.其他：<span class="token code keyword">    管理服务和工具：</span><span class="token code keyword">        数据库备份与还原；</span><span class="token code keyword">        管理mysql集群等；</span><span class="token code keyword">    缓存组件：</span><span class="token code keyword">        作用：接口客户端的sql后，对sql进行hash运算得到换一个key，然后根据这个key从缓存中获取缓存数据，如果缓存的数据存在，直接响应客户端；</span><span class="token code keyword">        弊端：如果数据库一旦发生增删改操作，那么缓存数据清空；缓存维护成本很高，但是清理成本很低；</span><span class="token code keyword">        5.6 版本有缓存组件，但是到了8版本以上，这个模块剔除了；</span></code></pre><h2 id="4、存储引擎"><a href="#4、存储引擎" class="headerlink" title="4、存储引擎"></a>4、存储引擎</h2><blockquote><p>存储引擎是基于表的，而不是基于库的.</p><p>MySQL5.0支持的存储引擎包含 ： InnoDB 、MyISAM 、BDB、MEMORY、MERGE、EXAMPLE、NDB Cluster、ARCHIVE、CSV、BLACKHOLE、FEDERATED等，其中InnoDB和BDB提供事务安全表，其他存储引擎是非事务安全表。</p></blockquote><ul><li>可以通过指定 show engines ， 来查询当前数据库支持的存储引擎 </li><li>MySQL5.5之前的默认存储引擎是MyISAM，5.5之后就改为了InnoDB。</li></ul><p><strong>查看Mysql数据库默认的存储引擎 ， 指令</strong></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'%storage_engine%'</span><span class="token punctuation">;</span></code></pre><h3 id="1、存储引擎特性"><a href="#1、存储引擎特性" class="headerlink" title="1、存储引擎特性"></a>1、存储引擎特性</h3><p>下面重点介绍几种常用的存储引擎， 并对比各个存储引擎之间的区别， 如下表所示 ：</p><table><thead><tr><th>特点</th><th>InnoDB</th><th>MyISAM</th><th>MEMORY</th><th>MERGE</th><th>NDB</th></tr></thead><tbody><tr><td>存储限制</td><td>64TB</td><td>有</td><td>有</td><td>没有</td><td>有</td></tr><tr><td>事务安全</td><td><span style="background-color:yellow;">支持</span></td><td></td><td></td><td></td><td></td></tr><tr><td>锁机制</td><td><span style="background-color:yellow;">行锁(适合高并发)</span></td><td><span style="background-color:yellow;">表锁</span></td><td>表锁</td><td>表锁</td><td>行锁</td></tr><tr><td>B树索引</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>哈希索引</td><td></td><td></td><td>支持</td><td></td><td></td></tr><tr><td>全文索引</td><td>支持(5.6版本后)</td><td>支持</td><td></td><td></td><td></td></tr><tr><td>集群索引</td><td>支持</td><td></td><td></td><td></td><td></td></tr><tr><td>数据索引</td><td>支持</td><td></td><td>支持</td><td></td><td>支持</td></tr><tr><td>索引缓存</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>数据可压缩</td><td></td><td>支持</td><td></td><td></td><td></td></tr><tr><td>空间使用</td><td>高</td><td>低</td><td>N/A</td><td>低</td><td>低</td></tr><tr><td>内存使用</td><td>高</td><td>低</td><td>中等</td><td>低</td><td>高</td></tr><tr><td>批量插入速度</td><td>低</td><td>高</td><td>高</td><td>高</td><td>高</td></tr><tr><td>支持外键</td><td><span style="background-color:yellow;">支持</span></td><td></td><td></td><td></td><td></td></tr></tbody></table><p>下面我们将重点介绍最长使用的两种存储引擎： InnoDB、MyISAM ， 另外几种 了解即可。</p><h4 id="1、InnoDB（聚集索引）"><a href="#1、InnoDB（聚集索引）" class="headerlink" title="1、InnoDB（聚集索引）"></a>1、InnoDB（聚集索引）</h4><pre class=" language-markdown"><code class="language-markdown">支持外键支持事务支持行锁(支持表锁)支持数据崩溃后的自动恢复</code></pre><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 创建 innodb存储引擎表</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> tab_innodb<span class="token punctuation">(</span> id <span class="token keyword">INT</span><span class="token punctuation">,</span> name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">INNODB</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 这里不指定ENGINE = INNODB默认也是INNODB</span></code></pre><p>上述创建好数据表之后，在对应的mysql安装目录的数据库下面会创建如下两个文件：</p><p><img src="https://i.loli.net/2021/09/02/DwWAHceUtmdNCqB.png" alt="1588659606099"> </p><p>说明：</p><p>​    1.InnoDB存储引擎是将数据和索引都存储在一个文件中即.ibd中了。所以InnoDB存储引擎也称为聚集索引，因为将数据和索引放在一个文件中了。</p><p>​    2.InnoDB存储引擎是Mysql的默认存储引擎。InnoDB存储引擎提供了具有提交、回滚、恢复能力的事务安全。但是对比MyISAM的存储引擎，InnoDB写的处理效率差一些。</p><h4 id="2、MyISAM（非聚集索引）"><a href="#2、MyISAM（非聚集索引）" class="headerlink" title="2、MyISAM（非聚集索引）"></a>2、MyISAM（非聚集索引）</h4><pre class=" language-sql"><code class="language-sql">支持表锁<span class="token punctuation">(</span>不支持行锁<span class="token punctuation">)</span>不支持事务不支持外键不支持数据崩溃后自动恢复</code></pre><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 创建 myisam存储引擎表</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> tab_myisam<span class="token punctuation">(</span> id <span class="token keyword">INT</span><span class="token punctuation">,</span> name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">ENGINE</span><span class="token operator">=</span>MYISAM<span class="token punctuation">;</span></code></pre><p><img src="https://i.loli.net/2021/09/02/6bqEpOJB7NZStFo.png" alt="1588659151895"> </p><p>说明：</p><p>​    1.MyISAM存储引擎将数据和索引存入两个不同的文件。</p><p>​    2.MyISAM 不支持事务、也不支持外键，其优势是访问的速度快，对事务的完整性没有要求可以使用这个引擎来创建表 。</p><h4 id="3-存储引擎选择"><a href="#3-存储引擎选择" class="headerlink" title="3 存储引擎选择"></a>3 存储引擎选择</h4><p>在选择存储引擎时，应该根据应用系统的特点选择合适的存储引擎。对于复杂的应用系统，还可以根据实际情况选择多种存储引擎进行组合。以下是几种常用的存储引擎的使用环境。</p><ul><li>InnoDB :  是Mysql的默认存储引擎，用于事务处理应用程序，支持外键。如果应用对事务的完整性有比较高的要求，在并发条件下要求数据的一致性，数据操作除了插入和查询以外，还包含很多的更新、删除操作，那么InnoDB存储引擎是比较合适的选择。InnoDB存储引擎除了有效的降低由于删除和更新导致的锁定， 还可以确保事务的完整提交和回滚，对于类似于计费系统或者财务系统等对数据准确性要求比较高的系统，InnoDB是最合适的选择。</li><li>MyISAM  ： 如果应用是以读操作和插入操作为主，只有很少的更新和删除操作，并且对事务的完整性、并发性要求不是很高，那么选择这个存储引擎是非常合适的。</li></ul><p><strong>总结：</strong></p><p>聚集索引</p><pre><code>表中的索引和数据存储到一块    </code></pre><p><img src="https://i.loli.net/2021/09/02/YADVMLyglaKWm4X.png" alt="image-20210902140515864"></p><p>非聚集索引</p><pre><code>表中的索引和数据分文件独立存储</code></pre><p><img src="https://i.loli.net/2021/09/02/2AZlYRE8exOVWBM.png" alt="image-20210902140559193"></p><h2 id="5、锁"><a href="#5、锁" class="headerlink" title="5、锁"></a>5、锁</h2><h3 id="1、-锁分类"><a href="#1、-锁分类" class="headerlink" title="1、 锁分类"></a>1、 锁分类</h3><p>从对数据操作的粒度分 ：</p><ul><li><p> 表锁：操作时，会锁定整个表。</p></li><li><p> 行锁：操作时，会锁定当前操作行。</p></li></ul><p>从对数据操作的类型分：</p><ul><li><p>读锁（共享锁）：针对同一份数据，多个读操作可以同时进行而不会互相影响。</p></li><li><p>写锁（排它锁）：当前操作没有完成之前，它会阻断其他线程的写锁和读锁。</p></li></ul><h3 id="2、Mysql锁"><a href="#2、Mysql锁" class="headerlink" title="2、Mysql锁"></a>2、Mysql锁</h3><p>MySQL的锁机制比较简单，其最显著的特点是不同的存储引擎支持不同的锁机制。下表中罗列出了各存储引擎对锁的支持情况：</p><table><thead><tr><th>存储引擎</th><th>表级锁</th><th>行级锁</th><th>页面锁(了解)</th></tr></thead><tbody><tr><td>MyISAM</td><td>支持</td><td>不支持</td><td>不支持</td></tr><tr><td>InnoDB</td><td>支持</td><td>支持(默认)</td><td>不支持</td></tr></tbody></table><h3 id="3、MyISAM表锁"><a href="#3、MyISAM表锁" class="headerlink" title="3、MyISAM表锁"></a>3、MyISAM表锁</h3><h4 id="如何加表锁"><a href="#如何加表锁" class="headerlink" title="如何加表锁"></a>如何加表锁</h4><p>MyISAM 在执行查询语句（SELECT）前，会自动给涉及的所有表加读锁，在执行更新操作（UPDATE、DELETE、INSERT 等）前，会自动给涉及的表加写锁，这个过程并不需要用户干预，因此，用户一般不需要直接用</p><p> LOCK    TABLE 命令给 MyISAM 表显式加锁。如果显示加表锁，那么就不会自动加表锁。</p><div style="background-color:orange;">加表锁语法: </div><pre class=" language-sql"><code class="language-sql">加读锁 : <span class="token keyword">lock</span> <span class="token keyword">table</span> 表名 <span class="token keyword">read</span><span class="token punctuation">;</span>加写锁 : <span class="token keyword">lock</span> <span class="token keyword">table</span> 表名 <span class="token keyword">write</span>；</code></pre><h4 id="1、MYISAM读锁"><a href="#1、MYISAM读锁" class="headerlink" title="1、MYISAM读锁"></a>1、MYISAM读锁</h4><pre><code>读锁是共享锁，允许其他会话读，阻塞其他会话写。当我这个会话拿到读锁时，我可以读但不能写，其他会话也是写操作会阻塞，读操作不会阻塞。当你要查询其他表时，需要将当前的锁释放，其他表才能得到锁。</code></pre><h4 id="2、MYISAM写锁"><a href="#2、MYISAM写锁" class="headerlink" title="2、MYISAM写锁"></a>2、MYISAM写锁</h4><pre class=" language-sql"><code class="language-sql">写锁是排他锁，不允许其他会话读写，自己可以读写。</code></pre><pre><code>1） 对MyISAM 表的读操作，不会阻塞其他用户对同一表的读请求，但会阻塞对同一表的写请求；2） 对MyISAM 表的写操作，则会阻塞其他用户对同一表的读和写操作；简而言之，就是读锁会阻塞写，但是不会阻塞读。而写锁，则既会阻塞读，又会阻塞写。</code></pre><h3 id="4、innodb行锁"><a href="#4、innodb行锁" class="headerlink" title="4、innodb行锁"></a>4、innodb行锁</h3><h4 id="行锁介绍"><a href="#行锁介绍" class="headerlink" title="行锁介绍"></a>行锁介绍</h4><pre class=" language-markdown"><code class="language-markdown">行锁特点 ：<span class="token code keyword">        ①InnoDB 存储引擎默认采用行级锁；</span><span class="token code keyword">        ②因为行锁粒度小，所以性能开销相对较大，加锁相对较慢；</span><span class="token code keyword">        ③行锁可能会出现死锁问题；</span><span class="token code keyword">        ④行锁的锁定粒度较小，发生锁冲突的概率最低,所以相对支持较高的写并发；</span><span class="token code keyword">        ⑤Innodb支持事务特性，底层行级锁也有参与(通过索引更新一行时，加行锁)；</span>InnoDB 与 MyISAM 的最大不同有两点：一是InnoDB 支持事务；二是 InnoDB 采用了行级锁。行级锁也是和事务有关的。</code></pre><h4 id="InnoDB的行锁模式"><a href="#InnoDB的行锁模式" class="headerlink" title="InnoDB的行锁模式"></a>InnoDB的行锁模式</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">InnoDB</span> 实现了以下两种类型的行锁:共享锁（S <span class="token operator">-</span>share）：又称为读锁，简称S锁，共享锁就是多个事务对于同一数据可以共享一把锁，都能访问到数据，但是只能读不能修改。排他锁（X<span class="token operator">-</span>exclusion）：又称为写锁，简称X锁，排他锁就是不能与其他锁并存，如一个事务获取了一个数据行的排他锁，其他事务就不能再获取该行的其他锁，但是获取排他锁的当前的事务是可以对数据就行读取和修改。</code></pre><p>对于UPDATE、DELETE和INSERT语句，InnoDB会自动给涉及数据集加排他锁（X)；</p><p>对于普通SELECT语句，InnoDB不会加任何锁；</p><p>可以通过以下语句显示给记录集加共享锁或排他锁 。</p><pre class=" language-sql"><code class="language-sql">共享锁（ S）: <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> table_name <span class="token keyword">WHERE</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">LOCK</span> <span class="token operator">IN</span> <span class="token keyword">SHARE MODE</span>排他锁（X<span class="token punctuation">)</span> : <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> table_name <span class="token keyword">WHERE</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">FOR</span> <span class="token keyword">UPDATE</span></code></pre><pre class=" language-markdown"><code class="language-markdown"> Innodb的行锁依赖于事务；一个事务获取了行锁后，在这个事务未提交之前，其他事务如果操作的时相同的行，那么需要阻塞等待获取锁的事务提交后释放行锁，才能解除阻塞；</code></pre><h4 id="InnoDB-行锁升级表锁"><a href="#InnoDB-行锁升级表锁" class="headerlink" title="InnoDB 行锁升级表锁"></a><strong>InnoDB 行锁升级表锁</strong></h4><pre class=" language-sql"><code class="language-sql">原因：索引失效（在更新或者删除等写操作中，如果操作条件不走索引或者索引失效时，会导致写操作全表扫描查找要更改的数据，进而导致表锁<span class="token number">1</span>）在索引字段下<span class="token operator">*</span><span class="token operator">*</span>使用函数<span class="token operator">*</span><span class="token operator">*</span>，导致索引失效；<span class="token number">2</span>）在索引字段下进行<span class="token operator">*</span><span class="token operator">*</span>类型转换<span class="token operator">*</span><span class="token operator">*</span>；<span class="token number">3</span>）在索引字段下使用<span class="token operator">*</span><span class="token operator">*</span>数学运算<span class="token operator">*</span><span class="token operator">*</span>；<span class="token number">4</span>）在索引字段频繁进行写操作；</code></pre><h4 id="间隙锁"><a href="#间隙锁" class="headerlink" title="间隙锁"></a>间隙锁</h4><p>当我们用范围条件，而不是使用相等条件检索数据，并请求共享或排他锁时，InnoDB会给符合条件的已有数据进行加锁； 对于键值在条件范围内但并不存在的记录，叫做 “间隙（GAP）” ， InnoDB也会对这个 “间隙” 加锁，这种锁机制就是所谓的 间隙锁（Next-Key锁） 。</p><pre class=" language-sql"><code class="language-sql">数据库存在数据的主键是：<span class="token number">1</span><span class="token number">3</span><span class="token number">4</span><span class="token number">6</span><span class="token number">9</span>如果条件是：id <span class="token operator">&lt;</span> <span class="token number">10</span>这里id缺少的是<span class="token number">2</span> <span class="token number">5</span> <span class="token number">7</span> <span class="token number">8</span> 。他们就称为间隙，<span class="token keyword">InnoDB</span>也会对这些间隙进行加锁，这种锁机制就是所谓的 间隙锁</code></pre><pre class=" language-sql"><code class="language-sql">一个事务中进行范围的写操作<span class="token punctuation">,</span>那么其他事务就不能再这个范围内写数据<span class="token punctuation">;</span>作用：用于避免在范围查询时的幻读现象，不能完全避免幻读。</code></pre><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><pre><code>innodb行锁的特点？    Innodb行锁是基于事务的,同时行锁对其它同一行的写操作阻塞;innodb表锁出现的原因？    1)更新或者删除的条件下的字段没有添加索引;    2)索引失效导致表锁索引失效原因有哪些?    1.字段类型装换    2.索引字段使用函数    3.索引字段进行数学运算     4.索引字段进行高频的写操作等间隙锁特点是什么?    1.一个事务中进行范围的写操作,那么其他事务就不能再这个范围内写数据；    2.间隙锁在一定程度了避免了幻读的发生</code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>06Mybatis进阶</title>
      <link href="/2020/03/15/Mybatis%E8%BF%9B%E9%98%B6/"/>
      <url>/2020/03/15/Mybatis%E8%BF%9B%E9%98%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Mybatis映射文件配置"><a href="#1-Mybatis映射文件配置" class="headerlink" title="1.Mybatis映射文件配置"></a>1.Mybatis映射文件配置</h1><h2 id="1-入参"><a href="#1-入参" class="headerlink" title="1.入参"></a>1.入参</h2><h3 id="1-1-parameterType-了解"><a href="#1-1-parameterType-了解" class="headerlink" title="1.1.parameterType(了解)"></a>1.1.parameterType(了解)</h3><p>CRUD标签都有一个属性parameterType，<strong>底层的statement通过它指定接收的参数类型</strong>。入参数据有以下几种类型：<strong>HashMap，基本数据类型（包装类），实体类</strong>；</p><pre class=" language-sql"><code class="language-sql">设置传入这条语句的参数类的完全限定名或别名。这个属性是可选的，因为 MyBatis 可以通过类型处理器（TypeHandler） 推断出具体传入语句的参数类型。</code></pre><p>说明：</p><p><strong>在mybatis中入参的数据类型分为2大类：</strong></p><ol><li><p>基本数据类型：int,string,long,Date等;</p></li><li><p>复杂数据类型：类(pojo)和Map;</p></li></ol><p>​    说明：如果传递参数是数组或者集合，底层都会封装到Map集合中。</p><p>【示例】</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//根据id查询</span>    User <span class="token function">findById</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-xml"><code class="language-xml">【基本类型数据】<span class="token comment" spellcheck="true">&lt;!--根据id查询--></span><span class="token comment" spellcheck="true">&lt;!--parameterType="int" 表示sql语句参数id的类型，int是Integer的别名.MyBatis 可以通过类型处理器（TypeHandler） 根据接口中的方法User queryById(Integer id)参数类型推断出具体传入语句的参数类型。--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findById<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from user where id = #{id}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>【pojo类型】<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>savetUser<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   INSERT INTO user(...) values(#{userName},...);<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span>底层原理:User类:user_name属性,自动生成setter或者getter方法时,getUserName当我们向xml传入#{user_Name}---->getUser_Name--->利用反射根据方法名称获取方法对象--->报反射异常综上:1)传入的时pojo的话,传入xml的变量名称与pojo类下属性名称要一致;2)pojo中属性名称定义要尽量遵循驼峰命名,或者在自动生成getter或者setter方法时,自己手动纠正;</code></pre><p>说明：对于parameterType属性可以不书写，那么MyBatis 就会通过类型处理器（TypeHandler） 根据接口中的方法User queryById(Integer id)参数类型推断出具体传入语句的参数类型。</p><hr style="background-color:green;height:10px;"><h3 id="1-2-自增主键回填（了解）"><a href="#1-2-自增主键回填（了解）" class="headerlink" title="1.2.自增主键回填（了解）"></a>1.2.自增主键回填（了解）</h3><p>需求:新增一条数据成功后，将这条数据的主键封装到实体类中，并查看主键的值。</p><p><strong>方式1</strong>:使用insert标签的**子标签selectKey+last_insert_id()**函数实现实现</p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>keyColumn</td><td>主键在表中对应的列名</td></tr><tr><td>keyProperty</td><td>主键在实体类中对应的属性名</td></tr><tr><td>resultType</td><td>主键的数据类型</td></tr><tr><td>order</td><td>BEFORE:会首先选择主键,设置 keyProperty 然后执行插入语句  AFTER: 在添加语句后执行查询主键的语句</td></tr></tbody></table><p>测试代码:</p><p>1)接口</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * 添加用户     * 返回值时影响的行数     * @param user     * @return     */</span>    Integer <span class="token function">addUserAndGetFkId</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>2)映射文件:</p><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--       selectKey:表示查询主键字段的标签 keyColumn:表示表中字段名称,一般指主键名称       keyProperty="id":表示pojo类中对应主键的属性名称       order="AFTER":表示在操作之前或者之后获取主键值        &lt;selectKey keyColumn="id" keyProperty="id" resultType="int" order="AFTER">            select last_insert_id()        &lt;/selectKey>    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>addUserAndGetFkId<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        insert into user values(null,#{username},#{birthday},#{sex},#{address})        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>selectKey</span> <span class="token attr-name">keyColumn</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">keyProperty</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span> <span class="token attr-name">order</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>AFTER<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            select last_insert_id()        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>selectKey</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span></code></pre><p><strong>方式2</strong>:使用insert标签的属性<strong>useGeneratedKeys，keyProperty，keyColumn</strong>实现</p><p>参数说明:</p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>useGeneratedKeys</td><td>true 获取自动生成的主键，相当于select last_insert_id()</td></tr><tr><td>keyColumn</td><td>表中主键的列名</td></tr><tr><td>keyProperty</td><td>实体类中主键的属性名</td></tr></tbody></table><p>说明：直接在insert标签中增加属性的方式，<strong>只适合于支持自动增长主键类型的数据库</strong>，比如MySQL或SQL Server;</p><p>测试代码:</p><p>接口:</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * 添加用户     * 返回值时影响的行数     * @param user     * @return     */</span>    Integer <span class="token function">addUserAndGetFkId2</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>映射文件:</p><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--    useGeneratedKeys="true"表示开启获取主键id的功能     keyColumn="id":表示指定表中主键字段名称      keyProperty="id":表示指定pojo类中主键对应的属性名称    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>addUserAndGetFkId2<span class="token punctuation">"</span></span> <span class="token attr-name">useGeneratedKeys</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">keyColumn</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">keyProperty</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        insert into user values(null,#{username},#{birthday},#{sex},#{address})    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span></code></pre><p>说明:<strong>使用方式2的话,数据库必须支持主键自增;</strong></p><hr style="background-color:green;height:10px;"><h3 id="1-3-Mybatis入参是单参和多参-掌握"><a href="#1-3-Mybatis入参是单参和多参-掌握" class="headerlink" title="1.3.Mybatis入参是单参和多参(掌握)"></a>1.3.Mybatis入参是单参和多参(掌握)</h3><h4 id="1-单个参数"><a href="#1-单个参数" class="headerlink" title="1)单个参数"></a>1)单个参数</h4><pre class=" language-html"><code class="language-html">单个参数：接口方法传入一个参数</code></pre><h5 id="【接口传参】"><a href="#【接口传参】" class="headerlink" title="【接口传参】"></a>【接口传参】</h5><pre class=" language-java"><code class="language-java"> User <span class="token function">queryById</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="【接收参数】"><a href="#【接收参数】" class="headerlink" title="【接收参数】"></a>【接收参数】</h5><p><strong>1、通过#{参数名}接收</strong></p><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--根据id查询--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>queryById<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select *,user_name AS  userName from user where id = #{id}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p><strong>2、通过#{任意变量名}接收</strong></p><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--根据id查询--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>queryById<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select *,user_name AS  userName from user where id = #{abc}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><h5 id="【结论】"><a href="#【结论】" class="headerlink" title="【结论】"></a>【结论】</h5><pre class=" language-html"><code class="language-html">如果接口传入的时单个参数,可以在xml中使用任意变量取接收,但是不建议乱写,最好见名知意;</code></pre><h4 id="2-多个参数"><a href="#2-多个参数" class="headerlink" title="2) 多个参数"></a>2) 多个参数</h4><p>需求：根据用户名和性别查询用户</p><p>2.1 接口传参</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * 需求：根据用户名和性别查询用户     * @param name     * @param sex     * @return     */</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">findUsersByUserNameAndSex</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span>String sex<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>2.2 UserMapper.xml</p><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findUsersByUserNameAndSex<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from user where user_name=#{name} and sex=#{sex}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p>此时会报参数绑定异常</p><p>解决方案:</p><p><strong>方式1</strong>、使用参数索引获取：arg0,arg1(了解,不推荐)</p><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findUsersByUserNameAndSex<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from user where user_name=#{arg0} and sex=#{arg1}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p>说明： 接口参数顺序要与arg0与arg1顺序一致;</p><p><strong>方式2</strong>:使用参数位置获取：param1,param2(了解,不推荐)</p><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findUsersByUserNameAndSex<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from user where user_name=#{param1} and sex=#{param2}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p><strong>方式3</strong>:使用命名参数获取，明确指定传入参数的名称：**(掌握)**</p><p>  步骤一：在接口中传入参数时通过@Param指定参数名称</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * 需求：根据用户名和性别查询用户     * @param name     * @param sex     * @return     */</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">findUsersByUserNameAndSex</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span> String name<span class="token punctuation">,</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"sex"</span><span class="token punctuation">)</span> String sex<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>  步骤二：在接收参数时，通过指定的名称获取参数值；</p><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findUsersByUserNameAndSex<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from user where user_name=#{name} and sex=#{sex}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p>小结:</p><pre class=" language-tex"><code class="language-tex">1)入参是单个参数(单个参数是单值类型)  在xml中可以任意变量取接收,但是建议名称见名知意;2）多个参数  建议使用方式3通过注解方式给参数取别名,然后再xml中使用这个别名eg: List<User> findUsersByUserNameAndSex(@Param("name") String name,@Param("sex") String sex); 那么在xml中:     <select id="findUsersByUserNameAndSex" resultType="user">        select * from user where user_name=#{name} and sex=#{sex}    </select></code></pre><hr style="background-color:green;height:10px;"><h3 id="1-4-入参类型是Pojo和Map"><a href="#1-4-入参类型是Pojo和Map" class="headerlink" title="1.4 入参类型是Pojo和Map"></a>1.4 入参类型是Pojo和Map</h3><h4 id="1-pojo参数【掌握】"><a href="#1-pojo参数【掌握】" class="headerlink" title="1)pojo参数【掌握】"></a>1)pojo参数【掌握】</h4><p>说明：接口方法传入pojo类型的数据时，mybatis底层直接使用pojo封装数据。  sql语句中  #{username}取值==》到pojo中调用 getUsername(){}</p><p>测试代码:</p><p>接口:</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * 插入功能     * @param user     */</span>    <span class="token keyword">void</span> <span class="token function">saveAndGetkey2</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>映射文件:</p><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>saveAndGetkey2<span class="token punctuation">"</span></span> <span class="token attr-name">useGeneratedKeys</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">keyProperty</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">keyColumn</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        insert into user values(null,#{username},#{age},#{birthday},#{sex},#{address})    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span></code></pre><p>小结:</p><p>使用pojo的话,<strong>xml中参数一定名称要与pojo中的属性名称一致</strong>,否则报错(binding exception);</p><h4 id="2-HashMap参数"><a href="#2-HashMap参数" class="headerlink" title="2)HashMap参数"></a>2)HashMap参数</h4><p>需求：模拟用户登录，登录方法参数是Map集合，泛型都是String类型分别表示用户名和性别。</p><p>​           注意事项:参数map中的key值是与SQL语句中 #{} 的取值名称一致。</p><p>代码实现:</p><p>2.1 接口:</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * 需求：模拟用户登录，登录方法参数是Map集合，泛型都是String类型分别表示用户名和性别。     * @return     */</span>    User <span class="token function">loginByNameAndSex</span><span class="token punctuation">(</span>Map map<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>2.2 映射文件:</p><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>loginByNameAndSex<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         select * from user where user_name=#{name} and sex=#{sex}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p>2.3 测试:</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test16</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        UserMapper mapper <span class="token operator">=</span> MybatisUtil<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//map中的key要与xml映射文件下的参数名称要一致</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"孙悟空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"sex"</span><span class="token punctuation">,</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User user <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">loginByNameAndSex</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        MybatisUtil<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>小结:</p><pre class=" language-tex"><code class="language-tex">1)入参类型pojo注意事项?    xml映射文件下的参数名称要与pojo类中属性名称一致;2）入参是map注意事项?    xml映射文件下的参数名称要与map中key的名称一致;</code></pre><hr style="background-color:green;height:10px;"><h2 id="2-参数值的获取"><a href="#2-参数值的获取" class="headerlink" title="2.参数值的获取"></a>2.参数值的获取</h2><h3 id="2-1-和-两种获取参数方式TODO"><a href="#2-1-和-两种获取参数方式TODO" class="headerlink" title="2.1.#{}和${}两种获取参数方式TODO"></a>2.1.#{}和${}两种获取参数方式TODO</h3><p>​    参数值的获取指的是statement获取接口方法中传入的参数。</p><p>​    获取参数，有两种方式：**#{}<strong>和</strong>${}**；</p><p>​    以根据id查询为例测试#{}和${}区别:</p><pre class=" language-sql"><code class="language-sql">使用<span class="token comment" spellcheck="true">#{}接收参数:</span>   <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> id<span class="token operator">=</span>? <span class="token comment" spellcheck="true">//预编译处理,防止sql注入</span>使用${}接收参数:   <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">1</span> <span class="token comment" spellcheck="true">//参数值直接拼接到sql中,会有sql注入的风险</span></code></pre><h4 id="1-取值"><a href="#1-取值" class="headerlink" title="1).#{}取值"></a>1).#{}取值</h4><p>   使用#{}的sql是进行预编译的,可以防止sql注入;</p><h4 id="2-取值"><a href="#2-取值" class="headerlink" title="2).${} 取值"></a>2).<code>${}</code> 取值</h4><p>注意:${id} 获取id值时，必须使用命名参数取值@param：</p><p>​          补充:如果是取<strong>单个值</strong>,也可使用${value}获取</p><p>1)映射文件</p><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findById2<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from user where id=${id}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p>2)接口</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * 根据id查询用户信息 测试${}     * @param id     * @return     */</span>    User <span class="token function">findById2</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>3)测试</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test12</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        UserMapper mapper <span class="token operator">=</span> MybatisUtils<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User user <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">findById2</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        MybatisUtils<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>小结:</p><p><strong>面试</strong>:#{}和${}取值有什么区别?</p><pre class=" language-SQL"><code class="language-SQL">#{} sql进行预编译处理,防止sql注入;${} 参数与sql直接拼接,有sql注入的风险;</code></pre><hr style="background-color:green;height:10px;"><h3 id="2-2-应用场景和注意事项-了解"><a href="#2-2-应用场景和注意事项-了解" class="headerlink" title="2.2.${}应用场景和注意事项(了解)"></a>2.2.${}应用场景和注意事项(了解)</h3><h4 id="1-取值的应用场景"><a href="#1-取值的应用场景" class="headerlink" title="1)${}取值的应用场景"></a>1)${}取值的应用场景</h4><p>​    在一些特殊的应用场景中，需要对SQL语句部分（不是参数）进行拼接，这个时候就必须使用${}来进行拼接，不能使用#{}.例如：</p><pre class=" language-html"><code class="language-html">1、企业开发中随着数据量的增大，往往会将数据表按照年份进行分表，如：2017_user，2018_user....，对这些表进行查询就需要动态把年份传入进来，而年份是表名的一部分，并不是参数，JDBC无法对其预编译，所以只能使用${}进行拼接：      SELECT * FROM ${year}_user；    2、根据表名查询数据总记录数：        SELECT COUNT(*) FROM user        SELECT COUNT(*) FROM order        SELECT COUNT(*) FROM  ${tableName}简言之：如果需要设置到SQL中的不是查询的条件，只能使用${}拼接；</code></pre><p><strong>示例：</strong></p><p>需求：根据输入的表名统计指定表下的总记录数;</p><p>1)接口</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * 需求：根据输入的表名统计指定表下的总记录数;     */</span>    Integer <span class="token function">countByTableName</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"tableName"</span><span class="token punctuation">)</span> String tableName<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>2)映射文件</p><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>countByTableName<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>integer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select count(*) from ${tableName}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p>3)测试类</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test18</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        UserMapper mapper <span class="token operator">=</span> MybatisUtil<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Integer count <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">countByTableName</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>        MybatisUtil<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>小结：</p><p>${}使用方式及场景?</p><pre class=" language-tex"><code class="language-tex">使用方式： 1.接口中@param给参数取别名 2.在xml中使用注解的别名${注解别名}场景： 一切非条件查询的参数拼接可以使用${}</code></pre><h4 id="2-取值注意事项-了解"><a href="#2-取值注意事项-了解" class="headerlink" title="2)${}取值注意事项 (了解)"></a>2)${}取值注意事项 (了解)</h4><p><strong>【 ${}获取单个值】</strong></p><p>​    <strong><code>${}</code> 获取单个值时，最好是通过命名参数的形式获取</strong>。如果不指定参数的，也可以使用${value}来获取传入的单个值；</p><p>传入参数：没有指定参数名称</p><pre class=" language-java"><code class="language-java">User <span class="token function">selectUserById</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>获取参数通过${value}获取</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectUserById<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       select * from user where id = ${value} <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p><strong>【${}获取配置文件中的值】</strong></p><p>有时候，我们如果非要使用$来接收参数，将login修改如下：</p><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--根据用户名和性别查询--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>queryByUserNameAndSex<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        SELECT  * FROM  user WHERE  user_name = '${jdbc.user}' AND  sex = #{sex}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p>说明：上述sql语句中：SELECT  * FROM  user WHERE  user_name = <strong>‘${username}’</strong> AND  sex = #{sex}</p><p>对于 ‘${username}’ 加单引号是因为${}获取数据的方式直接将获取的数据拼接到字符串上，并不会加引号，如果获取的值是数值型，没有问题，但是如果是字符类型就会有问题，所以需要加上引号进行拼接。</p><p>使用${}注意事项:</p><pre class=" language-tex"><code class="language-tex">1.使用${变量}方式获取变量值时,不要与全局的properties下定义的参数名称冲突,否则数据注入错误;2.使用${变量}传入字符串类型时,需要自己维护字符串的上引号;</code></pre><hr style="background-color:green;height:10px;"><h3 id="3-1-简单结果集映射TODO"><a href="#3-1-简单结果集映射TODO" class="headerlink" title="3.1 简单结果集映射TODO"></a>3.1 简单结果集映射TODO</h3><p>​    在使用原生的JDBC操作时，对于结果集ResultSet，需要手动处理。</p><p>​    mybatis框架提供了resultType和resultMap来对结果集进行封装。</p><p><strong>注意：只要一个方法有返回值需要处理，那么 resultType和resultMap必须有一个</strong></p><h4 id="1-resultType"><a href="#1-resultType" class="headerlink" title="1.resultType"></a>1.resultType</h4><pre class=" language-html"><code class="language-html">    从sql语句中返回的期望类型的类的完全限定名或别名。 注意如果返回的是集合，那应该设置为集合包含的类型，而不是集合本身。可以使用 resultType 或 resultMap，但不能同时使用。</code></pre><h5 id="1-1-返回值是基本类型"><a href="#1-1-返回值是基本类型" class="headerlink" title="1.1 返回值是基本类型"></a>1.1 返回值是基本类型</h5><p>例如 int ,string ===&gt;resultType=”书写对应的基本类型别名或者全名即可”</p><p>​    测试:findNameById:</p><pre class=" language-tex"><code class="language-tex">1)基本类型 int short double ... 别名： _基本类型名称2）包装类 类 String ArrayList .... 别名：类名首字母小写3）自定义类 扫包取别名 类首字母小写（大写也可）</code></pre><h5 id="1-2-返回值为一个pojo-User-对象时"><a href="#1-2-返回值为一个pojo-User-对象时" class="headerlink" title="1.2 返回值为一个pojo(User)对象时"></a>1.2 返回值为一个pojo(User)对象时</h5><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--根据用户名和性别查询--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>queryByUserNameAndSex<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    SELECT  * FROM  user WHERE  user_name = '${jdbc.user}' AND  sex = #{sex}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><h5 id="1-3-返回值为一个List-lt-User-gt-时"><a href="#1-3-返回值为一个List-lt-User-gt-时" class="headerlink" title="1.3 返回值为一个List<User>时"></a>1.3 返回值为一个List&lt;User&gt;时</h5><p>​    当返回值为List集合时，resultType需要设置成集合中存储的具体的pojo数据类型：</p><p>​       测试:findAllUsers:</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>queryByUserNameAndSex<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    SELECT  * FROM  user WHERE  user_name = '${jdbc.user}' AND  sex = #{sex}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><h3 id="3-2-Map类型结果映射"><a href="#3-2-Map类型结果映射" class="headerlink" title="3.2 Map类型结果映射"></a>3.2 Map类型结果映射</h3><h5 id="【1】返回一条数据，封装到map中"><a href="#【1】返回一条数据，封装到map中" class="headerlink" title="【1】返回一条数据，封装到map中"></a>【1】返回一条数据，封装到map中</h5><p>需求：查询id是1的数据，将查询的结果封装到Map&lt;String,Object&gt;中</p><p>1)定义接口</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * 需求：查询id是1的数据，将查询的结果封装到Map&lt;String,Object>中     * @param id     * @return     */</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> <span class="token function">findMapById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>2)定义映射文件配置</p><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findMapById<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select id,user_name as userName,address from user where id=#{id}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p>3)测试:</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test19</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        UserMapper mapper <span class="token operator">=</span> MybatisUtil<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">findMapById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>        MybatisUtil<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h5 id="【2】返回多条数据，封装到map中"><a href="#【2】返回多条数据，封装到map中" class="headerlink" title="【2】返回多条数据，封装到map中"></a>【2】返回多条数据，封装到map中</h5><p>​    需求：查询数据表所有的数据封装到Map&lt;Integer,User&gt;集合中</p><p>​    要求： Key值为一条记录的主键，Value值为pojo的对象.</p><p>说明：需要在接口的方法上使用注解@MapKey指定数据表中哪一列作为Map集合的key，否则mybatis不知道具体哪个列作为Map集合的key.</p><p>1)映射文件:</p><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findAllToMap<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select id,user_name as name,birthday,sex,address from user    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p>2)接口:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     * 获取所有用户,其中key为id值,value为user对象     * @return     */</span><span class="token annotation punctuation">@MapKey</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span>Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span>User<span class="token operator">></span> <span class="token function">findAllToMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>3)测试:</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test16</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        UserMapper mapper <span class="token operator">=</span> MybatisUtils<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map map <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">findAllToMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>        MybatisUtils<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>小结：</p><pre class=" language-tex"><code class="language-tex">1)map接收单条记录  map中的key就是查询的表的字段名称,如果使用as区别名,那么可以就是对应的别名的名称;2)map接收多条记录  1)需要指定作为key的字段,一般是主键字段 @MapKey("指定字段名称")  2)指定每一条记录封装的对象类型;</code></pre><hr style="background-color:green;height:10px"><h2 id="3-resultMap映射-掌握"><a href="#3-resultMap映射-掌握" class="headerlink" title="3.resultMap映射(掌握)"></a>3.resultMap映射(掌握)</h2><p>1.正常开发中,数据库字段名称与Pojo类属性名称不一致时,一般通过<strong>驼峰映射或者As关键字取别名</strong>可以搞定,但是很多场景下,对于复杂的orm映射,上述的2种方式就不能适用了;</p><p>2.ResultMap是mybatis中最重要最强大的元素，使用ResultMap可以解决复杂映射问题：</p><pre class=" language-sql"><code class="language-sql"><span class="token number">1</span><span class="token punctuation">.</span> POJO属性名和表结构字段名不一致的问题（有些情况下也不是标准的驼峰格式，比如id和userId）<span class="token number">2</span><span class="token punctuation">.</span> 完成高级查询，比如说，一对一、一对多、多对多。</code></pre><h4 id="【需求】"><a href="#【需求】" class="headerlink" title="【需求】"></a>【需求】</h4><pre class=" language-html"><code class="language-html">使用resultMap完成结果集的封装（resultSet===》JavaBean）</code></pre><h4 id="【实现步骤】"><a href="#【实现步骤】" class="headerlink" title="【实现步骤】"></a>【实现步骤】</h4><pre class=" language-html"><code class="language-html">手动配置实体类属性和表字段映射关系的步骤如下：1、    配置自定义结果集<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span><span class="token punctuation">></span></span>2、    配置id映射3、    配置其他普通属性的映射</code></pre><p><strong>步骤一：</strong>将驼峰匹配注释掉<br>​    一旦注释掉驼峰匹配，那么再通过findAll查询的结果中，用户名就无法封装了，此时我们可以尝试使用ResultMap来解决这个问题。</p><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--作用:表:user_name 类:userName/username 自动映射--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mapUnderscoreToCamelCase<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span></code></pre><p><strong>步骤二：</strong>配置resultMap</p><p>resultMap标签的作用:自定义结果集，自行设置结果集的封装方式</p><pre class=" language-html"><code class="language-html">id属性：resultMap标签的唯一标识，不能重复，一般是用来被引用的type属性：结果集的封装类型autoMapping属性：操作单表时，不配置默认为true,如果pojo对象中的属性名称和表中字段名称相同，则自动映射。</code></pre><p>在映射文件中自定义结果集类型：</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--type="user" 表示结果集的封装类型是user--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">autoMapping</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!--配置主键映射关系--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!--配置用户名的映射关系  column 表示数据表列  property表示pojo的属性--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user_name<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span></code></pre><p><strong>步骤三</strong>：修改查询语句的statement<br>在查询语句的select标签中通过resultMap属性可以引用自定义结果集作为数据的封装方式</p><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--自定义映射规则--></span>    <span class="token comment" spellcheck="true">&lt;!--    autoMapping="true":表示如果字段名称与pojo属性名称一致,可以省略不写    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">autoMapping</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--主键字段映射--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!--非主键字段--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user_name<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findByIdUseResutMap<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from user where id=#{id}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p>定义接口:</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * 使用resultMap标签自定义映射规则     * @param id     * @return     */</span>    User <span class="token function">findByIdUseResutMap</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>测试代码：</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test21</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        UserMapper mapper <span class="token operator">=</span> MybatisUtil<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User user <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">findByIdUseResutMap</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        MybatisUtil<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><strong>注意：</strong>测试完记得将驼峰命名的配置重新开启，因为其他的测试方法还要用。</p><hr style="background-color:green;height:10px"><h4 id="resultMap小结"><a href="#resultMap小结" class="headerlink" title="resultMap小结"></a>resultMap小结</h4><p>1.resultMap标签的作用?</p><pre class=" language-tex"><code class="language-tex">1)提高了代码的复用性;2)结果集映射的;(将查询的结果映射到pojo类下)</code></pre><p>2.resultMap有哪些属性和子标签?</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>唯一标识<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>映射的pojo类<span class="token punctuation">"</span></span> <span class="token attr-name">autoMapping</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--主键字段映射--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>表中主键字段<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pojo类中主键对应的属性名称<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--普通字段映射--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>表中非主键字段<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pojo类中非主键对应的属性名称<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span></code></pre><hr style="background-color:green;height:10px"><h2 id="4-SQL片段-了解"><a href="#4-SQL片段-了解" class="headerlink" title="4.SQL片段(了解)"></a>4.SQL片段(了解)</h2><h3 id="6-1-引用当前文件中的SQL片段"><a href="#6-1-引用当前文件中的SQL片段" class="headerlink" title="6.1.引用当前文件中的SQL片段"></a>6.1.引用当前文件中的SQL片段</h3><p>​    sql标签可以定义一个sql片段，在需要使用该sql片段的地方，通过&lt;include refid=”sql片段id”/&gt;标签来使用。</p><h4 id="【1】定义SQL片段"><a href="#【1】定义SQL片段" class="headerlink" title="【1】定义SQL片段"></a>【1】定义SQL片段</h4><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sql</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userCommonSql<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        id,user_name,birthday,sex,address    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sql</span><span class="token punctuation">></span></span></code></pre><p>注意：SQL片段必须设置id属性；</p><h4 id="【2】使用SQL片段"><a href="#【2】使用SQL片段" class="headerlink" title="【2】使用SQL片段"></a>【2】使用SQL片段</h4><p>​    在SQL语句中通过<code>&lt;include&gt;</code>标签引入SQL片段；</p><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findByIdUseResutMap<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userCommonSql<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span> from user where id=#{id}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><h3 id="6-2-引入独立文件中的SQL片段"><a href="#6-2-引入独立文件中的SQL片段" class="headerlink" title="6.2 引入独立文件中的SQL片段"></a>6.2 引入独立文件中的SQL片段</h3><p>​    很多时候同一个sql片段，可能在多个映射文件中都有使用，如果每一个映射文件都编写一个相同的sql就比较麻烦，因此可以将通用的sql片段都定义在一个专门存放sql片段的映射文件中，然后由其他映射文件引用它即可。<br>如下，在src目录下新增CommonSQL.xml文件：</p><h4 id="【1】新建SQL片段文件"><a href="#【1】新建SQL片段文件" class="headerlink" title="【1】新建SQL片段文件"></a>【1】新建SQL片段文件</h4><p>​    复制一份映射文件，将SQL片段写入即可</p><p><strong>【CommonSQL.xml】</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE mapper        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>CommonSql<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sql</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userSql<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        id,user_name,birthday,sex,address    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sql</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sql</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>empSql<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        eid,ename,age    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sql</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre><h4 id="【2】在mybatis核心配置文件mybatis-config-xml引入SQL片段文件"><a href="#【2】在mybatis核心配置文件mybatis-config-xml引入SQL片段文件" class="headerlink" title="【2】在mybatis核心配置文件mybatis-config.xml引入SQL片段文件"></a>【2】在mybatis核心配置文件mybatis-config.xml引入SQL片段文件</h4><p>​    定义好sql片段的映射文件之后，接下来就该使用它了，首先应该把该映射文件引入到mybatis的全局配置文件中（mybatis-config.xml）：</p><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>CommonSql.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.heima.mapper<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span></code></pre><h4 id="【3】引用SQL片段"><a href="#【3】引用SQL片段" class="headerlink" title="【3】引用SQL片段"></a>【3】引用SQL片段</h4><p>​    最后在需要使用该sql片段的地方通过include标签的refId属性引用该sql片段：<code>&lt;include refId=”名称空间.sql片段的id” /&gt;</code><br>在UserMapper.xml的映射文件中，进一步改造根据用户名查询用户信息</p><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findUserById2<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userMap<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>CommonSql.userSql<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span> from user where id = ${id}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><hr style="background-color:green;height:10px"><h2 id="5、动态SQL"><a href="#5、动态SQL" class="headerlink" title="5、动态SQL"></a>5、动态SQL</h2><h3 id="1、ognl表达式"><a href="#1、ognl表达式" class="headerlink" title="1、ognl表达式"></a>1、ognl表达式</h3><p>动态SQL中的业务逻辑判断需要使用到以下运算符： ognl表达式</p><pre class=" language-tex"><code class="language-tex">1.   e1 or e2 满足一个即可2.   e1 and e2 都得满足3.    e1 == e2,e1 eq e2 判断是否相等4.    e1 != e2,e1 neq e2 不相等5.    e1 lt e2：小于   lt表示less than 6.    e1 lte e2：小于等于，其他gt（大于）,gte（大于等于） gt 表示greater than7.    e1 in e2 8.    e1 not in e29.    e1 + e2,e1 * e2,e1/e2,e1 - e2,e1%e210.   !e,not e：非，求反11.   e.method(args)调用对象方法12.   e.property对象属性值  user.userName13.   e1[ e2 ]按索引取值，List,数组和Map14.   @class@method(args)调用类的静态方法15.   @class@field调用类的静态字段值</code></pre><p>常见标签如下:</p><pre class=" language-tex"><code class="language-tex">if：判断   if(1 gt 2){}choose (when, otherwise)：分支判断    switch:多选一where标签set标签foreach：循环遍历标签</code></pre><hr style="background-color:green;height:10px"><h3 id="2-if标签"><a href="#2-if标签" class="headerlink" title="2.if标签"></a>2.if标签</h3><p>语法格式:</p><pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>判断条件<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   满足条件sql加入拼接 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>说明： 1）if标签：判断语句，用于进行逻辑判断的。如果判断条件为true，则执行if标签的文本内容 2）test属性：用来编写表达式，支持ognl；</code></pre><p>【需求】：查询<strong>男性</strong>用户，<strong>如果输入了用户名，按用户名模糊查询</strong>,如果没有输入用户名，就查询所有男性用</p><p> 要求:</p><p>​    1.使用&lt;if&gt;判断</p><p>​    2.test属性：使用OGNL表达式，完成具体的判断业务逻辑；</p><p>1)定义接口</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * 【需求】：查询男性用户，如果输入了用户名，     * 按用户名模糊查询,如果没有输入用户名，就查询所有男性用     */</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">findUsersByUserName</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"userName"</span><span class="token punctuation">)</span> String userName<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>2)定义接口方法对应的映射文件信息</p><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findUsersByUserName<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from user where sex='男'           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userName!<span class="token punctuation">=</span>null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>               and user_name like concat('%',#{userName},'%')           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><h3 id="3-choose-when-otherwise"><a href="#3-choose-when-otherwise" class="headerlink" title="3.choose,when,otherwise"></a>3.choose,when,otherwise</h3><pre class=" language-tex"><code class="language-tex">choose标签：分支选择（多选一，遇到成立的条件即停止）    when子标签：编写条件，不管有多少个when条件，一旦其中一个条件成立，后面的when条件都不执行。           test属性：编写ognl表达式    otherwise子标签：当所有条件都不满足时，才会执行该条件。</code></pre><p>语句示例：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findActiveBlogLike<span class="token punctuation">"</span></span>     <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Blog<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  SELECT * FROM BLOG WHERE state = ‘ACTIVE’  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>choose</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      AND title like #{title}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>author !<span class="token punctuation">=</span> null and author.name !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      AND author_name like #{author.name}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>otherwise</span><span class="token punctuation">></span></span>      AND featured = 1    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>otherwise</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>choose</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p> 需求：</p><pre class=" language-tex"><code class="language-tex">编写一个查询方法，设置两个参数，一个是用户名，一个是住址。根据用户名或者住址查询所有男性用户:    如果输入了用户名则按照用户名模糊查找，    否则就按照住址查找，两个条件只能成立一个，    如果都不输入就查找用户名为“孙悟空”的用户。username address</code></pre><p>【需求分析】</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 输入了用户名</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> sex<span class="token operator">=</span><span class="token string">'男'</span> <span class="token operator">and</span> user_name <span class="token operator">like</span> <span class="token string">'%参数%'</span><span class="token comment" spellcheck="true">-- 没有输入姓名,但是输入了地址</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> sex<span class="token operator">=</span><span class="token string">'男'</span> <span class="token operator">and</span> address <span class="token operator">=</span> <span class="token string">'参数'</span><span class="token comment" spellcheck="true">--  什么也没输入</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> sex<span class="token operator">=</span><span class="token string">'男'</span> <span class="token operator">and</span> user_name <span class="token operator">=</span> <span class="token string">'孙悟空'</span></code></pre><p>1)定义接口方法</p><pre class=" language-java"><code class="language-java">    List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">findUsersByNameAndAddress</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span> String userName<span class="token punctuation">,</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"address"</span><span class="token punctuation">)</span> String address<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>2)定义接口方法对应的映射文件信息</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findUsersByNameAndAddress<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from user where sex='男'    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>choose</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name!<span class="token punctuation">=</span>null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            and user_name like concat('%',#{name},'%')        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address!<span class="token punctuation">=</span>null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            and address=#{address}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>otherwise</span><span class="token punctuation">></span></span>            and user_name='孙悟空'        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>otherwise</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>choose</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p>小结:</p><p>多选一使用方式?</p><pre class=" language-xml"><code class="language-xml">规则:多选一,自上而下执行,遇到满足条件就退出,否则otherwise下的语句参与拼接<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>choose</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>条件<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        sql代码    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>条件<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        sql代码    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">></span></span>    ....    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>otherwise</span><span class="token punctuation">></span></span>        sql代码    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>otherwise</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>choose</span><span class="token punctuation">></span></span></code></pre><hr style="background-color:green;height:10px"><h3 id="4-where"><a href="#4-where" class="headerlink" title="4.where"></a>4.where</h3><p> where标签：拼接多条件查询时 1、能够添加where关键字； 2、能够去除多余的and或者or关键字</p><p>需求：按照如下条件查询所有用户</p><pre class=" language-tex"><code class="language-tex">如果只输入了用户名按照用户名进行查询;select * from user where user_name like concat('%',#{userName},'%');如果只输入住址，按住址进行查询;select * from user where address=#{address};如果两者都输入，则按照两个条件查询;select * from user where user_name like concat('%',#{userName},'%') and address=#{address};如果两者都不合符条件,全表查询; select * from user</code></pre><p>where多条件语法格式:</p><pre class=" language-xml"><code class="language-xml">   &lt;select/update/delete ...>          sql语句        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>条件<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                字段 = #{值}            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>条件<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                AND 字段名 = #{值}            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span>    &lt;/select/update/delete/insert></code></pre><p>1)定义接口</p><pre class=" language-java"><code class="language-java">    List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">findByNameAndAddress</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span> String name<span class="token punctuation">,</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"address"</span><span class="token punctuation">)</span> String address<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>2)定义xml</p><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--     where标签作用:     1)适当添加where关键字     2)被where标签包裹的sql会自动去除多余的and或者or关键字    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findByNameAndAddress<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from user        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name!<span class="token punctuation">=</span>null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                user_name like concat('%',#{name},'%')            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address!<span class="token punctuation">=</span>null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>               and address=#{address}            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p>小结:</p><p>通过使用&lt;where&gt;标签的功能有哪些作用?</p><pre class=" language-tex"><code class="language-tex">作用:1)适当添加where关键字2)去除被where标签包裹的多余的and或者or关键字语法格式:<where>    <if test="条件1">        and sql1    </if>    <if test="条件2">        and sql2    </if></where></code></pre><hr style="background-color:green;height:10px"><h3 id="5-set"><a href="#5-set" class="headerlink" title="5.set"></a>5.set</h3><p>set标签：在update语句中,可以自动添加一个set关键字，并且会将动态sql最后多余的逗号去除。</p><p>语法格式:</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span>  <span class="token attr-name">.......</span><span class="token punctuation">></span></span>   update 表名     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>条件<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>              字段名1=值1,        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>条件2<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>              字段名2=值2,        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        ....    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span>    where 条件;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span></code></pre><p>案例：修改用户信息，如果参数user中的某个属性为null，则不修改。</p><p>1)定义接口方法</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * 案例：修改用户信息，如果参数user中的某个属性为null，则不修改。     * @param user     */</span>    <span class="token keyword">void</span> <span class="token function">updateSelectiveUser</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>2)定义映射文件</p><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>updateSelectiveUser<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        update user          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username!<span class="token punctuation">=</span>null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                user_name=#{username},            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>birthday!<span class="token punctuation">=</span>null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                birthday=#{birthday},            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex!<span class="token punctuation">=</span>null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                sex=#{sex},            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address!<span class="token punctuation">=</span>null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                address=#{address}            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span>        where id=#{id}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span></code></pre><p>小结:</p><p>set标签的作用?</p><pre class=" language-tex"><code class="language-tex">1)去除被set标签包裹的多余的逗号','2)添加set关键字;</code></pre><hr style="background-color:green;height:10px"><h3 id="6-foreach"><a href="#6-foreach" class="headerlink" title="6.foreach"></a>6.foreach</h3><pre class=" language-xml"><code class="language-xml">foreach标签：遍历集合或者数组<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>集合名或者数组名<span class="token punctuation">"</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>元素<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>标签分隔符<span class="token punctuation">"</span></span> <span class="token attr-name">open</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>以什么开始<span class="token punctuation">"</span></span> <span class="token attr-name">close</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>以什么结束<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   #{元素}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span>    collection属性：接收的集合或者数组,集合名或者数组名    item属性：集合或者数组参数中的每一个元素     separator属性：标签分隔符     open属性：以什么开始     close属性：以什么结束举例:  java接口方法:      List<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Post</span><span class="token punctuation">></span></span> selectPostIn(@Param("ids") List<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Integer</span><span class="token punctuation">></span></span> ids);          sql映射文件配置:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectPostIn<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>domain.blog.Post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    SELECT *  FROM POST P    WHERE ID in     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span>  <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ids<span class="token punctuation">"</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name">open</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span> <span class="token attr-name">close</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        #{item}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p>需求：按照id值是1，2，3来查询(删除)用户数据；</p><p>1)定义接口</p><pre class=" language-java"><code class="language-java">    List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">findByIds</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"ids"</span><span class="token punctuation">)</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> ids<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>2)定义xml映射</p><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--    collection="ids":表示接口中传入的集合名称     item="item":表示循环集合过程中的每一个元素     separator=",":表示元素与元素拼接时的分隔符     open="(" :表示拼接字符串时以指定字符开头     close=")":表示拼接字符串时以指定字符结尾     拼接格式:    (1,3,6,8)    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findByIds<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from user where id in        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ids<span class="token punctuation">"</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span>  <span class="token attr-name">open</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(<span class="token punctuation">"</span></span> <span class="token attr-name">close</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            #{item}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p>小结:</p><p>   foreach标签属性作用?</p><pre class=" language-tex"><code class="language-tex">作用: 遍历从接口中出入的集合的;语法格式:<foreach collection="接口中集合名称" item="集合中每一个元素" open="拼接以指定字符开头" close="拼接以指定字符结尾" separator="指定间隔符">    #{集合中每一个元素}</forech></code></pre><hr style="background-color:green;height:10px"><h3 id="动态sql总结"><a href="#动态sql总结" class="headerlink" title="动态sql总结"></a>动态sql总结</h3><p>核心的动态sql标签有哪些,各有什么作用?</p><pre class=" language-tex"><code class="language-tex">1)if标签    <if test="条件">        sql语句(如果满足条件,当前sql片段参与拼接)    </if>2)choose when otherwise多选一 自上而下执行,遇到满足条件则退出,否则otherwise小的sql参与拼接    <choose>        <when test="条件1">          sql语句(如果满足条件,就参与sql拼接)        </when>        <when test="条件1">          sql语句(如果满足条件,就参与sql拼接)        </when>        <otherwise>          sql语句        </otherwise>    </choose>3)where     作用:1)适当添加where关键字 2)去除多余and或者or关键字4)set    作用:1)添加set关键字 2)去除多余的逗号5)foreach标签:作用: 遍历从接口中出入的集合的;语法格式:<foreach collection="接口中集合名称" item="集合中每一个元素" open="拼接以指定字符开头" close="拼接以指定字符结尾" separator="指定间隔符">    #{集合中每一个元素}</forech></code></pre><hr style="background-color:green;height:10px"><h2 id="6、-特殊字符处理"><a href="#6、-特殊字符处理" class="headerlink" title="6、 特殊字符处理"></a>6、 特殊字符处理</h2><p>​    我们在编写Mapper映射文件时，有时候需要使用到一些诸如：<code>&gt;</code>,<code>&lt;</code>之类的特殊字符。这些字符不能直接书写在xml文件中，需要我们对其处理。</p><p>​     处理方式：使用转义字符代替特殊字符。</p><table><thead><tr><th>转义字符</th><th>sql符号</th><th>说明</th></tr></thead><tbody><tr><td>&amp;lt;</td><td>&lt;</td><td>小于</td></tr><tr><td>&amp;gt;</td><td>&gt;</td><td>大于</td></tr><tr><td>&amp;amp;</td><td>&amp;</td><td>和号</td></tr><tr><td>&amp;apos;</td><td>'</td><td>单引号</td></tr><tr><td>&amp;quot;</td><td>"</td><td>双引号</td></tr></tbody></table><p>举例:批量将id小于3的用户性别改为男,在映射文件中直接写&lt;号,xml约束会报错!</p><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findUsersLt<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from user where id <span class="token entity" title="&lt;">&amp;lt;</span> #{id}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><hr style="background-color:green;height:10px"><h2 id="7、mybatis高级查询"><a href="#7、mybatis高级查询" class="headerlink" title="7、mybatis高级查询"></a>7、mybatis高级查询</h2><h3 id="1、-一对一查询"><a href="#1、-一对一查询" class="headerlink" title="1、 一对一查询"></a>1、 一对一查询</h3><p>一对一映射语法格式: </p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>映射ID<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>主表实体名称<span class="token punctuation">"</span></span> <span class="token attr-name">autoMapping</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 添加主表语主表实体映射 --></span>        ......   <span class="token comment" spellcheck="true">&lt;!--association：配置关联对象（User）的映射关系,一般与resultMap标签联合使用 --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>主表实体中对应从表的属性名称<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>从表实体类型<span class="token punctuation">"</span></span> <span class="token attr-name">autoMapping</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>               <span class="token comment" spellcheck="true">&lt;!-- 添加从表中字段与实体属性映射关系 --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>association</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span></code></pre><p>需求：通过订单编号20140921003查询出<strong>订单信息</strong>，并查询出<strong>下单人信息</strong>。</p><p>​           说明:一个订单只能对应一个用户信息;</p><p>3.2 订单实体添加属性映射</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Order</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String orderNumber<span class="token punctuation">;</span>    <span class="token keyword">private</span> User orderUser<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//getter  setter toString</span><span class="token punctuation">}</span></code></pre><p>3.3 添加order接口及方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">OrderMapper</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 根据订单编号查询订单信息,包含下单人信息     * @param orderNumber     * @return     */</span>    Order <span class="token function">findOrderByOrderNumber</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"orderNumber"</span><span class="token punctuation">)</span> String orderNumber<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>3.4 创建order映射文件,编写SQL</p><p>​      说明:配置关联对象一对一映射关系,语法格式:</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE mapper        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.heima.mapper.OrderMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--自定义映射规则--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>orderMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Order<span class="token punctuation">"</span></span> <span class="token attr-name">autoMapping</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>order_id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>order_number<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>orderNumber<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!--          association:表示一对一映射           property="orderUser":表示指定映射的属性名称          javaType="User":指定映射属性的类型          autoMapping="true":开启自动映射(查询字段名称与pojo类中属性名称一致,可以不写)        --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>orderUser<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span> <span class="token attr-name">autoMapping</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user_name<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userName<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>association</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findOrderByOrderNumber<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>orderMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select          tb_order.id as order_id,          tb_order.order_number,          tb_user.*        from tb_order,          tb_user        where tb_user.id = tb_order.user_id            and tb_order.order_number = #{orderNumber}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre><p>一对一查询总结:</p><p>1.映射规则配置?</p><p><span style="background-color:red;">PPT演示:</span></p><p><img src="https://i.loli.net/2021/09/02/hA3kgvioqpxdMlS.png" alt="1608027920080"></p><p>2.一对一关联查询实现步骤?</p><pre class=" language-tex"><code class="language-tex">1)维护pojo对象之间一对一的关系:eg:Order 包含属性:User类型的变量2)配置一对一的映射关系<resultMap id="唯一标识" type="映射的类" autoMapping="true">    <id column="主键字段" property="映射类中属性名称"/>    <result column="非主键字段" property="映射类中属性名称"/>    <!--一对一映射-->    <association property="映射的类中属性名称" javaType="java类型" autoMapping="true">            <id column="主键字段" property="java类型中属性名称"/>            <result column="非主键字段" property="java类型中属性名称"/>    </association></resultMap></code></pre><hr style="background-color:green;height:10px"><h3 id="2、一对多查询"><a href="#2、一对多查询" class="headerlink" title="2、一对多查询"></a>2、一对多查询</h3><p>核心映射标签预览:</p><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--配置一对多关系映射--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xx<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xx<span class="token punctuation">"</span></span> <span class="token attr-name">autoMapping</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--user表主键映射--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xx<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xx<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!--映射实体类中List&lt;Order>集合使用功能Collection标签--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xxx<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span> <span class="token attr-name">ofType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xxx<span class="token punctuation">"</span></span> <span class="token attr-name">autoMapping</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--主键映射--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xx<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xx<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xx<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xx<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>collection</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span></code></pre><p><strong>需求:查询id为1的用户及其订单信息</strong></p><p>【分析】</p><p>​    一个用户可以有多个订单。</p><p>​    一个订单只能属于一个用户。</p><p>​    用户(1)—–订单(n)</p><p>【实现】</p><p>1.User实体添加映射关系</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Order<span class="token operator">></span> orders<span class="token punctuation">;</span>    <span class="token keyword">private</span> Long id<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 用户名</span>    <span class="token keyword">private</span> String userName<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 密码</span>    <span class="token keyword">private</span> String password<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 姓名</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 年龄</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//0-女 1-男</span>    <span class="token keyword">private</span> Integer sex<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// getter  and setter and toString</span><span class="token punctuation">}</span></code></pre><p>2.编写接口</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * 根据用户id查询用户信息,包含订单集合信息     * @param id     * @return     */</span>    User <span class="token function">findUserAndOrdersByUserId</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Long id<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>3.编写sql映射文件关联订单集合</p><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--定义一对多的映射规则--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">autoMapping</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--映射主表--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user_name<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userName<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!--配置一对多映射--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>orders<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span> <span class="token attr-name">ofType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>order<span class="token punctuation">"</span></span> <span class="token attr-name">autoMapping</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>order_id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>order_number<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>orderNumber<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>collection</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findUserAndOrdersByUserId<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select          tb_user.*,          tb_order.id as order_id,          tb_order.order_number        from tb_user,          tb_order        where tb_user.id = tb_order.user_id            and tb_user.id = #{id}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p>4.测试:</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        UserMapper mapper <span class="token operator">=</span> MybatisUtil<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User user <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">findUserAndOrdersByUserId</span><span class="token punctuation">(</span>1l<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        MybatisUtil<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="3-多对多查询"><a href="#3-多对多查询" class="headerlink" title="3.多对多查询"></a>3.多对多查询</h3><p>多对多查询本质是一对多和一对一查询的组合,核心标签用法如下:</p><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--多对多映射--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xx<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xx<span class="token punctuation">"</span></span> <span class="token attr-name">autoMapping</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--主表主键映射--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xx<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xx<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xx<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span> <span class="token attr-name">ofType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xx<span class="token punctuation">"</span></span> <span class="token attr-name">autoMapping</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--主表主键映射--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xx<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xx<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 一对一映射 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xx<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xx<span class="token punctuation">"</span></span> <span class="token attr-name">autoMapping</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token comment" spellcheck="true">&lt;!--主表主键映射--></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xx<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xx<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>association</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>collection</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span></code></pre><p>【需求】：查询订单号为20140921001的订单的详情信息即查询订单信息+订单中的商品信息；</p><p>**<font color="red">先维护一个一对多，然后再维护一个一对一</font>**：多对多</p><pre class=" language-xml"><code class="language-xml"> <span class="token comment" spellcheck="true">&lt;!--定义映射规则：多对多--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>orderInfoMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.pojo.Order<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--定义相关属性的映射--></span>        <span class="token comment" spellcheck="true">&lt;!--主键映射--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span>  <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>order_id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!--非主键映射--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>order_number<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>orderNumber<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!--订单对象中包含一个List集合，泛型是订单明细--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>orderdetailList<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span> <span class="token attr-name">ofType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.pojo.Orderdetail<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--内部的映射规则，都围绕 ofType指定的订单明细进行映射--></span>            <span class="token comment" spellcheck="true">&lt;!--明细主键映射--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span>  <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>detail_id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>total_price<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>totalPrice<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>status<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>status<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token comment" spellcheck="true">&lt;!--嵌套一对一查询：映射商品信息                property:此时属性指的是外部collection标签内ofType指定的类型中的属性            --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tbItem<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.pojo.Item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token comment" spellcheck="true">&lt;!--主键映射--></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span>  <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item_name<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>itemName<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item_price<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>itemPrice<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item_detail<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>itemDetail<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>association</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>collection</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findOrderInfoByOrderNumber2<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>orderInfoMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            select              o.id as order_id,              o.order_number,              od.id as detail_id,              od.total_price,              od.status,              it.*            from              tb_order as o,              tb_orderdetail as od,              tb_item as it            where                o.id = od.order_id                and od.item_id = it.id                and o.order_number = #{number}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><h3 id="4、扩展（继承）"><a href="#4、扩展（继承）" class="headerlink" title="4、扩展（继承）"></a>4、扩展（继承）</h3><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--   orderInfoMap3与orderInfoMap映射规则的唯一区别是多了一个一对一映射，其他映射规则都一样--></span><span class="token comment" spellcheck="true">&lt;!--定义映射规则：多对多--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>orderInfoMap3<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.pojo.Order<span class="token punctuation">"</span></span> <span class="token attr-name">extends</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>orderInfoMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--映射用户信息--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tbUser<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.pojo.User<span class="token punctuation">"</span></span> <span class="token attr-name">autoMapping</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span>  <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user_id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user_name<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userName<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>association</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span></code></pre><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><h3 id="1-动态SQL"><a href="#1-动态SQL" class="headerlink" title="1.动态SQL?"></a>1.动态SQL?</h3><pre class=" language-SQL"><code class="language-SQL">1.if标签    语法格式：        <if test="ognl条件表达式">            sql片段        </if>    特点：    ognl条件表达式成立，则sql片段参与拼接，否则不参与拼接；3.choose when otherwise 多选一，条件分支    语法格式：        <choose>            <when test="ognl条件表达式">                sql片段            </when>            <when test="ognl条件表达式">                sql片段            </when>            ....            <otherwise>                sql片段            </otherwise>        </choose>    特点：如果某个when中test条件满足，则其他的when不会执行，且otherwise下的sql片段也不会参与拼接；          如果所有的when都不满足，otherwise下的sql片段参与拼接；3.where标签    语法：        能用where关键字的地方，都可以使用where标签；        以查询为例：            select * from user            <where>                <if test="ognl条件表达式">                    where条件子句                </if>                <if test="ognl条件表达式">                  and where条件子句                </if>            </where>        特点：1.合理添加where关键字（如果有条件，则添加where关键字，否则就不添加）             2.去除多余的and或者or关键字，防止语法错误；4.set标签    语法：        一般与update语句配合使用；        实际拼接中，如果没有set标签，在update语句拼接中可能会出现多余逗号，会造成sql的语法错误；        update user        <set>            <if test="ognl条件表达式">                user_name=#{xxx},            </if>            <if test="ognl条件表达式">                age=#{xxx},            </if>        </set>             where id=#{id}    特点：        1.为udpate语句添加set关键字；        2.去除多余的逗号；5.foreach标签     语法：         一切集合拼接的场景都可以使用该标签；         以查询为例：         select * from user where id in(1,3,5);         现实开发中，集合的长度不固定，需要动态拼接；         select * from user where id in          <foreach collection="指定集合的名称-@Param('ids')" item="遍历集合中的每一个约束，取一个名称"  separator="集合元素拼接时的间隔符" open="以指定字符开头进行拼接" close="以指定字符结尾进行拼接">             #{遍历集合中的每一个约束，取一个名称}         </foreach>         其他操作：批量删除 批量插入【面试会被问到】           </code></pre><h3 id="2-高级查询"><a href="#2-高级查询" class="headerlink" title="2. 高级查询"></a>2. 高级查询</h3><h4 id="2-1-一对一查询"><a href="#2-1-一对一查询" class="headerlink" title="2.1 一对一查询"></a>2.1 一对一查询</h4><pre class=" language-java"><code class="language-java"><span class="token number">1</span><span class="token punctuation">.</span>维护好实体类之间一对一的关系        一个订单只能对应一个User；        所以在订单实体类中维护了一个User类型的成员属性；        这样创建对象时，一个订单对象内只能包含一个User对象（一对一）<span class="token number">2</span><span class="token punctuation">.</span>定义xml映射规则   <span class="token operator">&lt;</span>resultMap id<span class="token operator">=</span><span class="token string">"xxx"</span> type<span class="token operator">=</span><span class="token string">"需要映射的类型"</span> autoMapping<span class="token operator">=</span><span class="token boolean">true</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>主键字段映射<span class="token operator">--</span><span class="token operator">-</span><span class="token operator">></span>        <span class="token operator">&lt;</span>id column<span class="token operator">=</span><span class="token string">"表中列名"</span> property<span class="token operator">=</span><span class="token string">"实体类的属性名称"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>非主键映射<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>result column<span class="token operator">=</span><span class="token string">"表中列名"</span> property<span class="token operator">=</span><span class="token string">"实体类的属性名称"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>一对一映射<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>association property<span class="token operator">=</span><span class="token string">"实体类中属性名称"</span> javaType<span class="token operator">=</span><span class="token string">"属性类型"</span> autoMapping<span class="token operator">=</span><span class="token boolean">true</span><span class="token operator">></span>                    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>内部的映射规则都是针对javaType指定的类型进行映射<span class="token operator">--</span><span class="token operator">></span>                    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>主键字段映射<span class="token operator">--</span><span class="token operator">-</span><span class="token operator">></span>                    <span class="token operator">&lt;</span>id column<span class="token operator">=</span><span class="token string">"表中列名"</span> property<span class="token operator">=</span><span class="token string">"实体类的属性名称"</span><span class="token operator">/</span><span class="token operator">></span>                    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>非主键映射<span class="token operator">--</span><span class="token operator">></span>                    <span class="token operator">&lt;</span>result column<span class="token operator">=</span><span class="token string">"表中列名"</span> property<span class="token operator">=</span><span class="token string">"实体类的属性名称"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>association<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>resultMap<span class="token operator">></span>L</code></pre><h4 id="2-2-一对多"><a href="#2-2-一对多" class="headerlink" title="2.2 一对多"></a>2.2 一对多</h4><pre class=" language-java"><code class="language-java"><span class="token number">1</span><span class="token punctuation">.</span>维护好实体类之间一对多的关系        一个User对应多个订单信息；        所以在User实体类中维护了一个List集合，集合中类泛型为Order类型；        这样创建对象时，一个User对象内可以包含多个Order对象（一对多）<span class="token number">2</span><span class="token punctuation">.</span>定义xml映射规则   <span class="token operator">&lt;</span>resultMap id<span class="token operator">=</span><span class="token string">"xxx"</span> type<span class="token operator">=</span><span class="token string">"需要映射的类型"</span> autoMapping<span class="token operator">=</span><span class="token boolean">true</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>主键字段映射<span class="token operator">--</span><span class="token operator">-</span><span class="token operator">></span>        <span class="token operator">&lt;</span>id column<span class="token operator">=</span><span class="token string">"表中列名"</span> property<span class="token operator">=</span><span class="token string">"实体类的属性名称"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>非主键映射<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>result column<span class="token operator">=</span><span class="token string">"表中列名"</span> property<span class="token operator">=</span><span class="token string">"实体类的属性名称"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>一对一映射<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>collection property<span class="token operator">=</span><span class="token string">"实体类中属性名称"</span> javaType<span class="token operator">=</span><span class="token string">"list"</span> ofType<span class="token operator">=</span><span class="token string">"list集合的泛型类型"</span> autoMapping<span class="token operator">=</span><span class="token boolean">true</span><span class="token operator">></span>                    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>内部的映射规则都是针对ofType指定的类型进行映射<span class="token operator">--</span><span class="token operator">></span>                    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>主键字段映射<span class="token operator">--</span><span class="token operator">-</span><span class="token operator">></span>                    <span class="token operator">&lt;</span>id column<span class="token operator">=</span><span class="token string">"表中列名"</span> property<span class="token operator">=</span><span class="token string">"实体类的属性名称"</span><span class="token operator">/</span><span class="token operator">></span>                    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>非主键映射<span class="token operator">--</span><span class="token operator">></span>                    <span class="token operator">&lt;</span>result column<span class="token operator">=</span><span class="token string">"表中列名"</span> property<span class="token operator">=</span><span class="token string">"实体类的属性名称"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>collection<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>resultMap<span class="token operator">></span>L</code></pre><h3 id="2-3-入参出参"><a href="#2-3-入参出参" class="headerlink" title="2.3 入参出参"></a>2.3 入参出参</h3><pre class=" language-java"><code class="language-java"><span class="token number">1</span><span class="token punctuation">.</span>入参    单参：特点<span class="token operator">==</span><span class="token operator">></span>xml中参数可以以任意变量接收    多参：特点<span class="token operator">==</span><span class="token operator">></span>建议使用<span class="token annotation punctuation">@Param</span>注解给参数取参数名称，然后被xml中sql引用；    map<span class="token operator">:</span> 特点<span class="token operator">==</span>》使用#<span class="token punctuation">{</span>map中key<span class="token punctuation">}</span>获取对应的value值    pojo<span class="token operator">:</span>特点；使用#<span class="token punctuation">{</span>pojo类中属性的名称<span class="token punctuation">}</span><span class="token number">3</span><span class="token punctuation">.</span>接收参数    <span class="token number">2</span>种方式        #<span class="token punctuation">{</span><span class="token punctuation">}</span>：好处sql预编译处理，防止sql注入问题；        $<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">:</span>弊端：可能会出现sql注入问题，而且一般应用于sql结构的拼接，而且，对字符串，上引号需要自己维护；    </code></pre>]]></content>
      
      
      <categories>
          
          <category> Mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里云服务器部署Hexo博客</title>
      <link href="/2020/02/27/blog-aliyun/"/>
      <url>/2020/02/27/blog-aliyun/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><hr><p>  相信大部分人使用Hexo搭建个人博客都会部署到一些免费的代码托管平台上，但这些免费的平台总是差强人意，比如国外的GitHub平台虽然完全免费，但在国内访问加载速度非常慢，又或者是国内的码云平台免费版有许多功能被阉割掉了，比如不能自定义域名，不能每次自动刷新提交的代码，需要到码云平台上手动刷新，如此一来非常繁琐。</p><p>  为了有效解决上诉的一些问题，有条件的话，不妨在自己的云服务器上搭建Hexo博客。</p><h2 id="效果演示"><a href="#效果演示" class="headerlink" title="效果演示"></a>效果演示</h2><hr><p>这是Hexo博客部署到GitHub上的网站测速效果</p><p><img src="https://s1.ax1x.com/2020/03/12/8mhkv9.png" alt="演示demo1"></p><p>这是Hexo博客部署到阿里云服务器后的网站测速效果</p><p><img src="https://s1.ax1x.com/2020/03/12/8mWYQA.png" alt="演示demo2"></p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><hr><ul><li>本地环境：Windows 10 </li><li>云服务器环境：阿里云ECS（CentOS7.x）</li></ul><h2 id="开始部署"><a href="#开始部署" class="headerlink" title="开始部署"></a>开始部署</h2><hr><h3 id="本地环境搭建"><a href="#本地环境搭建" class="headerlink" title="本地环境搭建"></a>本地环境搭建</h3><p><strong>1.安装Git</strong></p><p>到git官网上下载.exe文件,Download git,安装选项还是全部默认，最后一步添加路径时选择<code>Use Git from the Windows Command Prompt</code>。</p><ul><li>Git<a href="https://git-scm.com/download">下载地址</a></li><li>Git<a href="https://www.liaoxuefeng.com/wiki/896043488029600">教程</a></li></ul><p><strong>2.安装Nodejs</strong></p><p>到<a href="http://nodejs.cn/download/">Node.js官网</a>下载<code>.exe</code>文件，安装选项全部默认。安装好之后，按<code>Win+R</code>打开cmd命令提示符，输入<code>node -v</code>和<code>npm -v</code>，若出现版本号，则说明安装成功。</p><p>使用npm阿里的国内镜像进行加速下载</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token keyword">set</span> registry https://registry.npm.taobao.org</code></pre><p><strong>4.安装Hexo</strong></p><p>先创建一个文件夹<code>MyBlog</code>，用来存放自己的博客文件，然后<code>cd</code>到这个文件夹下（或者在这个文件夹下直接右键<code>git bash here</code>打开）。</p><p>定位到该目录下，输入<code>npm install -g hexo-cli</code>安装<code>Hexo</code>。可能会有几个报错，不用理会。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli</code></pre><p>安装完后输入<code>hexo -v</code>,若出现版本号则，说明安装成功。</p><p>接下来初始化一下<code>hexo</code>,即初始化我们的博客，输入<code>hexo init</code>初始化文件夹</p><pre class=" language-bash"><code class="language-bash">hexo init MyBlog</code></pre><p>新建完成后，指定文件夹<code>MyBlog</code>目录下有：</p><ul><li><code>node_modules</code>: 依赖包</li><li><code>public</code>：存放生成的页面</li><li><code>scaffolds</code>：生成文章的一些模板</li><li><code>source</code>：用来存放你的文章</li><li><code>themes</code>：主题**</li><li><code>_config.yml</code>: 博客的配置文件**</li></ul><p>输入<code>hexo g</code>生成静态网页，然后输入<code>hexo s</code>打开本地服务器预览</p><pre class=" language-bash"><code class="language-bash">hexo ghexo s</code></pre><p><img src="https://s1.ax1x.com/2020/03/12/8VdlGD.png" alt="Hexo"></p><h3 id="生成ssh公钥"><a href="#生成ssh公钥" class="headerlink" title="生成ssh公钥"></a>生成ssh公钥</h3><p>在本地桌面点击右键<code>Git Bash Here</code>打开Git终端，执行如下命令`,一路回车</p><pre class=" language-bash"><code class="language-bash">ssh-keygen -t rsa</code></pre><p>这个时候它会告诉你已经生成了<code>.ssh</code>的文件夹。在<code>git bash</code>中输入</p><pre class=" language-bash"><code class="language-bash"><span class="token function">cat</span> ~/.ssh/id_rsa.pub</code></pre><p>输出的内容就是公钥信息了</p><h3 id="阿里云服务器环境搭建"><a href="#阿里云服务器环境搭建" class="headerlink" title="阿里云服务器环境搭建"></a>阿里云服务器环境搭建</h3><p>安装<code>Git</code></p><pre class=" language-bash"><code class="language-bash">yum <span class="token function">install</span> <span class="token function">git</span></code></pre><p>创建<code>Git</code>账户</p><pre class=" language-bash"><code class="language-bash">adduser <span class="token function">git</span></code></pre><p>添加账户权限</p><pre class=" language-bash"><code class="language-bash"><span class="token function">chmod</span> 740 /etc/sudoersvim /etc/sudoers</code></pre><p>找到</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">## Allow root to run any commands anywhere</span>root    ALL<span class="token operator">=</span><span class="token punctuation">(</span>ALL<span class="token punctuation">)</span>     ALL</code></pre><p>添加以下内容</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span>   ALL<span class="token operator">=</span><span class="token punctuation">(</span>ALL<span class="token punctuation">)</span>     ALL</code></pre><p>保存退出并改回权限</p><pre class=" language-bash"><code class="language-bash"><span class="token function">chmod</span> 400 /etc/sudoers</code></pre><p>设置<code>git</code>账户密码</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">passwd</span> <span class="token function">git</span></code></pre><p>切换至<code>git</code>用户，创建 <code>~/.ssh</code> 文件夹和 <code>~/.ssh/authorized_keys</code> 文件，并赋予相应的权限</p><pre class=" language-bash"><code class="language-bash"><span class="token function">su</span> <span class="token function">git</span><span class="token function">mkdir</span> ~/.sshvim ~/.ssh/authorized_keys<span class="token comment" spellcheck="true"># 然后将win10中生成的id_rsa.pub文件中的公钥复制到authorized_keys</span><span class="token function">chmod</span> 600 /home/git/.ssh/authorized_keys<span class="token function">chmod</span> 700 /home/git/.ssh</code></pre><p>在本地<code>Git</code>终端中测试是否能免密登录<code>git</code>，其中<code>SERVER</code>为填写自己的云主机<code>IP</code>，执行输入<code>yes</code>后不用密码就说明好了</p><pre class=" language-bash"><code class="language-bash"><span class="token function">ssh</span> -v git@SERVER</code></pre><p>创建目录</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#repo作为为Git仓库目录</span><span class="token function">mkdir</span> /var/repo<span class="token function">chown</span> -R git:git /var/repo<span class="token function">chmod</span> -R 755 /var/repo<span class="token comment" spellcheck="true">#hexo作为网站根目录</span><span class="token function">mkdir</span> /var/www/hexo<span class="token function">chown</span> -R git:git /var/www/hexo<span class="token function">chmod</span> -R 755 /var/www/hexo</code></pre><p>然后创建一个裸的 <code>Git</code> 仓库</p><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> var/repo<span class="token function">git</span> init --bare hexoBlog.git</code></pre><p>创建一个新的 <code>Git</code> 钩子，用于自动部署 在 <code>/var/repo/hexoBlog.git</code> 下，有一个自动生成的 <code>hooks</code> 文件夹。我们需要在里边新建一个新的钩子文件 <code>post-receive</code>。</p><pre class=" language-bash"><code class="language-bash">vim /var/repo/hexoBlog.git/hooks/post-receive</code></pre><p>按 <code>i</code> 键进入文件的编辑模式，在该文件中添加两行代码（将下边的代码粘贴进去)，指定 <code>Git</code> 的工作树（源代码）和 <code>Git</code> 目录（配置文件等）</p><pre class=" language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token function">git</span> --work-tree<span class="token operator">=</span>/var/www/hexo --git-dir<span class="token operator">=</span>/var/repo/hexoBlog.git checkout -f</code></pre><p>然后，按 <code>Esc</code> 键退出编辑模式，输入”<code>:wq</code>” 保存退出。</p><p>修改文件权限，使得其可执行</p><pre class=" language-bash"><code class="language-bash"><span class="token function">chown</span> -R git:git /var/repo/hexoBlog.git/hooks/post-receive<span class="token function">chmod</span> +x /var/repo/hexoBlog.git/hooks/post-receive</code></pre><p>到此为止 <code>Git</code> 仓库就搭建完成了。</p><h3 id="阿里云服务器配置Nginx"><a href="#阿里云服务器配置Nginx" class="headerlink" title="阿里云服务器配置Nginx"></a>阿里云服务器配置Nginx</h3><p>用宝塔面板来一键部署Nginx <code>Linux</code>面板6.0安装命令(暂时仅兼容<code>Centos7.x</code>，其它系统版本请安装5.9稳定版)：</p><pre class=" language-bash"><code class="language-bash">yum <span class="token function">install</span> -y <span class="token function">wget</span> <span class="token operator">&amp;&amp;</span> <span class="token function">wget</span> -O install.sh http://download.bt.cn/install/install_6.0.sh <span class="token operator">&amp;&amp;</span> <span class="token function">bash</span> install.sh</code></pre><p><code>Linux</code>面板6.0升级专业版</p><pre class=" language-bash"><code class="language-bash">curl http://download.bt.cn/install/update6.sh<span class="token operator">|</span><span class="token function">bash</span></code></pre><p>安装完成后会显示面板后台地址·账号·密码。打开面板后台地址登陆面板，选择<code>Nginx</code>的部署方案，静静等待部署。</p><p>部署完成，点击网站-添加站点-输入域名(没有域名的输入自己的<code>IP</code>地址)-底部的<code>PHP</code>版本选择”纯静态”-提交。 </p><p>网站创建完成后点击设置-配置文件</p><pre class=" language-bash"><code class="language-bash">server<span class="token punctuation">{</span>    listen 80<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true"># server_name 填写自己的域名</span>    server_name luckyzmj.cn blog.luckyzmj.cn<span class="token punctuation">;</span>    index index.php index.html index.htm default.php default.htm default.html<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true"># 这里root填写自己的网站根目录，修改为/var/www/hexo</span>    root /var/www/hexo<span class="token punctuation">;</span></code></pre><p>-保存</p><p>点击设置-网站目录，修改为<code>/var/www/hexo</code> ，保存</p><p>重启宝塔面板服务</p><pre class=" language-bash"><code class="language-bash"><span class="token function">service</span> bt restart</code></pre><h3 id="本地Hexo部署到阿里云服务器"><a href="#本地Hexo部署到阿里云服务器" class="headerlink" title="本地Hexo部署到阿里云服务器"></a>本地Hexo部署到阿里云服务器</h3><p>进入到本地<code>Hexo</code>博客的文件夹<code>MyBlog</code>,右键点击<code>Git Bash Here</code>，输入命令</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#定义邮箱(更换为你的邮箱地址就行)</span><span class="token function">git</span> config --global user.email <span class="token string">"you@example.com"</span><span class="token comment" spellcheck="true">#定义名称(更换自定义一个名称就行)</span><span class="token function">git</span> config --global user.name <span class="token string">"Your Name"</span></code></pre><p>配置<code>_config.yml</code>,完成自动化部署 </p><p>打开本地<code>Hexo</code>博客的文件夹<code>MyBlog</code>文件夹下的<code>_config.yml</code>, 找到<code>deploy</code></p><pre class=" language-bash"><code class="language-bash">deploy:  type: <span class="token function">git</span>  <span class="token comment" spellcheck="true">#server改为你的服务IP地址或解析后的域名</span>  <span class="token comment" spellcheck="true">#例如我改为repo: git@luckyzmj.cn:/var/repo/blog.git</span>  repo: git@server:/var/repo/blog.git  branch: master</code></pre><p>保存后，即可测试部署</p><p>再进入到本地<code>Hexo</code>博客的文件夹<code>MyBlog</code>,右键点击<code>Git Bash Here</code>，输入命令</p><pre class=" language-bash"><code class="language-bash">hexo clean hexo g -d</code></pre><p>不报错说明完成，打开浏览器输入你的域名或<code>ip</code>地址就可以看到你部署的<code>Hexo</code>博客了。 </p><p>到此为止，我们已经成功部完成，并且访问自己的服务器端比访问Github快多了。</p><blockquote><h3 id="小贴士"><a href="#小贴士" class="headerlink" title="小贴士"></a>小贴士</h3></blockquote><p>在部署过程中，执行 hexo d发现部署老是出错，什么权限不允许之类的，这里我们需要检查我们在上述的<code>git</code>操作部署是否使用了<code>git</code>用户操作，若是没有，需要给相应的目录更改用户组 使用</p><pre class=" language-bash"><code class="language-bash"><span class="token function">chown</span> -R git:git /var/repo/</code></pre><p>这条命令递归的将<code>repo</code>目录及其子目录用户组设置为<code>git</code>。 同时使用</p><pre class=" language-bash"><code class="language-bash"><span class="token function">chown</span> -R git:git /var/www/hexo</code></pre><p>这样即可解决此类问题。</p><p>还有一个问题就是绑定域名后不能访问。原因是在国内任何域名只要绑定到国内的服务器主机上都必须去工信部和公安部备案完后才能正常使用。如果是港澳台的服务器或者是国外的服务器则可以不需要备案。</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li><a href="https://blog.csdn.net/weixin_33907511/article/details/91398208?utm_source=distribute.pc_relevant.none-task">https://blog.csdn.net/weixin_33907511/article/details/91398208?utm_source=distribute.pc_relevant.none-task</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 博客篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 阿里云 </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人博客搭建</title>
      <link href="/2019/08/27/Blog/"/>
      <url>/2019/08/27/Blog/</url>
      
        <content type="html"><![CDATA[<h2 id="0x001-效果演示"><a href="#0x001-效果演示" class="headerlink" title="0x001 效果演示"></a>0x001 效果演示</h2><hr><p><img src="https://s2.ax1x.com/2020/03/11/8E3bBF.png" alt="演示Demo"></p><h2 id="0x002-简单介绍"><a href="#0x002-简单介绍" class="headerlink" title="0x002 简单介绍"></a>0x002 简单介绍</h2><hr><p>  前前后后大概花了一周多的时间，目前个人博客已经完善的差不多了，现在写个文章做个阶段总结，后续如果有更新的地方，会及时补充。本博客基于Hexo框架，采用<a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md">hexo-theme-matery</a>主题，在这里非常感谢作者<code>洪卫</code>的<a href="https://github.com/shw2018/hexo-blog-fly.git">hexo-blog-fly</a>博客开源，极大简化了构建博客的工作量和复杂度。在此开源博客的基础上做了改进，修复了一些bug，顺利搭建完成了我的个人博客。大家对此主题有兴趣的可以<a href="https://github.com/shw2018/hexo-blog-fly">下载源代码</a>，搭建属于自己的个性化博客。</p><ul><li>个人博客 演示：<a href="http://luckyzmj.cn/">http://luckyzmj.cn</a></li></ul><hr><h2 id="0x003-Hexo-初级搭建"><a href="#0x003-Hexo-初级搭建" class="headerlink" title="0x003 Hexo 初级搭建"></a>0x003 Hexo 初级搭建</h2><hr><h3 id="1-安装Git"><a href="#1-安装Git" class="headerlink" title="1. 安装Git"></a>1. 安装Git</h3><p><code>Git</code>是目前世界上最先进的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。<code>Git</code>的作用是将本地的网页文件传到<code>github</code>上。</p><ul><li>Git<a href="https://git-scm.com/download">下载地址</a></li><li>Git<a href="https://www.liaoxuefeng.com/wiki/896043488029600">教程</a></li></ul><p><strong>windows：</strong> 到git官网上下载.exe文件,Download git,安装选项还是全部默认，最后一步添加路径时选择<code>Use Git from the Windows Command Prompt</code>。</p><h3 id="2-安装node-js"><a href="#2-安装node-js" class="headerlink" title="2. 安装node.js"></a>2. 安装node.js</h3><p><code>Hexo</code>是基于<code>node.js</code>编写的，所以需要安装一下<code>node.js</code>和里面的<code>npm</code>工具。</p><p><strong>windows：</strong> 到<a href="http://nodejs.cn/download/">Node.js官网</a>下载<code>.exe</code>文件，安装选项全部默认。安装好之后，按<code>Win+R</code>打开cmd命令提示符，输入<code>node -v</code>和<code>npm -v</code>，若出现版本号，则说明安装成功。</p><h3 id="3-添加npm国内源"><a href="#3-添加npm国内源" class="headerlink" title="3. 添加npm国内源"></a>3. 添加npm国内源</h3><p>使用阿里的国内镜像进行加速下载</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token keyword">set</span> registry https://registry.npm.taobao.org</code></pre><h3 id="4-安装Hexo"><a href="#4-安装Hexo" class="headerlink" title="4. 安装Hexo"></a>4. 安装Hexo</h3><p>前面<code>git</code>和<code>nodejs</code>安装好后，就可以安装<code>hexo</code>了，你可以先创建一个文件夹<code>MyBlog</code>，用来存放自己的博客文件，然后<code>cd</code>到这个文件夹下（或者在这个文件夹下直接右键<code>git bash</code>打开）。</p><p>比如我的博客文件都存放在<code>E:\MyBlog</code>目录下。</p><p>在该目录下右键点击<code>Git Bash Here</code>，打开<code>git</code>的控制台窗口，以后我们所有的操作都在<code>git</code>控制台进行，就不用<code>Windows</code>自带的<code>cmd</code>了。</p><p>定位到该目录下，输入<code>npm install -g hexo-cli</code>安装<code>Hexo</code>。可能会有几个报错，不用理会。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli</code></pre><p>安装完后输入<code>hexo -v</code>验证是否安装成功。</p><p>到此为止<code>hexo</code>就安装完了。</p><p>接下来初始化一下<code>hexo</code>,即初始化我们的网站，输入<code>hexo init</code>初始化文件夹</p><pre class=" language-bash"><code class="language-bash">hexo init MyBlog</code></pre><p>新建完成后，指定文件夹<code>MyBlog</code>目录下有：</p><ul><li><code>node_modules</code>: 依赖包</li><li><code>public</code>：存放生成的页面</li><li><code>scaffolds</code>：生成文章的一些模板</li><li><code>source</code>：用来存放你的文章</li><li><code>themes</code>：主题**</li><li><code>_config.yml</code>: 博客的配置文件**</li></ul><p>到此为止，本地的网站配置完成了。</p><p>输入<code>hexo g</code>生成静态网页，然后输入<code>hexo s</code>打开本地服务器</p><pre class=" language-bash"><code class="language-bash">hexo ghexo s</code></pre><p><img src="https://s1.ax1x.com/2020/03/12/8VdlGD.png"></p><h3 id="5-注册Github账号创建个人仓库"><a href="#5-注册Github账号创建个人仓库" class="headerlink" title="5. 注册Github账号创建个人仓库"></a>5. 注册Github账号创建个人仓库</h3><p>接下来就去注册一个<code>github</code>账号，用来存放我们的网站。</p><p>打开<a href="https://github.com/">https://github.com/</a>，新建一个项目仓库<code>New repository</code>，如下所示：</p><p><img src="https://s1.ax1x.com/2020/03/12/8VwrtK.png"></p><p>然后如下图所示，输入自己的项目名字，后面一定要加<code>.github.io</code>后缀，README初始化也要勾上</p><p><img src="https://s1.ax1x.com/2020/03/12/8VdoQJ.png"></p><blockquote><p>要创建一个和你用户名相同的仓库，后面加<code>.github.io</code>，只有这样，将来要部署到<code>GitHub page</code>的时候，才会被识别，也就是<code>http://xxxx.github.io</code>，其中xxx就是你注册<code>GitHub</code>的用户名。例如我的：<code>http://LuckyZmj.github.io</code></p></blockquote><h3 id="6-生成SSH添加到GitHub"><a href="#6-生成SSH添加到GitHub" class="headerlink" title="6. 生成SSH添加到GitHub"></a>6. 生成SSH添加到GitHub</h3><p>生成<code>SSH</code>添加到<code>GitHub</code>，连接<code>Github</code>与本地。<br>右键打开<code>git bash here</code>，然后输入下面命令：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> config --global user.name <span class="token string">"注册GitHub用户名"</span><span class="token function">git</span> config --global user.email <span class="token string">"注册GitHub的邮箱"</span></code></pre><p>用以下两条，检查一下你有没有输对</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> config user.name<span class="token function">git</span> config user.email</code></pre><p>然后创建<code>SSH</code>,一路回车</p><pre class=" language-bash"><code class="language-bash">ssh-keygen -t rsa -C <span class="token string">"注册GitHub的邮箱"</span></code></pre><p>这个时候它会告诉你已经生成了<code>.ssh</code>的文件夹。在<code>git bash</code>中输入</p><pre class=" language-bash"><code class="language-bash"><span class="token function">cat</span> ~/.ssh/id_rsa.pub</code></pre><p>将输出的内容复制到框中，点击确定保存。</p><p>打开<code>github</code>，在头像下面点击<code>settings</code>，再点击<code>SSH and GPG keys</code>，新建一个<code>SSH</code>，名字随便取一个都可以，把你的<code>id_rsa.pub</code>里面的信息复制进去。如图：</p><p><img src="https://s1.ax1x.com/2020/03/12/8Vwnyj.png"></p><p>在<code>git bash</code>输入<code>ssh -T git@github.com</code>，如果如下图所示，出现你的用户名，那就成功了。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">ssh</span> -T git@github.com</code></pre><h3 id="7-将hexo部署到GitHub"><a href="#7-将hexo部署到GitHub" class="headerlink" title="7. 将hexo部署到GitHub"></a>7. 将hexo部署到GitHub</h3><p>将<code>hexo</code>生成的文章部署到<code>GitHub</code>上，打开博客根目录下的<code>_config.yml</code>文件，这是博客的配置文件，在这里你可以修改与博客配置相关的各种信息。<br>找到如下配置进行修改：</p><pre class=" language-bash"><code class="language-bash">deploy:  type: <span class="token function">git</span>  repository: https://github.com/LuckyZmj/LuckyZmj.github.io  branch: master</code></pre><p><code>repository</code>修改为你自己的<code>github</code>项目地址即可，就是部署时，告诉工具，将生成网页通过<code>git</code>方式上传到你对应的链接仓库中。</p><p>这个时候需要先安装<code>deploy-git</code> ，也就是部署的命令,这样你才能用命令部署到<code>GitHub</code>。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save</code></pre><p>然后就可以部署提交到<code>github</code>，过一会儿就可以在<code>http://yourname.github.io</code> 这个网站看到你的博客了</p><pre class=" language-bash"><code class="language-bash">hexo cleanhexo generatehexo deploy</code></pre><p>其中 <code>hexo clean</code>清除了你之前生成的东西。 <code>hexo generate</code>，生成静态文章，可以用 <code>hexo g</code>缩写 ，<code>hexo deploy</code>部署文章，可以用<code>hexo d</code>缩写</p><blockquote><p>注意<code>deploy</code>时可能要你输入<code>username</code>和<code>password</code>。</p></blockquote><h3 id="8-写文章和发布文章"><a href="#8-写文章和发布文章" class="headerlink" title="8. 写文章和发布文章"></a>8. 写文章和发布文章</h3><p>首先在博客根目录下右键打开<code>git bash here</code>，安装一个扩展<code>npm i hexo-deployer-git</code>。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i hexo-deployer-git</code></pre><p>然后输入<code>hexo new post "article title"</code>，新建一篇文章。</p><pre class=" language-bash"><code class="language-bash">hexo new post <span class="token string">"article title"</span></code></pre><p>然后打开<code>E:\MyBlog\source\_posts</code>的目录，可以发现下面多了一个文件夹和一个<code>.md</code>文件，一个用来存放你的图片等数据，另一个就是你的文章文件。</p><p>另外推荐直接使用<code>有道云</code>编写<code>markdown</code>文章，不仅可以实时预览，还可以快捷的生成<code>markdown</code>语法格式，具体效果如下图所示。</p><p><img src="https://s1.ax1x.com/2020/03/12/8VwItf.png" alt="有道云"></p><p>编写完<code>markdown</code>文件后，根目录下输入<code>hexo g</code>生成静态网页，然后输入<code>hexo s</code>可以本地预览效果，最后输入<code>hexo d</code>上传到<code>github</code>上。这时打开你的<code>github.io</code>主页就能看到发布的文章了。</p><p>到此为止，<code>Hexo</code>初级搭建就已经完成了。</p><h2 id="0x004-Hexo-优化定制"><a href="#0x004-Hexo-优化定制" class="headerlink" title="0x004 Hexo 优化定制"></a>0x004 Hexo 优化定制</h2><hr><h3 id="1-Hexo相关目录文件"><a href="#1-Hexo相关目录文件" class="headerlink" title="1. Hexo相关目录文件"></a>1. Hexo相关目录文件</h3><h4 id="1-1-博客目录构成介绍"><a href="#1-1-博客目录构成介绍" class="headerlink" title="1.1 博客目录构成介绍"></a>1.1 博客目录构成介绍</h4><p><code>node_modules</code>是<code>node.js</code>各种库的目录，<code>public</code>是生成的网页文件目录，<code>scaffolds</code>里面就三个文件，存储着新文章和新页面的初始设置，<code>source</code>是我们最常用到的一个目录，里面存放着文章、各类页面、图像等文件，<code>themes</code>存放着主题文件，一般也用不到。</p><p>我们平时写文章只需要关注<code>source/_posts</code>这个文件夹就行了。</p><pre class=" language-bash"><code class="language-bash">- node_modules- public- scaffolds- <span class="token function">source</span>    - _data    - _posts    - about    - archives    - categories    - friends    - tags- themes</code></pre><h4 id="1-2-hexo基本配置"><a href="#1-2-hexo基本配置" class="headerlink" title="1.2 hexo基本配置"></a>1.2 hexo基本配置</h4><p>在文件根目录下的<code>_config.yml</code>，就是整<code>个hexo</code>框架的配置文件了。可以在里面修改大部分的配置。详细可参考官方的<a href="https://hexo.io/zh-cn/docs/configuration">配置描述</a>。</p><h5 id="1-2-1-网站"><a href="#1-2-1-网站" class="headerlink" title="1.2.1 网站"></a>1.2.1 网站</h5><p>参数描述<code>title</code>网站标题<code>subtitle</code>网站副标题<code>description</code>网站描述<code>author</code>您的名字<code>language</code>网站使用的语言<code>timezone</code>网站时区。<code>Hexo</code> 默认使用您电脑的时区。时区列表。比如说：<code>America/New_York</code>, <code>Japan</code>, 和 <code>UTC</code> 。</p><p>其中，<code>description</code>主要用于<code>SEO</code>，告诉搜索引擎一个关于您站点的简单描述，通常建议在其中包含您网站的关键词。<code>author</code>参数用于主题显示文章的作者。</p><h5 id="1-2-2-网址"><a href="#1-2-2-网址" class="headerlink" title="1.2.2 网址"></a>1.2.2 网址</h5><p>参数描述<code>url</code>网址<code>root</code>网站根目录 <code>permalink</code>文章的<a href="https://hexo.io/zh-cn/docs/permalinks">永久链接</a>格式<code>permalink_defaults</code>永久链接中各部分的默认值</p><p>在这里，你需要把<code>url</code>改成你的网站域名。</p><p><code>permalink</code>，也就是你生成某个文章时的那个链接格式。</p><p>比如我新建一个文章叫<code>temp.md</code>，那么这个时候他自动生成的地址就是<code>http://yoursite.com/2018/09/05/temp</code>。</p><p>以下是官方给出的示例，关于链接的变量还有很多，需要的可以去官网上查找<a href="https://hexo.io/zh-cn/docs/permalinks">永久链接</a> 。</p><pre class=" language-bash"><code class="language-bash">参数结果:year/:month/:day/:title       /2019/08/10/hello-world :year-:month-:day-:title.html  2019-08-10-hello-world.html :category/:titlefoo            /bar/hello-world</code></pre><h3 id="2-定制主题"><a href="#2-定制主题" class="headerlink" title="2. 定制主题"></a>2. 定制主题</h3><p>这里推荐作者<code>洪卫</code>的<a href="https://github.com/shw2018/hexo-blog-fly.git">hexo-blog-fly</a>博客主题，该主题是基于<a href="https://github.com/blinkfox/hexo-theme-matery">hexo-theme-matery</a>优化的，需要把博客相关信息换成您自己的就可以部署了，极大简化了构建博客的工作量和复杂度。</p><h4 id="2-1-简单使用方法"><a href="#2-1-简单使用方法" class="headerlink" title="2.1 简单使用方法"></a>2.1 简单使用方法</h4><ol><li>安装<code>Git</code>, 安装<code>nodeJS</code>，安装<code>Hexo</code></li><li>你可以直接<code>fork</code>一份源码到你的仓库，<code>clone</code>到本地博客文件夹内</li><li>在本地博客仓库运行<code>npm i</code>命令安装依赖包</li><li>直接修改配置信息，改成自己的信息</li><li>运行命令<code>hexo clean</code>（清除生成文件），<code>hexo g</code>（生成网页）， <code>hexo s</code>（本地预览），<code>hexo d</code>（部署）</li></ol><h4 id="2-2-原主题特性"><a href="#2-2-原主题特性" class="headerlink" title="2.2 原主题特性:"></a>2.2 原主题特性:</h4><ul><li>简单漂亮，文章内容美观易读</li><li><a href="https://material.io/">Material Design</a> 设计</li><li>响应式设计，博客在桌面端、平板、手机等设备上均能很好的展现</li><li>首页轮播文章及每天动态切换 <code>Banner</code> 图片</li><li>瀑布流式的博客文章列表（文章无特色图片时会有 <code>24</code> 张漂亮的图片代替）</li><li>时间轴式的归档页</li><li><strong>词云</strong>的标签页和<strong>雷达图</strong>的分类页</li><li>丰富的关于我页面（包括关于我、文章统计图、我的项目、我的技能、相册等）</li><li>可自定义的数据的友情链接页面</li><li>支持文章置顶和文章打赏</li><li>支持 <code>MathJax</code></li><li><code>TOC</code> 目录</li><li>可设置复制文章内容时追加版权信息</li><li>可设置阅读文章时做密码验证</li><li><a href="https://gitalk.github.io/">Gitalk</a>、<a href="https://imsun.github.io/gitment/">Gitment</a>、<a href="https://valine.js.org/">Valine</a> 和 <a href="https://disqus.com/">Disqus</a> 评论模块（推荐使用 <code>Gitalk</code>）</li><li>集成了<a href="http://busuanzi.ibruce.info/">不蒜子统计</a>、谷歌分析（<code>Google Analytics</code>）和文章字数统计等功能</li><li>支持在首页的音乐播放和视频播放功能</li></ul><h4 id="2-3-新增加特性"><a href="#2-3-新增加特性" class="headerlink" title="2.3 新增加特性:"></a>2.3 新增加特性:</h4><ul><li>修改了原主题的一些很多bug</li><li>加入图片懒加载功能，在根目录配置文件开启和关闭</li><li>增加留言板功能</li><li>在关于板块,加入简历功能页</li><li>增加视听[视觉听觉影音]板块 </li><li>支持emoji表情，用markdown emoji语法书写直接生成对应的能跳跃的表情。</li><li>增加网站运行时间显示 </li><li>增加动漫模型 </li><li>整体替换Banner图片和文章特色图片</li><li>增加分类相册功能</li><li>修改了一些控件的参数</li><li>修改部分样式,比如: 文章卡片,固定高度,使其不至于因为文章摘要的长短不同导致卡片大小不一使页面布局很不美观,类似的还有友链卡片,优化了页面内容布局,视觉更整齐美观</li><li>解决首页文章列表卡片上方 border-radius圆角失效的bug</li><li>添加页面樱花飘落动效</li><li>添加鼠标点击烟花爆炸动效</li><li>加入天气接口控件</li><li>加入鼠标点击文字特效</li><li>添加页面雪花飘落动效</li><li>添加在线聊天插件</li><li>调整线聊天插件参数，使之能够随着鼠标滑动位置自适应调整</li><li>持续更新…</li></ul><hr><h4 id="2-4-切换主题"><a href="#2-4-切换主题" class="headerlink" title="2.4 切换主题"></a>2.4 切换主题</h4><p>如果想自己动手对<a href="https://github.com/blinkfox/hexo-theme-matery">hexo-theme-matery</a>优化的话，可以修改Hexo根目录下的<code> _config.yml</code>的 <code>theme</code> 的值</p><pre class=" language-bash"><code class="language-bash">theme: hexo-theme-matery</code></pre><p><code>_config.yml</code> 文件的其它修改建议:</p><ul><li>请修改 <code>_config.yml</code> 的 <code>url</code> 的值为你的网站主 <code>URL</code>（如：<code>http://xxx.github.io</code>）。</li><li>建议修改两个 <code>per_page</code> 的分页条数值为 6 的倍数，如：12、18 等，这样文章列表在各个屏幕下都能较好的显示。</li><li>如果你是中文用户，则建议修改 <code>language</code> 的值为 <code>zh-CN</code>。</li></ul><h4 id="2-5-新建分类-categories-页"><a href="#2-5-新建分类-categories-页" class="headerlink" title="2.5 新建分类 categories 页"></a>2.5 新建分类 categories 页</h4><p><code>categories</code> 页是用来展示所有分类的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>categories/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"categories"</span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/categories/index.md</code>，至少需要以下内容：</p><pre class=" language-bash"><code class="language-bash">---title: categoriesdate: 2018-09-30 17:25:30type: <span class="token string">"categories"</span>layout: <span class="token string">"categories"</span>---</code></pre><h4 id="2-6-新建标签-tags-页"><a href="#2-6-新建标签-tags-页" class="headerlink" title="2.6 新建标签 tags 页"></a>2.6 新建标签 tags 页</h4><p><code>tags</code> 页是用来展示所有标签的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>tags/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"tags"</span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/tags/index.md</code>，至少需要以下内容：</p><pre class=" language-bash"><code class="language-bash">---title: tagsdate: 2018-09-30 18:23:38type: <span class="token string">"tags"</span>layout: <span class="token string">"tags"</span>---</code></pre><h4 id="2-7-新建关于我-about-页"><a href="#2-7-新建关于我-about-页" class="headerlink" title="2.7 新建关于我 about 页"></a>2.7 新建关于我 about 页</h4><p><code>about</code> 页是用来展示关于我和我的博客信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>about/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"about"</span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/about/index.md</code>，至少需要以下内容：</p><pre class=" language-bash"><code class="language-bash">---title: aboutdate: 2018-09-30 17:25:30type: <span class="token string">"about"</span>layout: <span class="token string">"about"</span>---</code></pre><h4 id="2-8-新建留言板-contact-页（可选的）"><a href="#2-8-新建留言板-contact-页（可选的）" class="headerlink" title="2.8 新建留言板 contact 页（可选的）"></a>2.8 新建留言板 contact 页（可选的）</h4><p><code>contact</code> 页是用来展示留言板信息的页面，前提是已经开启了第三方评论系统才能显示。如果在你的博客 <code>source</code> 目录下还没有 <code>contact/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"contact"</span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/contact/index.md</code>，至少需要以下内容：</p><pre class=" language-bash"><code class="language-bash">---title: contactdate: 2018-09-30 17:25:30type: <span class="token string">"contact"</span>layout: <span class="token string">"contact"</span>---</code></pre><h4 id="2-9-新建友情链接-friends-页（可选的）"><a href="#2-9-新建友情链接-friends-页（可选的）" class="headerlink" title="2.9 新建友情链接 friends 页（可选的）"></a>2.9 新建友情链接 friends 页（可选的）</h4><p><code>friends</code> 页是用来展示友情链接信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>friends/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"friends"</span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/friends/index.md</code>，至少需要以下内容：</p><pre class=" language-bash"><code class="language-bash">---title: friendsdate: 2018-12-12 21:25:30type: <span class="token string">"friends"</span>layout: <span class="token string">"friends"</span>---</code></pre><p>同时，在你的博客 <code>source</code> 目录下新建 <code>_data</code> 目录，在 <code>_data</code> 目录中新建 <code>friends.json</code> 文件，文件内容如下所示：</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span><span class="token punctuation">{</span>    <span class="token string">"avatar"</span><span class="token keyword">:</span> <span class="token string">"http://image.luokangyuan.com/1_qq_27922023.jpg"</span>,    <span class="token string">"name"</span><span class="token keyword">:</span> <span class="token string">"码酱"</span>,    <span class="token string">"introduction"</span><span class="token keyword">:</span> <span class="token string">"我不是大佬，只是在追寻大佬的脚步"</span>,    <span class="token string">"url"</span><span class="token keyword">:</span> <span class="token string">"http://luokangyuan.com/"</span>,    <span class="token string">"title"</span><span class="token keyword">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span>, <span class="token punctuation">{</span>    <span class="token string">"avatar"</span><span class="token keyword">:</span> <span class="token string">"http://image.luokangyuan.com/4027734.jpeg"</span>,    <span class="token string">"name"</span><span class="token keyword">:</span> <span class="token string">"闪烁之狐"</span>,    <span class="token string">"introduction"</span><span class="token keyword">:</span> <span class="token string">"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬"</span>,    <span class="token string">"url"</span><span class="token keyword">:</span> <span class="token string">"https://blinkfox.github.io/"</span>,    <span class="token string">"title"</span><span class="token keyword">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span>, <span class="token punctuation">{</span>    <span class="token string">"avatar"</span><span class="token keyword">:</span> <span class="token string">"http://image.luokangyuan.com/avatar.jpg"</span>,    <span class="token string">"name"</span><span class="token keyword">:</span> <span class="token string">"ja_rome"</span>,    <span class="token string">"introduction"</span><span class="token keyword">:</span> <span class="token string">"平凡的脚步也可以走出伟大的行程"</span>,    <span class="token string">"url"</span><span class="token keyword">:</span> <span class="token string">"https://me.csdn.net/jlh912008548"</span>,    <span class="token string">"title"</span><span class="token keyword">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre><h4 id="2-10-一级菜单导航配置"><a href="#2-10-一级菜单导航配置" class="headerlink" title="2.10 一级菜单导航配置"></a>2.10 一级菜单导航配置</h4><p>配置基本菜单导航的名称、路径<code>url</code>和图标<code>icon</code></p><ul><li>菜单导航名称可以是中文也可以是英文(如：<code>Index</code>或主页) </li><li>图标<code>icon</code> 可以在<code>Font Awesome</code> 中查找</li></ul><pre class=" language-bash"><code class="language-bash">menu:  Index:    url: /    icon: fas fa-home  Tags:    url: /tags    icon: fas fa-tags  Categories:    url: /categories    icon: fas fa-bookmark  Archives:    url: /archives    icon: fas fa-archive  About:    url: /about    icon: fas fa-user-circle  Friends:    url: /friends    icon: fas fa-address-book</code></pre><h4 id="2-11-二级菜单配置方法"><a href="#2-11-二级菜单配置方法" class="headerlink" title="2.11 二级菜单配置方法"></a>2.11 二级菜单配置方法</h4><p>如果你需要二级菜单则可以在原基本菜单导航的基础上如下操作</p><ul><li>在需要添加二级菜单的一级菜单下添加<code>children</code>关键字(如:<code>About</code>菜单下添加<code>children</code>)</li><li>在<code>children</code>下创建二级菜单的 名称<code>name</code>,路径<code>url</code>和图标<code>icon</code>.</li><li>注意每个二级菜单模块前要加 -.</li><li>注意缩进格式</li></ul><pre class=" language-bash"><code class="language-bash">menu:  Index:    url: /    icon: fas fa-home  Tags:    url: /tags    icon: fas fa-tags  Categories:    url: /categories    icon: fas fa-bookmark  Archives:    url: /archives    icon: fas fa-archive  About:    url: /about    icon: fas fa-user-circle-o  Friends:    url: /friends    icon: fas fa-address-book  Medias:    icon: fas fa-list    children:      - name: Musics        url: /musics        icon: fas fa-music      - name: Movies        url: /movies        icon: fas fa-film      - name: Books        url: /books        icon: fas fa-book      - name: Galleries        url: /galleries        icon: fas fa-image</code></pre><p>执行 <code>hexo clean</code> &amp;&amp; <code>hexo g</code> 重新生成博客文件。</p><h4 id="2-12-代码高亮"><a href="#2-12-代码高亮" class="headerlink" title="2.12 代码高亮"></a>2.12 代码高亮</h4><p>由于 <code>Hexo</code> 自带的代码高亮主题显示不好看，所以主题中使用到了 <code>hexo-prism-plugin</code> 的 <code>Hexo</code> 插件来做代码高亮，安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i -S hexo-prism-plugin</code></pre><p>然后，修改 <code>Hexo</code> 根目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并新增 <code>prism</code> 插件相关的配置，主要配置如下：</p><pre class=" language-bash"><code class="language-bash">highlight:  enable: <span class="token boolean">false</span>prism_plugin:  mode: <span class="token string">'preprocess'</span>    <span class="token comment" spellcheck="true"># realtime/preprocess</span>  theme: <span class="token string">'tomorrow'</span>  line_number: <span class="token boolean">false</span>    <span class="token comment" spellcheck="true"># default false</span>  custom_css:</code></pre><blockquote><p>更多代码块优化详细内容请访问：<a href="http://luckyzmj.cn/posts/1b9a9e28.html">http://luckyzmj.cn/posts/1b9a9e28.html</a></p></blockquote><h4 id="2-13-搜索"><a href="#2-13-搜索" class="headerlink" title="2.13 搜索"></a>2.13 搜索</h4><p>本主题中还使用到了 <code>hexo-generator-search</code> 的 <code>Hexo</code> 插件来做内容搜索，安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-search --save</code></pre><p>在 <code>Hexo</code> 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class=" language-bash"><code class="language-bash">search:  path: search.xml  field: post</code></pre><h4 id="2-14-文章字数统计插件（建议安装）"><a href="#2-14-文章字数统计插件（建议安装）" class="headerlink" title="2.14 文章字数统计插件（建议安装）"></a>2.14 文章字数统计插件（建议安装）</h4><p>如果你想要在文章中显示文章字数、阅读时长信息，可以安装 <code>hexo-wordcount</code> 插件。</p><p>安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i --save hexo-wordcount</code></pre><p>然后只需在本主题下的 <code>_config.yml</code> 文件中，将各个文章字数相关的配置激活即可：</p><pre class=" language-bash"><code class="language-bash">postInfo:  date: <span class="token boolean">true</span>  update: <span class="token boolean">false</span>  wordCount: <span class="token boolean">false</span> <span class="token comment" spellcheck="true"># 设置文章字数统计为 true.</span>  totalCount: <span class="token boolean">false</span> <span class="token comment" spellcheck="true"># 设置站点文章总字数统计为 true.</span>  min2read: <span class="token boolean">false</span> <span class="token comment" spellcheck="true"># 阅读时长.</span>  readCount: <span class="token boolean">false</span> <span class="token comment" spellcheck="true"># 阅读次数.</span></code></pre><h4 id="2-15-添加emoji表情支持（可选的）"><a href="#2-15-添加emoji表情支持（可选的）" class="headerlink" title="2.15 添加emoji表情支持（可选的）"></a>2.15 添加emoji表情支持（可选的）</h4><p>本主题新增了对<code>emoji</code>表情的支持，使用到了 <code>hexo-filter-github-emojis</code> 的 <code>Hexo</code> 插件来支持 <code>emoji</code>表情的生成，把对应的<code>markdown</code> <code>emoji</code>语法（::,例如：<code>:smile:</code>）转变成会跳跃的<code>emoji</code>表情，安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-filter-github-emojis --save</code></pre><p>在 <code>Hexo</code> 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class=" language-bash"><code class="language-bash">githubEmojis:  enable: <span class="token boolean">true</span>  className: github-emoji  inject: <span class="token boolean">true</span>  styles:  customEmojis:</code></pre><h4 id="2-16-添加-RSS-订阅支持（可选的）"><a href="#2-16-添加-RSS-订阅支持（可选的）" class="headerlink" title="2.16 添加 RSS 订阅支持（可选的）"></a>2.16 添加 RSS 订阅支持（可选的）</h4><p>本主题中还使用到了<code>hexo-generator-feed</code>  的 <code>Hexo</code> 插件来做 <code>RSS</code>，安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-feed --save</code></pre><p>在 <code>Hexo</code> 根目录下的<code> _config.yml</code> 文件中，新增以下的配置项：</p><pre class=" language-bash"><code class="language-bash">feed:  type: atom  path: atom.xml  limit: 20  hub:  content:  content_limit: 140  content_limit_delim: <span class="token string">' '</span>  order_by: -date</code></pre><p>执行 <code>hexo clean</code> &amp;&amp; <code>hexo g</code> 重新生成博客文件，然后在 <code>public</code> 文件夹中即可看到 <code>atom.xml</code> 文件，说明你已经安装成功了。</p><h4 id="2-17-添加-DaoVoice-在线聊天功能（可选的）"><a href="#2-17-添加-DaoVoice-在线聊天功能（可选的）" class="headerlink" title="2.17 添加 DaoVoice 在线聊天功能（可选的）"></a>2.17 添加 DaoVoice 在线聊天功能（可选的）</h4><p>前往 <code>DaoVoice</code> 官网注册并且获取 <code>app_id</code>，并将 <code>app_id</code> 填入主题的 <code>_config.yml</code> 文件中。</p><h4 id="2-18-添加-Tidio-在线聊天功能（可选的）"><a href="#2-18-添加-Tidio-在线聊天功能（可选的）" class="headerlink" title="2.18 添加 Tidio 在线聊天功能（可选的）"></a>2.18 添加 Tidio 在线聊天功能（可选的）</h4><p>前往 <code>Tidio</code> 官网注册并且获取 <code>Public Key</code>，并将 <code>Public Key</code> 填入主题的 <code>_config.yml</code> 文件中。</p><h4 id="2-19-修改页脚"><a href="#2-19-修改页脚" class="headerlink" title="2.19 修改页脚"></a>2.19 修改页脚</h4><p>页脚信息可能需要做定制化修改，而且它不便于做成配置信息，所以可能需要你自己去再修改和加工。修改的地方在主题文件的 <code>/layout/_partial/footer.ejs</code> 文件中，包括站点、使用的主题、访问量等。</p><h4 id="2-20-修改社交链接"><a href="#2-20-修改社交链接" class="headerlink" title="2.20 修改社交链接"></a>2.20 修改社交链接</h4><p>在主题的 <code>_config.yml</code> 文件中，默认支持 <code>QQ</code>、<code>GitHub</code> 和邮箱等的配置，你可以在主题文件的 <code>/layout/_partial/social-link.ejs</code> 文件中，新增、修改你需要的社交链接地址，增加链接可参考如下代码：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">if</span> <span class="token attr-name">(theme.socialLink.github)</span> <span class="token attr-name">{</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&lt;%<span class="token punctuation">=</span> theme.socialLink.github %<span class="token punctuation">></span><span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tooltipped<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span> <span class="token attr-name">data-tooltip</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>访问我的GitHub<span class="token punctuation">"</span></span> <span class="token attr-name">data-position</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>top<span class="token punctuation">"</span></span> <span class="token attr-name">data-delay</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fab fa-github<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">}</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span></code></pre><p>其中，社交图标（如：<code>fa-github</code>）你可以在 <code>Font Awesome</code> 中搜索找到。以下是常用社交图标的标识，供你参考：</p><ul><li>Facebook: fab fa-facebook</li><li>Twitter: fab fa-twitter</li><li>Google-plus: fab fa-google-plus</li><li>Linkedin: fab fa-linkedin</li><li>Tumblr: fab fa-tumblr</li><li>Medium: fab fa-medium</li><li>Slack: fab fa-slack</li><li>Sina Weibo: fab fa-weibo</li><li>Wechat: fab fa-weixin</li><li>QQ: fab fa-qq</li><li>Zhihu: fab fa-zhihu</li></ul><p>注意: 本主题中使用的 <code>Font Awesome</code> 版本为 5.11.0。</p><h4 id="2-21-修改打赏的二维码图片"><a href="#2-21-修改打赏的二维码图片" class="headerlink" title="2.21 修改打赏的二维码图片"></a>2.21 修改打赏的二维码图片</h4><p>在主题文件的 <code>source/medias/reward</code> 文件中，你可以替换成你的的微信和支付宝的打赏二维码图片。</p><h4 id="2-22-配置音乐播放器（可选的）"><a href="#2-22-配置音乐播放器（可选的）" class="headerlink" title="2.22 配置音乐播放器（可选的）"></a>2.22 配置音乐播放器（可选的）</h4><p>要支持音乐播放，在主题的 <code>_config.yml</code> 配置文件中激活<code>music</code>配置即可</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 是否在首页显示音乐</span>music:  enable: <span class="token boolean">true</span>  title:             <span class="token comment" spellcheck="true">#非吸底模式有效</span>    enable: <span class="token boolean">true</span>    show: 听听音乐  server: netease   <span class="token comment" spellcheck="true">#require music platform: netease, tencent, kugou, xiami, baidu</span>  type: playlist    <span class="token comment" spellcheck="true">#require song, playlist, album, search, artist</span>  id: 503838841     <span class="token comment" spellcheck="true">#require song id / playlist id / album id / search keyword</span>  fixed: <span class="token boolean">false</span>      <span class="token comment" spellcheck="true"># 开启吸底模式</span>  autoplay: <span class="token boolean">false</span>   <span class="token comment" spellcheck="true"># 是否自动播放</span>  theme: <span class="token string">'#42b983'</span>  loop: <span class="token string">'all'</span>       <span class="token comment" spellcheck="true"># 音频循环播放, 可选值: 'all', 'one', 'none'</span>  order: <span class="token string">'random'</span>   <span class="token comment" spellcheck="true"># 音频循环顺序, 可选值: 'list', 'random'</span>  preload: <span class="token string">'auto'</span>   <span class="token comment" spellcheck="true"># 预加载，可选值: 'none', 'metadata', 'auto'</span>  volume: 0.7       <span class="token comment" spellcheck="true"># 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效</span>  listFolded: <span class="token boolean">true</span>  <span class="token comment" spellcheck="true"># 列表默认折叠</span>提示：    server可选netease（网易云音乐），tencent（QQ音乐），kugou（酷狗音乐），xiami（虾米音乐），baidu（百度音乐）。    type可选song（歌曲），playlist（歌单），album（专辑），search（搜索关键字），artist（歌手）    id获取示例: 浏览器打开网易云音乐，点击我喜欢的音乐歌单，地址栏有一串数字，playlist的id即为这串数字。</code></pre><h4 id="2-23文章-Front-matter-介绍"><a href="#2-23文章-Front-matter-介绍" class="headerlink" title="2.23文章 Front-matter 介绍"></a>2.23文章 Front-matter 介绍</h4><p><code>Front-matter</code> 选项中的所有内容均为非必填的。但我仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p><table><thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td>Markdown 的文件标题</td><td>文章标题，强烈建议填写此选项</td></tr><tr><td>date</td><td>文件创建时的日期时间</td><td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td>author</td><td>根 _config.yml 中的 author</td><td>文章作者</td></tr><tr><td>img</td><td>featureImages 中的某个值</td><td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <a href="http://xxx.com/xxx.jpg">http://xxx.com/xxx.jpg</a></td></tr><tr><td>top</td><td>true</td><td>推荐文章（文章是否置顶），如果 top 值为 true，则会作为首页推荐文章</td></tr><tr><td>cover</td><td>false</td><td>v1.0.2版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td>coverImg</td><td>无</td><td>v1.0.2版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>password</td><td>无</td><td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 password 的值，该值必须是用 SHA256 加密后的密码，防止被他人识破。前提是在主题的 config.yml 中激活了 verifyPassword 选项</td></tr><tr><td>toc</td><td>true</td><td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 config.yml 中激活了 toc 选项</td></tr><tr><td>mathjax</td><td>false</td><td>是否开启数学公式支持 ，本文章是否开启 mathjax，且需要在主题的 _config.yml 文件中也需要开启才行</td></tr><tr><td>summary</td><td>无</td><td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td>无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td>无</td><td>文章标签，一篇文章可以多个标签</td></tr><tr><td>keywords</td><td>文章标题</td><td>文章关键字，SEO 时需要</td></tr><tr><td>reprintPolicy</td><td>cc_by</td><td>文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td></tr></tbody></table><pre class=" language-bash"><code class="language-bash">注意:    如果 img 属性不填写的话，文章特色图会根据文章标题的 hashcode 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图各有特色。    <span class="token function">date</span> 的值尽量保证每篇文章是唯一的，因为本主题中 Gitalk 和 Gitment 识别 <span class="token function">id</span> 是通过 <span class="token function">date</span> 的值来作为唯一标识的。    如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 _config.yml 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：开源中国在线工具、chahuo、站长工具。    您可以在文章md文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则</code></pre><p>以下为文章的 <code>Front-matter</code> 示例。<br>最简示例</p><pre class=" language-bash"><code class="language-bash">---title: typora-vue-theme主题介绍date: 2018-09-07 09:25:00---</code></pre><p>最全示例</p><pre class=" language-bash"><code class="language-bash">---title: theme主题介绍date: 2018-09-07 09:25:00author: 赵奇img: /source/images/xxx.jpgtop: <span class="token boolean">true</span>cover: <span class="token boolean">true</span>coverImg: /images/1.jpgpassword: 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92toc: <span class="token boolean">false</span>mathjax: <span class="token boolean">false</span>summary: 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要categories: Markdowntags:  - Typora  - Markdown---</code></pre><h4 id="2-24-自定制修改"><a href="#2-24-自定制修改" class="headerlink" title="2.24 自定制修改"></a>2.24 自定制修改</h4><p>在本主题的 <code>_config.yml</code> 中可以修改部分自定义信息，有以下几个部分：</p><ul><li>菜单</li><li>我的梦想</li><li>首页的音乐播放器和视频播放器配置</li><li>是否显示推荐文章名称和按钮配置</li><li>favicon 和 Logo</li><li>个人信息</li><li>TOC 目录</li><li>文章打赏信息</li><li>复制文章内容时追加版权信息</li><li>MathJax</li><li>文章字数统计、阅读时长</li><li>点击页面的’爱心’效果</li><li>我的项目</li><li>我的技能</li><li>我的相册</li><li>Gitalk、Gitment、Valine 和 disqus 评论配置</li><li>不蒜子统计和谷歌分析（Google Analytics）</li><li>默认特色图的集合。当文章没有设置特色图时，本主题会根据文章标题的 hashcode 值取余，来选择展示对应的特色图</li></ul><p>我认为个人博客应该都有自己的风格和特色。如果本主题中的诸多功能和主题色彩你不满意，可以在主题中自定义修改，很多更自由的功能和细节点的修改难以在主题的 _config.yml 中完成，需要修改源代码才来完成。以下列出了可能对你有用的地方：<br>修改主题颜色</p><p>在主题文件的 <code>/source/css/matery.css</code> 文件中，搜索 <code>.bg-color</code> 来修改背景颜色：</p><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* 整体背景颜色，包括导航、移动端的导航、页尾、标签页等的背景颜色. */</span><span class="token selector"><span class="token class">.bg-color</span> </span><span class="token punctuation">{</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to right, <span class="token hexcode">#4cbf30</span> <span class="token number">0%</span>, <span class="token hexcode">#0f9d58</span> <span class="token number">100%</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@-webkit-keyframes</span> rainbow</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">/* 动态切换背景颜色. */</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@keyframes</span> rainbow</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* 动态切换背景颜色. */</span><span class="token punctuation">}</span><span class="token selector">body </span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* background-color: #eaeaea; */</span>    <span class="token comment" spellcheck="true">/* 增加背景壁纸*/</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url">url("https://ae01.alicdn.com/kf/H18a4b998752a4ae68b8e85d432a5aef0l.png")</span>, <span class="token url">url("http://luckyzmj.cn/img/yun.jpg")</span> <span class="token number">0</span>px <span class="token number">0</span>px<span class="token punctuation">;</span>    <span class="token property">background-attachment</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#34495e</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="2-25-修改-banner-图和文章特色图"><a href="#2-25-修改-banner-图和文章特色图" class="headerlink" title="2.25 修改 banner 图和文章特色图"></a>2.25 修改 banner 图和文章特色图</h4><p>你可以直接在 <code>/source/medias/banner</code> 文件夹中更换你喜欢的 <code>banner</code> 图片，主题代码中是每天动态切换一张，只需 7 张即可。如果你会 <code>JavaScript</code> 代码，可以修改成你自己喜欢切换逻辑，如：随机切换等，banner 切换的代码位置在 <code>/layout/_partial/bg-cover-content.ejs</code> 文件的 <code>&lt;script&gt;&lt;/script&gt;</code> 代码中：</p><pre class=" language-css"><code class="language-css">$<span class="token punctuation">(</span><span class="token string">'.bg-cover'</span><span class="token punctuation">)</span><span class="token number">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'background-image'</span>, <span class="token string">'url(/medias/banner/'</span> + new <span class="token function">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> + <span class="token string">'.jpg)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在 <code>/source/medias/featureimages</code> 文件夹中默认有 24 张特色图片，你可以再增加或者减少，并需要在 <code>_config.yml</code> 做同步修改。</p><h4 id="2-26-优化目录栏"><a href="#2-26-优化目录栏" class="headerlink" title="2.26 优化目录栏"></a>2.26 优化目录栏</h4><p>在 <code>themes\Matery\layout\_partial\post-detail-toc.ejs</code>，修改内容如下：</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.toc-widget</span> </span><span class="token punctuation">{</span>    <span class="token property">padding-left</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">345</span>px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">255</span>, <span class="token number">255</span>, <span class="token number">255</span>,<span class="token number">0.7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>    <span class="token property">box-shadow</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">10</span>px <span class="token number">35</span>px <span class="token number">2</span>px <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">.15</span><span class="token punctuation">)</span>, <span class="token number">0</span> <span class="token number">5</span>px <span class="token number">15</span>px <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">.07</span><span class="token punctuation">)</span>, <span class="token number">0</span> <span class="token number">2</span>px <span class="token number">5</span>px -<span class="token number">5</span>px <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">.1</span><span class="token punctuation">)</span> <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token id">#toc-content</span> </span><span class="token punctuation">{</span>    <span class="token property">margin-bottom</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="0x005-更多详细教程"><a href="#0x005-更多详细教程" class="headerlink" title="0x005 更多详细教程"></a>0x005 更多详细教程</h2><p>以下几篇文章都是基于<code>Hexo</code>框架和<code>hexo-theme-matery</code>主题优化的教程，大家如果遇到问题，可以参考其中的方法。</p><ul><li><a href="https://sunhwee.com/posts/6e8839eb.html">Hexo+Github博客搭建完全教程</a></li><li><a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md">hexo-theme-matery作者教程</a></li><li><a href="https://yafine-blog.cn/posts/4ab2.html">Hexo+github搭建博客(超级详细版，精细入微)</a></li><li><a href="https://blog.csdn.net/cungudafa/article/details/106278206">hexo（matery）背景、滚动条优化+增加点击跳评论</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 博客篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 博客 </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
